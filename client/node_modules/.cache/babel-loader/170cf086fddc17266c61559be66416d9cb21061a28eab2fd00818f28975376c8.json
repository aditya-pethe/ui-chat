{"ast":null,"code":"import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n  /// @internal\n  constructor(\n  /// The parse that this stack is part of @internal\n  p,\n  /// Holds state, input pos, buffer index triplets for all but the\n  /// top state @internal\n  stack,\n  /// The current parse state @internal\n  state,\n  // The position at which the next reduce should take place. This\n  // can be less than `this.pos` when skipped expressions have been\n  // added to the stack (which should be moved outside of the next\n  // reduction)\n  /// @internal\n  reducePos,\n  /// The input position up to which this stack has parsed.\n  pos,\n  /// The dynamic score of the stack, including dynamic precedence\n  /// and error-recovery penalties\n  /// @internal\n  score,\n  // The output buffer. Holds (type, start, end, size) quads\n  // representing nodes created by the parser, where `size` is\n  // amount of buffer array entries covered by this node.\n  /// @internal\n  buffer,\n  // The base offset of the buffer. When stacks are split, the split\n  // instance shared the buffer history with its parent up to\n  // `bufferBase`, which is the absolute offset (including the\n  // offset of previous splits) into the buffer at which this stack\n  // starts writing.\n  /// @internal\n  bufferBase,\n  /// @internal\n  curContext) {\n    let lookAhead = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let\n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent = arguments.length > 10 ? arguments[10] : undefined;\n    this.p = p;\n    this.stack = stack;\n    this.state = state;\n    this.reducePos = reducePos;\n    this.pos = pos;\n    this.score = score;\n    this.buffer = buffer;\n    this.bufferBase = bufferBase;\n    this.curContext = curContext;\n    this.lookAhead = lookAhead;\n    this.parent = parent;\n  }\n  /// @internal\n  toString() {\n    return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n  }\n  // Start an empty stack\n  /// @internal\n  static start(p, state) {\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let cx = p.parser.context;\n    return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n  }\n  /// The stack's current [context](#lr.ContextTracker) value, if\n  /// any. Its type will depend on the context tracker's type\n  /// parameter, or it will be `null` if there is no context\n  /// tracker.\n  get context() {\n    return this.curContext ? this.curContext.context : null;\n  }\n  // Push a state onto the stack, tracking its start position as well\n  // as the buffer base at that point.\n  /// @internal\n  pushState(state, start) {\n    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n    this.state = state;\n  }\n  // Apply a reduce action\n  /// @internal\n  reduce(action) {\n    var _a;\n    let depth = action >> 19 /* Action.ReduceDepthShift */,\n      type = action & 65535 /* Action.ValueMask */;\n    let {\n      parser\n    } = this.p;\n    let dPrec = parser.dynamicPrecedence(type);\n    if (dPrec) this.score += dPrec;\n    if (depth == 0) {\n      this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n      // Zero-depth reductions are a special caseâ€”they add stuff to\n      // the stack without popping anything off.\n      if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n      this.reduceContext(type, this.reducePos);\n      return;\n    }\n    // Find the base index into `this.stack`, content after which will\n    // be dropped. Note that with `StayFlag` reductions we need to\n    // consume two extra frames (the dummy parent node for the skipped\n    // expression and the state that we'll be staying in, which should\n    // be moved to `this.state`).\n    let base = this.stack.length - (depth - 1) * 3 - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n    let start = base ? this.stack[base - 2] : this.p.ranges[0].from,\n      size = this.reducePos - start;\n    // This is a kludge to try and detect overly deep left-associative\n    // trees, which will not increase the parse stack depth and thus\n    // won't be caught by the regular stack-depth limit check.\n    if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n      if (start == this.p.lastBigReductionStart) {\n        this.p.bigReductionCount++;\n        this.p.lastBigReductionSize = size;\n      } else if (this.p.lastBigReductionSize < size) {\n        this.p.bigReductionCount = 1;\n        this.p.lastBigReductionStart = start;\n        this.p.lastBigReductionSize = size;\n      }\n    }\n    let bufferBase = base ? this.stack[base - 1] : 0,\n      count = this.bufferBase + this.buffer.length - bufferBase;\n    // Store normal terms or `R -> R R` repeat reductions\n    if (type < parser.minRepeatTerm || action & 131072 /* Action.RepeatFlag */) {\n      let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n      this.storeNode(type, start, pos, count + 4, true);\n    }\n    if (action & 262144 /* Action.StayFlag */) {\n      this.state = this.stack[base];\n    } else {\n      let baseStateID = this.stack[base - 3];\n      this.state = parser.getGoto(baseStateID, type, true);\n    }\n    while (this.stack.length > base) this.stack.pop();\n    this.reduceContext(type, start);\n  }\n  // Shift a value into the buffer\n  /// @internal\n  storeNode(term, start, end) {\n    let size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n    let isReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (term == 0 /* Term.Err */ && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n      // Try to omit/merge adjacent error nodes\n      let cur = this,\n        top = this.buffer.length;\n      if (top == 0 && cur.parent) {\n        top = cur.bufferBase - cur.parent.bufferBase;\n        cur = cur.parent;\n      }\n      if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n        if (start == end) return;\n        if (cur.buffer[top - 2] >= start) {\n          cur.buffer[top - 2] = end;\n          return;\n        }\n      }\n    }\n    if (!isReduce || this.pos == end) {\n      // Simple case, just append\n      this.buffer.push(term, start, end, size);\n    } else {\n      // There may be skipped nodes that have to be moved forward\n      let index = this.buffer.length;\n      if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) while (index > 0 && this.buffer[index - 2] > end) {\n        // Move this record forward\n        this.buffer[index] = this.buffer[index - 4];\n        this.buffer[index + 1] = this.buffer[index - 3];\n        this.buffer[index + 2] = this.buffer[index - 2];\n        this.buffer[index + 3] = this.buffer[index - 1];\n        index -= 4;\n        if (size > 4) size -= 4;\n      }\n      this.buffer[index] = term;\n      this.buffer[index + 1] = start;\n      this.buffer[index + 2] = end;\n      this.buffer[index + 3] = size;\n    }\n  }\n  // Apply a shift action\n  /// @internal\n  shift(action, next, nextEnd) {\n    let start = this.pos;\n    if (action & 131072 /* Action.GotoFlag */) {\n      this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n    } else if ((action & 262144 /* Action.StayFlag */) == 0) {\n      // Regular shift\n      let nextState = action,\n        {\n          parser\n        } = this.p;\n      if (nextEnd > this.pos || next <= parser.maxNode) {\n        this.pos = nextEnd;\n        if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */)) this.reducePos = nextEnd;\n      }\n      this.pushState(nextState, start);\n      this.shiftContext(next, start);\n      if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n    } else {\n      // Shift-and-stay, which means this is a skipped token\n      this.pos = nextEnd;\n      this.shiftContext(next, start);\n      if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n    }\n  }\n  // Apply an action\n  /// @internal\n  apply(action, next, nextEnd) {\n    if (action & 65536 /* Action.ReduceFlag */) this.reduce(action);else this.shift(action, next, nextEnd);\n  }\n  // Add a prebuilt (reused) node into the buffer.\n  /// @internal\n  useNode(value, next) {\n    let index = this.p.reused.length - 1;\n    if (index < 0 || this.p.reused[index] != value) {\n      this.p.reused.push(value);\n      index++;\n    }\n    let start = this.pos;\n    this.reducePos = this.pos = start + value.length;\n    this.pushState(next, start);\n    this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n    if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n  }\n  // Split the stack. Due to the buffer sharing and the fact\n  // that `this.stack` tends to stay quite shallow, this isn't very\n  // expensive.\n  /// @internal\n  split() {\n    let parent = this;\n    let off = parent.buffer.length;\n    // Because the top of the buffer (after this.pos) may be mutated\n    // to reorder reductions and skipped tokens, and shared buffers\n    // should be immutable, this copies any outstanding skipped tokens\n    // to the new buffer, and puts the base pointer before them.\n    while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;\n    let buffer = parent.buffer.slice(off),\n      base = parent.bufferBase + off;\n    // Make sure parent points to an actual parent with content, if there is such a parent.\n    while (parent && base == parent.bufferBase) parent = parent.parent;\n    return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n  }\n  // Try to recover from an error by 'deleting' (ignoring) one token.\n  /// @internal\n  recoverByDelete(next, nextEnd) {\n    let isNode = next <= this.p.parser.maxNode;\n    if (isNode) this.storeNode(next, this.pos, nextEnd, 4);\n    this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n    this.pos = this.reducePos = nextEnd;\n    this.score -= 190 /* Recover.Delete */;\n  }\n  /// Check if the given term would be able to be shifted (optionally\n  /// after some reductions) on this stack. This can be useful for\n  /// external tokenizers that want to make sure they only provide a\n  /// given token when it applies.\n  canShift(term) {\n    for (let sim = new SimulatedStack(this);;) {\n      let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n      if (action == 0) return false;\n      if ((action & 65536 /* Action.ReduceFlag */) == 0) return true;\n      sim.reduce(action);\n    }\n  }\n  // Apply up to Recover.MaxNext recovery actions that conceptually\n  // inserts some missing token or rule.\n  /// @internal\n  recoverByInsert(next) {\n    if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */) return [];\n    let nextStates = this.p.parser.nextStates(this.state);\n    if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n      let best = [];\n      for (let i = 0, s; i < nextStates.length; i += 2) {\n        if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);\n      }\n      if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */) for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n        let s = nextStates[i + 1];\n        if (!best.some((v, i) => i & 1 && v == s)) best.push(nextStates[i], s);\n      }\n      nextStates = best;\n    }\n    let result = [];\n    for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n      let s = nextStates[i + 1];\n      if (s == this.state) continue;\n      let stack = this.split();\n      stack.pushState(s, this.pos);\n      stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n      stack.shiftContext(nextStates[i], this.pos);\n      stack.score -= 200 /* Recover.Insert */;\n      result.push(stack);\n    }\n    return result;\n  }\n  // Force a reduce, if possible. Return false if that can't\n  // be done.\n  /// @internal\n  forceReduce() {\n    let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n    if ((reduce & 65536 /* Action.ReduceFlag */) == 0) return false;\n    let {\n      parser\n    } = this.p;\n    if (!parser.validAction(this.state, reduce)) {\n      let depth = reduce >> 19 /* Action.ReduceDepthShift */,\n        term = reduce & 65535 /* Action.ValueMask */;\n      let target = this.stack.length - depth * 3;\n      if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;\n      this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n      this.score -= 100 /* Recover.Reduce */;\n    }\n\n    this.reducePos = this.pos;\n    this.reduce(reduce);\n    return true;\n  }\n  /// @internal\n  forceAll() {\n    while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n      if (!this.forceReduce()) {\n        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n        break;\n      }\n    }\n    return this;\n  }\n  /// Check whether this state has no further actions (assumed to be a direct descendant of the\n  /// top state, since any other states must be able to continue\n  /// somehow). @internal\n  get deadEnd() {\n    if (this.stack.length != 3) return false;\n    let {\n      parser\n    } = this.p;\n    return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ && !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n  }\n  /// Restart the stack (put it back in its start state). Only safe\n  /// when this.stack.length == 3 (state is directly below the top\n  /// state). @internal\n  restart() {\n    this.state = this.stack[0];\n    this.stack.length = 0;\n  }\n  /// @internal\n  sameState(other) {\n    if (this.state != other.state || this.stack.length != other.stack.length) return false;\n    for (let i = 0; i < this.stack.length; i += 3) if (this.stack[i] != other.stack[i]) return false;\n    return true;\n  }\n  /// Get the parser used by this stack.\n  get parser() {\n    return this.p.parser;\n  }\n  /// Test whether a given dialect (by numeric ID, as exported from\n  /// the terms file) is enabled.\n  dialectEnabled(dialectID) {\n    return this.p.parser.dialect.flags[dialectID];\n  }\n  shiftContext(term, start) {\n    if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n  }\n  reduceContext(term, start) {\n    if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n  }\n  /// @internal\n  emitContext() {\n    let last = this.buffer.length - 1;\n    if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n  }\n  /// @internal\n  emitLookAhead() {\n    let last = this.buffer.length - 1;\n    if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n  }\n  updateContext(context) {\n    if (context != this.curContext.context) {\n      let newCx = new StackContext(this.curContext.tracker, context);\n      if (newCx.hash != this.curContext.hash) this.emitContext();\n      this.curContext = newCx;\n    }\n  }\n  /// @internal\n  setLookAhead(lookAhead) {\n    if (lookAhead > this.lookAhead) {\n      this.emitLookAhead();\n      this.lookAhead = lookAhead;\n    }\n  }\n  /// @internal\n  close() {\n    if (this.curContext && this.curContext.tracker.strict) this.emitContext();\n    if (this.lookAhead > 0) this.emitLookAhead();\n  }\n}\nclass StackContext {\n  constructor(tracker, context) {\n    this.tracker = tracker;\n    this.context = context;\n    this.hash = tracker.strict ? tracker.hash(context) : 0;\n  }\n}\nvar Recover;\n(function (Recover) {\n  Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n  Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n  Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n  Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n  Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n  Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n  Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n  constructor(start) {\n    this.start = start;\n    this.state = start.state;\n    this.stack = start.stack;\n    this.base = this.stack.length;\n  }\n  reduce(action) {\n    let term = action & 65535 /* Action.ValueMask */,\n      depth = action >> 19 /* Action.ReduceDepthShift */;\n    if (depth == 0) {\n      if (this.stack == this.start.stack) this.stack = this.stack.slice();\n      this.stack.push(this.state, 0, 0);\n      this.base += 3;\n    } else {\n      this.base -= (depth - 1) * 3;\n    }\n    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n    this.state = goto;\n  }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n  constructor(stack, pos, index) {\n    this.stack = stack;\n    this.pos = pos;\n    this.index = index;\n    this.buffer = stack.buffer;\n    if (this.index == 0) this.maybeNext();\n  }\n  static create(stack) {\n    let pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.bufferBase + stack.buffer.length;\n    return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n  }\n  maybeNext() {\n    let next = this.stack.parent;\n    if (next != null) {\n      this.index = this.stack.bufferBase - next.bufferBase;\n      this.stack = next;\n      this.buffer = next.buffer;\n    }\n  }\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n  next() {\n    this.index -= 4;\n    this.pos -= 4;\n    if (this.index == 0) this.maybeNext();\n  }\n  fork() {\n    return new StackBufferCursor(this.stack, this.pos, this.index);\n  }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input) {\n  let Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;\n  if (typeof input != \"string\") return input;\n  let array = null;\n  for (let pos = 0, out = 0; pos < input.length;) {\n    let value = 0;\n    for (;;) {\n      let next = input.charCodeAt(pos++),\n        stop = false;\n      if (next == 126 /* Encode.BigValCode */) {\n        value = 65535 /* Encode.BigVal */;\n        break;\n      }\n      if (next >= 92 /* Encode.Gap2 */) next--;\n      if (next >= 34 /* Encode.Gap1 */) next--;\n      let digit = next - 32 /* Encode.Start */;\n      if (digit >= 46 /* Encode.Base */) {\n        digit -= 46 /* Encode.Base */;\n        stop = true;\n      }\n      value += digit;\n      if (stop) break;\n      value *= 46 /* Encode.Base */;\n    }\n\n    if (array) array[out++] = value;else array = new Type(value);\n  }\n  return array;\n}\nclass CachedToken {\n  constructor() {\n    this.start = -1;\n    this.value = -1;\n    this.end = -1;\n    this.extended = -1;\n    this.lookAhead = 0;\n    this.mask = 0;\n    this.context = 0;\n  }\n}\nconst nullToken = new CachedToken();\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n  /// @internal\n  constructor(\n  /// @internal\n  input,\n  /// @internal\n  ranges) {\n    this.input = input;\n    this.ranges = ranges;\n    /// @internal\n    this.chunk = \"\";\n    /// @internal\n    this.chunkOff = 0;\n    /// Backup chunk\n    this.chunk2 = \"\";\n    this.chunk2Pos = 0;\n    /// The character code of the next code unit in the input, or -1\n    /// when the stream is at the end of the input.\n    this.next = -1;\n    /// @internal\n    this.token = nullToken;\n    this.rangeIndex = 0;\n    this.pos = this.chunkPos = ranges[0].from;\n    this.range = ranges[0];\n    this.end = ranges[ranges.length - 1].to;\n    this.readNext();\n  }\n  /// @internal\n  resolveOffset(offset, assoc) {\n    let range = this.range,\n      index = this.rangeIndex;\n    let pos = this.pos + offset;\n    while (pos < range.from) {\n      if (!index) return null;\n      let next = this.ranges[--index];\n      pos -= range.from - next.to;\n      range = next;\n    }\n    while (assoc < 0 ? pos > range.to : pos >= range.to) {\n      if (index == this.ranges.length - 1) return null;\n      let next = this.ranges[++index];\n      pos += next.from - range.to;\n      range = next;\n    }\n    return pos;\n  }\n  /// @internal\n  clipPos(pos) {\n    if (pos >= this.range.from && pos < this.range.to) return pos;\n    for (let range of this.ranges) if (range.to > pos) return Math.max(pos, range.from);\n    return this.end;\n  }\n  /// Look at a code unit near the stream position. `.peek(0)` equals\n  /// `.next`, `.peek(-1)` gives you the previous character, and so\n  /// on.\n  ///\n  /// Note that looking around during tokenizing creates dependencies\n  /// on potentially far-away content, which may reduce the\n  /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n  /// cause invalid reparses when looking backward more than 25 code\n  /// units, since the library does not track lookbehind.\n  peek(offset) {\n    let idx = this.chunkOff + offset,\n      pos,\n      result;\n    if (idx >= 0 && idx < this.chunk.length) {\n      pos = this.pos + offset;\n      result = this.chunk.charCodeAt(idx);\n    } else {\n      let resolved = this.resolveOffset(offset, 1);\n      if (resolved == null) return -1;\n      pos = resolved;\n      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n      } else {\n        let i = this.rangeIndex,\n          range = this.range;\n        while (range.to <= pos) range = this.ranges[++i];\n        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n        if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);\n        result = this.chunk2.charCodeAt(0);\n      }\n    }\n    if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;\n    return result;\n  }\n  /// Accept a token. By default, the end of the token is set to the\n  /// current stream position, but you can pass an offset (relative to\n  /// the stream position) to change that.\n  acceptToken(token) {\n    let endOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n    if (end == null || end < this.token.start) throw new RangeError(\"Token end out of bounds\");\n    this.token.value = token;\n    this.token.end = end;\n  }\n  getChunk() {\n    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n      let {\n        chunk,\n        chunkPos\n      } = this;\n      this.chunk = this.chunk2;\n      this.chunkPos = this.chunk2Pos;\n      this.chunk2 = chunk;\n      this.chunk2Pos = chunkPos;\n      this.chunkOff = this.pos - this.chunkPos;\n    } else {\n      this.chunk2 = this.chunk;\n      this.chunk2Pos = this.chunkPos;\n      let nextChunk = this.input.chunk(this.pos);\n      let end = this.pos + nextChunk.length;\n      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n      this.chunkPos = this.pos;\n      this.chunkOff = 0;\n    }\n  }\n  readNext() {\n    if (this.chunkOff >= this.chunk.length) {\n      this.getChunk();\n      if (this.chunkOff == this.chunk.length) return this.next = -1;\n    }\n    return this.next = this.chunk.charCodeAt(this.chunkOff);\n  }\n  /// Move the stream forward N (defaults to 1) code units. Returns\n  /// the new value of [`next`](#lr.InputStream.next).\n  advance() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    this.chunkOff += n;\n    while (this.pos + n >= this.range.to) {\n      if (this.rangeIndex == this.ranges.length - 1) return this.setDone();\n      n -= this.range.to - this.pos;\n      this.range = this.ranges[++this.rangeIndex];\n      this.pos = this.range.from;\n    }\n    this.pos += n;\n    if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;\n    return this.readNext();\n  }\n  setDone() {\n    this.pos = this.chunkPos = this.end;\n    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n    this.chunk = \"\";\n    return this.next = -1;\n  }\n  /// @internal\n  reset(pos, token) {\n    if (token) {\n      this.token = token;\n      token.start = pos;\n      token.lookAhead = pos + 1;\n      token.value = token.extended = -1;\n    } else {\n      this.token = nullToken;\n    }\n    if (this.pos != pos) {\n      this.pos = pos;\n      if (pos == this.end) {\n        this.setDone();\n        return this;\n      }\n      while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];\n      while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];\n      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n        this.chunkOff = pos - this.chunkPos;\n      } else {\n        this.chunk = \"\";\n        this.chunkOff = 0;\n      }\n      this.readNext();\n    }\n    return this;\n  }\n  /// @internal\n  read(from, to) {\n    if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n    if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length) return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n    if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);\n    let result = \"\";\n    for (let r of this.ranges) {\n      if (r.from >= to) break;\n      if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n    }\n    return result;\n  }\n}\n/// @internal\nclass TokenGroup {\n  constructor(data, id) {\n    this.data = data;\n    this.id = id;\n  }\n  token(input, stack) {\n    let {\n      parser\n    } = stack.p;\n    readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n  }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n  constructor(data, precTable, elseToken) {\n    this.precTable = precTable;\n    this.elseToken = elseToken;\n    this.data = typeof data == \"string\" ? decodeArray(data) : data;\n  }\n  token(input, stack) {\n    let start = input.pos,\n      skipped = 0;\n    for (;;) {\n      readToken(this.data, input, stack, 0, this.data, this.precTable);\n      if (input.token.value > -1) break;\n      if (this.elseToken == null) return;\n      if (input.next < 0) break;\n      input.advance();\n      input.reset(input.pos, input.token);\n      skipped++;\n    }\n    if (skipped) {\n      input.reset(start, input.token);\n      input.acceptToken(this.elseToken, skipped);\n    }\n  }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n  /// Create a tokenizer. The first argument is the function that,\n  /// given an input stream, scans for the types of tokens it\n  /// recognizes at the stream's position, and calls\n  /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n  /// one.\n  constructor(\n  /// @internal\n  token) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.token = token;\n    this.contextual = !!options.contextual;\n    this.fallback = !!options.fallback;\n    this.extend = !!options.extend;\n  }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n  let state = 0,\n    groupMask = 1 << group,\n    {\n      dialect\n    } = stack.p.parser;\n  scan: for (;;) {\n    if ((groupMask & data[state]) == 0) break;\n    let accEnd = data[state + 1];\n    // Check whether this state can lead to a token in the current group\n    // Accept tokens in this state, possibly overwriting\n    // lower-precedence / shorter tokens\n    for (let i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {\n      let term = data[i];\n      if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {\n        input.acceptToken(term);\n        break;\n      }\n    }\n    let next = input.next,\n      low = 0,\n      high = data[state + 2];\n    // Special case for EOF\n    if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n      state = data[accEnd + high * 3 - 1];\n      continue scan;\n    }\n    // Do a binary search on the state's edges\n    for (; low < high;) {\n      let mid = low + high >> 1;\n      let index = accEnd + mid + (mid << 1);\n      let from = data[index],\n        to = data[index + 1] || 0x10000;\n      if (next < from) high = mid;else if (next >= to) low = mid + 1;else {\n        state = data[index + 2];\n        input.advance();\n        continue scan;\n      }\n    }\n    break;\n  }\n}\nfunction findOffset(data, start, term) {\n  for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++) if (next == term) return i - start;\n  return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n  let iPrev = findOffset(tableData, tableOffset, prev);\n  return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n  Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n  let cursor = tree.cursor(IterMode.IncludeAnonymous);\n  cursor.moveTo(pos);\n  for (;;) {\n    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {\n      if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;\n      if (!cursor.parent()) return side < 0 ? 0 : tree.length;\n    }\n  }\n}\nclass FragmentCursor {\n  constructor(fragments, nodeSet) {\n    this.fragments = fragments;\n    this.nodeSet = nodeSet;\n    this.i = 0;\n    this.fragment = null;\n    this.safeFrom = -1;\n    this.safeTo = -1;\n    this.trees = [];\n    this.start = [];\n    this.index = [];\n    this.nextFragment();\n  }\n  nextFragment() {\n    let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n    if (fr) {\n      this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n      this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n      while (this.trees.length) {\n        this.trees.pop();\n        this.start.pop();\n        this.index.pop();\n      }\n      this.trees.push(fr.tree);\n      this.start.push(-fr.offset);\n      this.index.push(0);\n      this.nextStart = this.safeFrom;\n    } else {\n      this.nextStart = 1e9;\n    }\n  }\n  // `pos` must be >= any previously given `pos` for this cursor\n  nodeAt(pos) {\n    if (pos < this.nextStart) return null;\n    while (this.fragment && this.safeTo <= pos) this.nextFragment();\n    if (!this.fragment) return null;\n    for (;;) {\n      let last = this.trees.length - 1;\n      if (last < 0) {\n        // End of tree\n        this.nextFragment();\n        return null;\n      }\n      let top = this.trees[last],\n        index = this.index[last];\n      if (index == top.children.length) {\n        this.trees.pop();\n        this.start.pop();\n        this.index.pop();\n        continue;\n      }\n      let next = top.children[index];\n      let start = this.start[last] + top.positions[index];\n      if (start > pos) {\n        this.nextStart = start;\n        return null;\n      }\n      if (next instanceof Tree) {\n        if (start == pos) {\n          if (start < this.safeFrom) return null;\n          let end = start + next.length;\n          if (end <= this.safeTo) {\n            let lookAhead = next.prop(NodeProp.lookAhead);\n            if (!lookAhead || end + lookAhead < this.fragment.to) return next;\n          }\n        }\n        this.index[last]++;\n        if (start + next.length >= Math.max(this.safeFrom, pos)) {\n          // Enter this node\n          this.trees.push(next);\n          this.start.push(start);\n          this.index.push(0);\n        }\n      } else {\n        this.index[last]++;\n        this.nextStart = start + next.length;\n      }\n    }\n  }\n}\nclass TokenCache {\n  constructor(parser, stream) {\n    this.stream = stream;\n    this.tokens = [];\n    this.mainToken = null;\n    this.actions = [];\n    this.tokens = parser.tokenizers.map(_ => new CachedToken());\n  }\n  getActions(stack) {\n    let actionIndex = 0;\n    let main = null;\n    let {\n        parser\n      } = stack.p,\n      {\n        tokenizers\n      } = parser;\n    let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n    let context = stack.curContext ? stack.curContext.hash : 0;\n    let lookAhead = 0;\n    for (let i = 0; i < tokenizers.length; i++) {\n      if ((1 << i & mask) == 0) continue;\n      let tokenizer = tokenizers[i],\n        token = this.tokens[i];\n      if (main && !tokenizer.fallback) continue;\n      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n        this.updateCachedToken(token, tokenizer, stack);\n        token.mask = mask;\n        token.context = context;\n      }\n      if (token.lookAhead > token.end + 25 /* Safety.Margin */) lookAhead = Math.max(token.lookAhead, lookAhead);\n      if (token.value != 0 /* Term.Err */) {\n        let startIndex = actionIndex;\n        if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n        actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n        if (!tokenizer.extend) {\n          main = token;\n          if (actionIndex > startIndex) break;\n        }\n      }\n    }\n    while (this.actions.length > actionIndex) this.actions.pop();\n    if (lookAhead) stack.setLookAhead(lookAhead);\n    if (!main && stack.pos == this.stream.end) {\n      main = new CachedToken();\n      main.value = stack.p.parser.eofTerm;\n      main.start = main.end = stack.pos;\n      actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n    }\n    this.mainToken = main;\n    return this.actions;\n  }\n  getMainToken(stack) {\n    if (this.mainToken) return this.mainToken;\n    let main = new CachedToken(),\n      {\n        pos,\n        p\n      } = stack;\n    main.start = pos;\n    main.end = Math.min(pos + 1, p.stream.end);\n    main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n    return main;\n  }\n  updateCachedToken(token, tokenizer, stack) {\n    let start = this.stream.clipPos(stack.pos);\n    tokenizer.token(this.stream.reset(start, token), stack);\n    if (token.value > -1) {\n      let {\n        parser\n      } = stack.p;\n      for (let i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {\n        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n          if ((result & 1) == 0 /* Specialize.Specialize */) token.value = result >> 1;else token.extended = result >> 1;\n          break;\n        }\n      }\n    } else {\n      token.value = 0 /* Term.Err */;\n      token.end = this.stream.clipPos(start + 1);\n    }\n  }\n  putAction(action, token, end, index) {\n    // Don't add duplicate actions\n    for (let i = 0; i < index; i += 3) if (this.actions[i] == action) return index;\n    this.actions[index++] = action;\n    this.actions[index++] = token;\n    this.actions[index++] = end;\n    return index;\n  }\n  addActions(stack, token, end, index) {\n    let {\n        state\n      } = stack,\n      {\n        parser\n      } = stack.p,\n      {\n        data\n      } = parser;\n    for (let set = 0; set < 2; set++) {\n      for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n        if (data[i] == 65535 /* Seq.End */) {\n          if (data[i + 1] == 1 /* Seq.Next */) {\n            i = pair(data, i + 2);\n          } else {\n            if (index == 0 && data[i + 1] == 2 /* Seq.Other */) index = this.putAction(pair(data, i + 2), token, end, index);\n            break;\n          }\n        }\n        if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);\n      }\n    }\n    return index;\n  }\n}\nvar Rec;\n(function (Rec) {\n  Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n  Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n  // When two stacks have been running independently long enough to\n  // add this many elements to their buffers, prune one.\n  Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n  Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n  // Once a stack reaches this depth (in .stack.length) force-reduce\n  // it back to CutTo to avoid creating trees that overflow the stack\n  // on recursive traversal.\n  Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n  Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n  Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n  // The maximum number of non-recovering stacks to explore (to avoid\n  // getting bogged down with exponentially multiplying stacks in\n  // ambiguous content)\n  Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n  constructor(parser, input, fragments, ranges) {\n    this.parser = parser;\n    this.input = input;\n    this.ranges = ranges;\n    this.recovering = 0;\n    this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n    this.minStackPos = 0;\n    this.reused = [];\n    this.stoppedAt = null;\n    this.lastBigReductionStart = -1;\n    this.lastBigReductionSize = 0;\n    this.bigReductionCount = 0;\n    this.stream = new InputStream(input, ranges);\n    this.tokens = new TokenCache(parser, this.stream);\n    this.topTerm = parser.top[1];\n    let {\n      from\n    } = ranges[0];\n    this.stacks = [Stack.start(this, parser.top[0], from)];\n    this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;\n  }\n  get parsedPos() {\n    return this.minStackPos;\n  }\n  // Move the parser forward. This will process all parse stacks at\n  // `this.pos` and try to advance them to a further position. If no\n  // stack for such a position is found, it'll start error-recovery.\n  //\n  // When the parse is finished, this will return a syntax tree. When\n  // not, it returns `null`.\n  advance() {\n    let stacks = this.stacks,\n      pos = this.minStackPos;\n    // This will hold stacks beyond `pos`.\n    let newStacks = this.stacks = [];\n    let stopped, stoppedTokens;\n    // If a large amount of reductions happened with the same start\n    // position, force the stack out of that production in order to\n    // avoid creating a tree too deep to recurse through.\n    // (This is an ugly kludge, because unfortunately there is no\n    // straightforward, cheap way to check for this happening, due to\n    // the history of reductions only being available in an\n    // expensive-to-access format in the stack buffers.)\n    if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n      let [s] = stacks;\n      while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) {}\n      this.bigReductionCount = this.lastBigReductionSize = 0;\n    }\n    // Keep advancing any stacks at `pos` until they either move\n    // forward or can't be advanced. Gather stacks that can't be\n    // advanced further in `stopped`.\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i];\n      for (;;) {\n        this.tokens.mainToken = null;\n        if (stack.pos > pos) {\n          newStacks.push(stack);\n        } else if (this.advanceStack(stack, newStacks, stacks)) {\n          continue;\n        } else {\n          if (!stopped) {\n            stopped = [];\n            stoppedTokens = [];\n          }\n          stopped.push(stack);\n          let tok = this.tokens.getMainToken(stack);\n          stoppedTokens.push(tok.value, tok.end);\n        }\n        break;\n      }\n    }\n    if (!newStacks.length) {\n      let finished = stopped && findFinished(stopped);\n      if (finished) return this.stackToTree(finished);\n      if (this.parser.strict) {\n        if (verbose && stopped) console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n        throw new SyntaxError(\"No parse at \" + pos);\n      }\n      if (!this.recovering) this.recovering = 5 /* Rec.Distance */;\n    }\n\n    if (this.recovering && stopped) {\n      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);\n      if (finished) return this.stackToTree(finished.forceAll());\n    }\n    if (this.recovering) {\n      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n      if (newStacks.length > maxRemaining) {\n        newStacks.sort((a, b) => b.score - a.score);\n        while (newStacks.length > maxRemaining) newStacks.pop();\n      }\n      if (newStacks.some(s => s.reducePos > pos)) this.recovering--;\n    } else if (newStacks.length > 1) {\n      // Prune stacks that are in the same state, or that have been\n      // running without splitting for a while, to avoid getting stuck\n      // with multiple successful stacks running endlessly on.\n      outer: for (let i = 0; i < newStacks.length - 1; i++) {\n        let stack = newStacks[i];\n        for (let j = i + 1; j < newStacks.length; j++) {\n          let other = newStacks[j];\n          if (stack.sameState(other) || stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n            if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {\n              newStacks.splice(j--, 1);\n            } else {\n              newStacks.splice(i--, 1);\n              continue outer;\n            }\n          }\n        }\n      }\n      if (newStacks.length > 12 /* Rec.MaxStackCount */) newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n    }\n\n    this.minStackPos = newStacks[0].pos;\n    for (let i = 1; i < newStacks.length; i++) if (newStacks[i].pos < this.minStackPos) this.minStackPos = newStacks[i].pos;\n    return null;\n  }\n  stopAt(pos) {\n    if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError(\"Can't move stoppedAt forward\");\n    this.stoppedAt = pos;\n  }\n  // Returns an updated version of the given stack, or null if the\n  // stack can't advance normally. When `split` and `stacks` are\n  // given, stacks split off by ambiguous operations will be pushed to\n  // `split`, or added to `stacks` if they move `pos` forward.\n  advanceStack(stack, stacks, split) {\n    let start = stack.pos,\n      {\n        parser\n      } = this;\n    let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n    if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;\n    if (this.fragments) {\n      let strictCx = stack.curContext && stack.curContext.tracker.strict,\n        cxHash = strictCx ? stack.curContext.hash : 0;\n      for (let cached = this.fragments.nodeAt(start); cached;) {\n        let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n        if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n          stack.useNode(cached, match);\n          if (verbose) console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n          return true;\n        }\n        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;\n        let inner = cached.children[0];\n        if (inner instanceof Tree && cached.positions[0] == 0) cached = inner;else break;\n      }\n    }\n    let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n    if (defaultReduce > 0) {\n      stack.reduce(defaultReduce);\n      if (verbose) console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n      return true;\n    }\n    if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n      while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) {}\n    }\n    let actions = this.tokens.getActions(stack);\n    for (let i = 0; i < actions.length;) {\n      let action = actions[i++],\n        term = actions[i++],\n        end = actions[i++];\n      let last = i == actions.length || !split;\n      let localStack = last ? stack : stack.split();\n      localStack.apply(action, term, end);\n      if (verbose) console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\" : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n      if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);\n    }\n    return false;\n  }\n  // Advance a given stack forward as far as it will go. Returns the\n  // (possibly updated) stack if it got stuck, or null if it moved\n  // forward and was given to `pushStackDedup`.\n  advanceFully(stack, newStacks) {\n    let pos = stack.pos;\n    for (;;) {\n      if (!this.advanceStack(stack, null, null)) return false;\n      if (stack.pos > pos) {\n        pushStackDedup(stack, newStacks);\n        return true;\n      }\n    }\n  }\n  runRecovery(stacks, tokens, newStacks) {\n    let finished = null,\n      restarted = false;\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i],\n        token = tokens[i << 1],\n        tokenEnd = tokens[(i << 1) + 1];\n      let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n      if (stack.deadEnd) {\n        if (restarted) continue;\n        restarted = true;\n        stack.restart();\n        if (verbose) console.log(base + this.stackID(stack) + \" (restarted)\");\n        let done = this.advanceFully(stack, newStacks);\n        if (done) continue;\n      }\n      let force = stack.split(),\n        forceBase = base;\n      for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n        if (verbose) console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n        let done = this.advanceFully(force, newStacks);\n        if (done) break;\n        if (verbose) forceBase = this.stackID(force) + \" -> \";\n      }\n      for (let insert of stack.recoverByInsert(token)) {\n        if (verbose) console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n        this.advanceFully(insert, newStacks);\n      }\n      if (this.stream.end > stack.pos) {\n        if (tokenEnd == stack.pos) {\n          tokenEnd++;\n          token = 0 /* Term.Err */;\n        }\n\n        stack.recoverByDelete(token, tokenEnd);\n        if (verbose) console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n        pushStackDedup(stack, newStacks);\n      } else if (!finished || finished.score < stack.score) {\n        finished = stack;\n      }\n    }\n    return finished;\n  }\n  // Convert the stack's buffer to a syntax tree.\n  stackToTree(stack) {\n    stack.close();\n    return Tree.build({\n      buffer: StackBufferCursor.create(stack),\n      nodeSet: this.parser.nodeSet,\n      topID: this.topTerm,\n      maxBufferLength: this.parser.bufferLength,\n      reused: this.reused,\n      start: this.ranges[0].from,\n      length: stack.pos - this.ranges[0].from,\n      minRepeatType: this.parser.minRepeatTerm\n    });\n  }\n  stackID(stack) {\n    let id = (stackIDs || (stackIDs = new WeakMap())).get(stack);\n    if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n    return id + stack;\n  }\n}\nfunction pushStackDedup(stack, newStacks) {\n  for (let i = 0; i < newStacks.length; i++) {\n    let other = newStacks[i];\n    if (other.pos == stack.pos && other.sameState(stack)) {\n      if (newStacks[i].score < stack.score) newStacks[i] = stack;\n      return;\n    }\n  }\n  newStacks.push(stack);\n}\nclass Dialect {\n  constructor(source, flags, disabled) {\n    this.source = source;\n    this.flags = flags;\n    this.disabled = disabled;\n  }\n  allows(term) {\n    return !this.disabled || this.disabled[term] == 0;\n  }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n  /// Define a context tracker.\n  constructor(spec) {\n    this.start = spec.start;\n    this.shift = spec.shift || id;\n    this.reduce = spec.reduce || id;\n    this.reuse = spec.reuse || id;\n    this.hash = spec.hash || (() => 0);\n    this.strict = spec.strict !== false;\n  }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n  /// @internal\n  constructor(spec) {\n    super();\n    /// @internal\n    this.wrappers = [];\n    if (spec.version != 14 /* File.Version */) throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n    let nodeNames = spec.nodeNames.split(\" \");\n    this.minRepeatTerm = nodeNames.length;\n    for (let i = 0; i < spec.repeatNodeCount; i++) nodeNames.push(\"\");\n    let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n    let nodeProps = [];\n    for (let i = 0; i < nodeNames.length; i++) nodeProps.push([]);\n    function setProp(nodeID, prop, value) {\n      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n    }\n    if (spec.nodeProps) for (let propSpec of spec.nodeProps) {\n      let prop = propSpec[0];\n      if (typeof prop == \"string\") prop = NodeProp[prop];\n      for (let i = 1; i < propSpec.length;) {\n        let next = propSpec[i++];\n        if (next >= 0) {\n          setProp(next, prop, propSpec[i++]);\n        } else {\n          let value = propSpec[i + -next];\n          for (let j = -next; j > 0; j--) setProp(propSpec[i++], prop, value);\n          i++;\n        }\n      }\n    }\n    this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n      name: i >= this.minRepeatTerm ? undefined : name,\n      id: i,\n      props: nodeProps[i],\n      top: topTerms.indexOf(i) > -1,\n      error: i == 0,\n      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n    })));\n    if (spec.propSources) this.nodeSet = this.nodeSet.extend(...spec.propSources);\n    this.strict = false;\n    this.bufferLength = DefaultBufferLength;\n    let tokenArray = decodeArray(spec.tokenData);\n    this.context = spec.context;\n    this.specializerSpecs = spec.specialized || [];\n    this.specialized = new Uint16Array(this.specializerSpecs.length);\n    for (let i = 0; i < this.specializerSpecs.length; i++) this.specialized[i] = this.specializerSpecs[i].term;\n    this.specializers = this.specializerSpecs.map(getSpecializer);\n    this.states = decodeArray(spec.states, Uint32Array);\n    this.data = decodeArray(spec.stateData);\n    this.goto = decodeArray(spec.goto);\n    this.maxTerm = spec.maxTerm;\n    this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n    this.topRules = spec.topRules;\n    this.dialects = spec.dialects || {};\n    this.dynamicPrecedences = spec.dynamicPrecedences || null;\n    this.tokenPrecTable = spec.tokenPrec;\n    this.termNames = spec.termNames || null;\n    this.maxNode = this.nodeSet.types.length - 1;\n    this.dialect = this.parseDialect();\n    this.top = this.topRules[Object.keys(this.topRules)[0]];\n  }\n  createParse(input, fragments, ranges) {\n    let parse = new Parse(this, input, fragments, ranges);\n    for (let w of this.wrappers) parse = w(parse, input, fragments, ranges);\n    return parse;\n  }\n  /// Get a goto table entry @internal\n  getGoto(state, term) {\n    let loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let table = this.goto;\n    if (term >= table[0]) return -1;\n    for (let pos = table[term + 1];;) {\n      let groupTag = table[pos++],\n        last = groupTag & 1;\n      let target = table[pos++];\n      if (last && loose) return target;\n      for (let end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;\n      if (last) return -1;\n    }\n  }\n  /// Check if this state has an action for a given terminal @internal\n  hasAction(state, terminal) {\n    let data = this.data;\n    for (let set = 0; set < 2; set++) {\n      for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n        if ((next = data[i]) == 65535 /* Seq.End */) {\n          if (data[i + 1] == 1 /* Seq.Next */) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2 /* Seq.Other */) return pair(data, i + 2);else break;\n        }\n        if (next == terminal || next == 0 /* Term.Err */) return pair(data, i + 1);\n      }\n    }\n    return 0;\n  }\n  /// @internal\n  stateSlot(state, slot) {\n    return this.states[state * 6 /* ParseState.Size */ + slot];\n  }\n  /// @internal\n  stateFlag(state, flag) {\n    return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n  }\n  /// @internal\n  validAction(state, action) {\n    if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */)) return true;\n    for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n      if (this.data[i] == 65535 /* Seq.End */) {\n        if (this.data[i + 1] == 1 /* Seq.Next */) i = pair(this.data, i + 2);else return false;\n      }\n      if (action == pair(this.data, i + 1)) return true;\n    }\n  }\n  /// Get the states that can follow this one through shift actions or\n  /// goto jumps. @internal\n  nextStates(state) {\n    let result = [];\n    for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n      if (this.data[i] == 65535 /* Seq.End */) {\n        if (this.data[i + 1] == 1 /* Seq.Next */) i = pair(this.data, i + 2);else break;\n      }\n      if ((this.data[i + 2] & 65536 /* Action.ReduceFlag */ >> 16) == 0) {\n        let value = this.data[i + 1];\n        if (!result.some((v, i) => i & 1 && v == value)) result.push(this.data[i], value);\n      }\n    }\n    return result;\n  }\n  /// Configure the parser. Returns a new parser instance that has the\n  /// given settings modified. Settings not provided in `config` are\n  /// kept from the original parser.\n  configure(config) {\n    // Hideous reflection-based kludge to make it easy to create a\n    // slightly modified copy of a parser.\n    let copy = Object.assign(Object.create(LRParser.prototype), this);\n    if (config.props) copy.nodeSet = this.nodeSet.extend(...config.props);\n    if (config.top) {\n      let info = this.topRules[config.top];\n      if (!info) throw new RangeError(`Invalid top rule name ${config.top}`);\n      copy.top = info;\n    }\n    if (config.tokenizers) copy.tokenizers = this.tokenizers.map(t => {\n      let found = config.tokenizers.find(r => r.from == t);\n      return found ? found.to : t;\n    });\n    if (config.specializers) {\n      copy.specializers = this.specializers.slice();\n      copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n        let found = config.specializers.find(r => r.from == s.external);\n        if (!found) return s;\n        let spec = Object.assign(Object.assign({}, s), {\n          external: found.to\n        });\n        copy.specializers[i] = getSpecializer(spec);\n        return spec;\n      });\n    }\n    if (config.contextTracker) copy.context = config.contextTracker;\n    if (config.dialect) copy.dialect = this.parseDialect(config.dialect);\n    if (config.strict != null) copy.strict = config.strict;\n    if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);\n    if (config.bufferLength != null) copy.bufferLength = config.bufferLength;\n    return copy;\n  }\n  /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n  /// are registered for this parser.\n  hasWrappers() {\n    return this.wrappers.length > 0;\n  }\n  /// Returns the name associated with a given term. This will only\n  /// work for all terms when the parser was generated with the\n  /// `--names` option. By default, only the names of tagged terms are\n  /// stored.\n  getName(term) {\n    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n  }\n  /// The eof term id is always allocated directly after the node\n  /// types. @internal\n  get eofTerm() {\n    return this.maxNode + 1;\n  }\n  /// The type of top node produced by the parser.\n  get topNode() {\n    return this.nodeSet.types[this.top[1]];\n  }\n  /// @internal\n  dynamicPrecedence(term) {\n    let prec = this.dynamicPrecedences;\n    return prec == null ? 0 : prec[term] || 0;\n  }\n  /// @internal\n  parseDialect(dialect) {\n    let values = Object.keys(this.dialects),\n      flags = values.map(() => false);\n    if (dialect) for (let part of dialect.split(\" \")) {\n      let id = values.indexOf(part);\n      if (id >= 0) flags[id] = true;\n    }\n    let disabled = null;\n    for (let i = 0; i < values.length; i++) if (!flags[i]) {\n      for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n    }\n    return new Dialect(dialect, flags, disabled);\n  }\n  /// Used by the output of the parser generator. Not available to\n  /// user code. @hide\n  static deserialize(spec) {\n    return new LRParser(spec);\n  }\n}\nfunction pair(data, off) {\n  return data[off] | data[off + 1] << 16;\n}\nfunction findFinished(stacks) {\n  let best = null;\n  for (let stack of stacks) {\n    let stopped = stack.p.stoppedAt;\n    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) && (!best || best.score < stack.score)) best = stack;\n  }\n  return best;\n}\nfunction getSpecializer(spec) {\n  if (spec.external) {\n    let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n    return (value, stack) => spec.external(value, stack) << 1 | mask;\n  }\n  return spec.get;\n}\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };","map":{"version":3,"names":["Parser","NodeProp","NodeSet","NodeType","DefaultBufferLength","Tree","IterMode","Stack","constructor","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","arguments","length","undefined","parent","toString","filter","_","i","concat","start","cx","parser","context","StackContext","pushState","push","reduce","action","_a","depth","type","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","ranges","from","size","nodeSet","types","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","isReduce","cur","top","index","shift","next","nextEnd","nextState","maxNode","shiftContext","apply","useNode","value","reused","updateContext","tracker","reuse","stream","reset","split","off","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","some","v","result","forceReduce","validAction","target","forceAll","deadEnd","data","restart","sameState","other","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","setLookAhead","close","strict","Recover","goto","StackBufferCursor","maybeNext","create","id","fork","decodeArray","input","Type","Uint16Array","array","out","charCodeAt","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","to","readNext","resolveOffset","offset","assoc","clipPos","Math","max","peek","idx","resolved","acceptToken","endOffset","RangeError","getChunk","nextChunk","advance","n","setDone","read","r","min","TokenGroup","readToken","tokenPrecTable","prototype","contextual","fallback","extend","LocalTokenGroup","precTable","elseToken","skipped","ExternalTokenizer","options","group","precOffset","groupMask","scan","accEnd","allows","overrides","low","high","mid","findOffset","prev","tableData","tableOffset","iPrev","verbose","process","env","test","LOG","stackIDs","Safety","cutAt","tree","side","cursor","IncludeAnonymous","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","prop","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","pair","Rec","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","newStacks","stopped","stoppedTokens","advanceStack","tok","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","j","splice","stopAt","stackID","strictCx","cxHash","cached","match","contextHash","inner","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","done","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","name","define","props","indexOf","error","skippedNodes","propSources","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","configure","config","copy","assign","info","t","found","find","external","contextTracker","wrap","hasWrappers","topNode","prec","values","part","Uint8Array"],"sources":["/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special caseâ€”they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n    Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (input.next < 0)\n                break;\n            input.advance();\n            input.reset(input.pos, input.token);\n            skipped++;\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n    Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n    // The maximum number of non-recovering stacks to explore (to avoid\n    // getting bogged down with exponentially multiplying stacks in\n    // ambiguous content)\n    Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n            while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,mBAAmB,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,eAAe;;AAExG;AACA;AACA;AACA;AACA,MAAMC,KAAK,CAAC;EACR;EACAC,WAAWA;EACX;EACAC,CAAC;EACD;EACA;EACAC,KAAK;EACL;EACAC,KAAK;EACL;EACA;EACA;EACA;EACA;EACAC,SAAS;EACT;EACAC,GAAG;EACH;EACA;EACA;EACAC,KAAK;EACL;EACA;EACA;EACA;EACAC,MAAM;EACN;EACA;EACA;EACA;EACA;EACA;EACAC,UAAU;EACV;EACAC,UAAU,EAQF;IAAA,IANRC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAAA;IACb;IACA;IACA;IACA;IACA;IACAG,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,OAAAE,SAAA;IACF,IAAI,CAACZ,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACI,MAAM,GAAGA,MAAM;EACxB;EACA;EACAC,QAAQA,CAAA,EAAG;IACP,OAAQ,IAAG,IAAI,CAACb,KAAK,CAACc,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,IAAI,CAAChB,KAAK,CAAE,KAAI,IAAI,CAACE,GAAI,GAAE,IAAI,CAACC,KAAK,GAAG,GAAG,GAAG,IAAI,CAACA,KAAK,GAAG,EAAG,EAAC;EAC7H;EACA;EACA;EACA,OAAOc,KAAKA,CAACnB,CAAC,EAAEE,KAAK,EAAW;IAAA,IAATE,GAAG,GAAAM,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAC1B,IAAIU,EAAE,GAAGpB,CAAC,CAACqB,MAAM,CAACC,OAAO;IACzB,OAAO,IAAIxB,KAAK,CAACE,CAAC,EAAE,EAAE,EAAEE,KAAK,EAAEE,GAAG,EAAEA,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEgB,EAAE,GAAG,IAAIG,YAAY,CAACH,EAAE,EAAEA,EAAE,CAACD,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC;EAC3G;EACA;EACA;EACA;EACA;EACA,IAAIG,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACd,UAAU,GAAG,IAAI,CAACA,UAAU,CAACc,OAAO,GAAG,IAAI;EAAE;EACzE;EACA;EACA;EACAE,SAASA,CAACtB,KAAK,EAAEiB,KAAK,EAAE;IACpB,IAAI,CAAClB,KAAK,CAACwB,IAAI,CAAC,IAAI,CAACvB,KAAK,EAAEiB,KAAK,EAAE,IAAI,CAACZ,UAAU,GAAG,IAAI,CAACD,MAAM,CAACK,MAAM,CAAC;IACxE,IAAI,CAACT,KAAK,GAAGA,KAAK;EACtB;EACA;EACA;EACAwB,MAAMA,CAACC,MAAM,EAAE;IACX,IAAIC,EAAE;IACN,IAAIC,KAAK,GAAGF,MAAM,IAAI,EAAE,CAAC;MAA+BG,IAAI,GAAGH,MAAM,GAAG,KAAK,CAAC;IAC9E,IAAI;MAAEN;IAAO,CAAC,GAAG,IAAI,CAACrB,CAAC;IACvB,IAAI+B,KAAK,GAAGV,MAAM,CAACW,iBAAiB,CAACF,IAAI,CAAC;IAC1C,IAAIC,KAAK,EACL,IAAI,CAAC1B,KAAK,IAAI0B,KAAK;IACvB,IAAIF,KAAK,IAAI,CAAC,EAAE;MACZ,IAAI,CAACL,SAAS,CAACH,MAAM,CAACY,OAAO,CAAC,IAAI,CAAC/B,KAAK,EAAE4B,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC3B,SAAS,CAAC;MACtE;MACA;MACA,IAAI2B,IAAI,GAAGT,MAAM,CAACa,aAAa,EAC3B,IAAI,CAACC,SAAS,CAACL,IAAI,EAAE,IAAI,CAAC3B,SAAS,EAAE,IAAI,CAACA,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC;MACjE,IAAI,CAACiC,aAAa,CAACN,IAAI,EAAE,IAAI,CAAC3B,SAAS,CAAC;MACxC;IACJ;IACA;IACA;IACA;IACA;IACA;IACA,IAAIkC,IAAI,GAAG,IAAI,CAACpC,KAAK,CAACU,MAAM,GAAI,CAACkB,KAAK,GAAG,CAAC,IAAI,CAAE,IAAIF,MAAM,GAAG,MAAM,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC;IAClG,IAAIR,KAAK,GAAGkB,IAAI,GAAG,IAAI,CAACpC,KAAK,CAACoC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAACrC,CAAC,CAACsC,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI;MAAEC,IAAI,GAAG,IAAI,CAACrC,SAAS,GAAGgB,KAAK;IAC9F;IACA;IACA;IACA,IAAIqB,IAAI,IAAI,IAAI,CAAC,iCAAiC,EAAE,CAACZ,EAAE,GAAG,IAAI,CAAC5B,CAAC,CAACqB,MAAM,CAACoB,OAAO,CAACC,KAAK,CAACZ,IAAI,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACe,WAAW,CAAC,EAAE;MAC/I,IAAIxB,KAAK,IAAI,IAAI,CAACnB,CAAC,CAAC4C,qBAAqB,EAAE;QACvC,IAAI,CAAC5C,CAAC,CAAC6C,iBAAiB,EAAE;QAC1B,IAAI,CAAC7C,CAAC,CAAC8C,oBAAoB,GAAGN,IAAI;MACtC,CAAC,MACI,IAAI,IAAI,CAACxC,CAAC,CAAC8C,oBAAoB,GAAGN,IAAI,EAAE;QACzC,IAAI,CAACxC,CAAC,CAAC6C,iBAAiB,GAAG,CAAC;QAC5B,IAAI,CAAC7C,CAAC,CAAC4C,qBAAqB,GAAGzB,KAAK;QACpC,IAAI,CAACnB,CAAC,CAAC8C,oBAAoB,GAAGN,IAAI;MACtC;IACJ;IACA,IAAIjC,UAAU,GAAG8B,IAAI,GAAG,IAAI,CAACpC,KAAK,CAACoC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;MAAEU,KAAK,GAAG,IAAI,CAACxC,UAAU,GAAG,IAAI,CAACD,MAAM,CAACK,MAAM,GAAGJ,UAAU;IAC3G;IACA,IAAIuB,IAAI,GAAGT,MAAM,CAACa,aAAa,IAAKP,MAAM,GAAG,MAAM,CAAC,uBAAwB,EAAE;MAC1E,IAAIvB,GAAG,GAAGiB,MAAM,CAAC2B,SAAS,CAAC,IAAI,CAAC9C,KAAK,EAAE,CAAC,CAAC,uBAAuB,CAAC,GAAG,IAAI,CAACE,GAAG,GAAG,IAAI,CAACD,SAAS;MAC7F,IAAI,CAACgC,SAAS,CAACL,IAAI,EAAEX,KAAK,EAAEf,GAAG,EAAE2C,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC;IACrD;IACA,IAAIpB,MAAM,GAAG,MAAM,CAAC,uBAAuB;MACvC,IAAI,CAACzB,KAAK,GAAG,IAAI,CAACD,KAAK,CAACoC,IAAI,CAAC;IACjC,CAAC,MACI;MACD,IAAIY,WAAW,GAAG,IAAI,CAAChD,KAAK,CAACoC,IAAI,GAAG,CAAC,CAAC;MACtC,IAAI,CAACnC,KAAK,GAAGmB,MAAM,CAACY,OAAO,CAACgB,WAAW,EAAEnB,IAAI,EAAE,IAAI,CAAC;IACxD;IACA,OAAO,IAAI,CAAC7B,KAAK,CAACU,MAAM,GAAG0B,IAAI,EAC3B,IAAI,CAACpC,KAAK,CAACiD,GAAG,CAAC,CAAC;IACpB,IAAI,CAACd,aAAa,CAACN,IAAI,EAAEX,KAAK,CAAC;EACnC;EACA;EACA;EACAgB,SAASA,CAACgB,IAAI,EAAEhC,KAAK,EAAEiC,GAAG,EAA8B;IAAA,IAA5BZ,IAAI,GAAA9B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAAA,IAAE2C,QAAQ,GAAA3C,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAClD,IAAIyC,IAAI,IAAI,CAAC,CAAC,mBACT,CAAC,IAAI,CAAClD,KAAK,CAACU,MAAM,IAAI,IAAI,CAACV,KAAK,CAAC,IAAI,CAACA,KAAK,CAACU,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAACL,MAAM,CAACK,MAAM,GAAG,IAAI,CAACJ,UAAU,CAAC,EAAE;MAClG;MACA,IAAI+C,GAAG,GAAG,IAAI;QAAEC,GAAG,GAAG,IAAI,CAACjD,MAAM,CAACK,MAAM;MACxC,IAAI4C,GAAG,IAAI,CAAC,IAAID,GAAG,CAACzC,MAAM,EAAE;QACxB0C,GAAG,GAAGD,GAAG,CAAC/C,UAAU,GAAG+C,GAAG,CAACzC,MAAM,CAACN,UAAU;QAC5C+C,GAAG,GAAGA,GAAG,CAACzC,MAAM;MACpB;MACA,IAAI0C,GAAG,GAAG,CAAC,IAAID,GAAG,CAAChD,MAAM,CAACiD,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,kBAAkBD,GAAG,CAAChD,MAAM,CAACiD,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;QAChF,IAAIpC,KAAK,IAAIiC,GAAG,EACZ;QACJ,IAAIE,GAAG,CAAChD,MAAM,CAACiD,GAAG,GAAG,CAAC,CAAC,IAAIpC,KAAK,EAAE;UAC9BmC,GAAG,CAAChD,MAAM,CAACiD,GAAG,GAAG,CAAC,CAAC,GAAGH,GAAG;UACzB;QACJ;MACJ;IACJ;IACA,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACjD,GAAG,IAAIgD,GAAG,EAAE;MAAE;MAChC,IAAI,CAAC9C,MAAM,CAACmB,IAAI,CAAC0B,IAAI,EAAEhC,KAAK,EAAEiC,GAAG,EAAEZ,IAAI,CAAC;IAC5C,CAAC,MACI;MAAE;MACH,IAAIgB,KAAK,GAAG,IAAI,CAAClD,MAAM,CAACK,MAAM;MAC9B,IAAI6C,KAAK,GAAG,CAAC,IAAI,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,gBACzC,OAAOA,KAAK,GAAG,CAAC,IAAI,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC,GAAGJ,GAAG,EAAE;QAC9C;QACA,IAAI,CAAC9C,MAAM,CAACkD,KAAK,CAAC,GAAG,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAClD,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC;QAC/CA,KAAK,IAAI,CAAC;QACV,IAAIhB,IAAI,GAAG,CAAC,EACRA,IAAI,IAAI,CAAC;MACjB;MACJ,IAAI,CAAClC,MAAM,CAACkD,KAAK,CAAC,GAAGL,IAAI;MACzB,IAAI,CAAC7C,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC,GAAGrC,KAAK;MAC9B,IAAI,CAACb,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC,GAAGJ,GAAG;MAC5B,IAAI,CAAC9C,MAAM,CAACkD,KAAK,GAAG,CAAC,CAAC,GAAGhB,IAAI;IACjC;EACJ;EACA;EACA;EACAiB,KAAKA,CAAC9B,MAAM,EAAE+B,IAAI,EAAEC,OAAO,EAAE;IACzB,IAAIxC,KAAK,GAAG,IAAI,CAACf,GAAG;IACpB,IAAIuB,MAAM,GAAG,MAAM,CAAC,uBAAuB;MACvC,IAAI,CAACH,SAAS,CAACG,MAAM,GAAG,KAAK,CAAC,wBAAwB,IAAI,CAACvB,GAAG,CAAC;IACnE,CAAC,MACI,IAAI,CAACuB,MAAM,GAAG,MAAM,CAAC,0BAA0B,CAAC,EAAE;MAAE;MACrD,IAAIiC,SAAS,GAAGjC,MAAM;QAAE;UAAEN;QAAO,CAAC,GAAG,IAAI,CAACrB,CAAC;MAC3C,IAAI2D,OAAO,GAAG,IAAI,CAACvD,GAAG,IAAIsD,IAAI,IAAIrC,MAAM,CAACwC,OAAO,EAAE;QAC9C,IAAI,CAACzD,GAAG,GAAGuD,OAAO;QAClB,IAAI,CAACtC,MAAM,CAAC2B,SAAS,CAACY,SAAS,EAAE,CAAC,CAAC,uBAAuB,CAAC,EACvD,IAAI,CAACzD,SAAS,GAAGwD,OAAO;MAChC;MACA,IAAI,CAACnC,SAAS,CAACoC,SAAS,EAAEzC,KAAK,CAAC;MAChC,IAAI,CAAC2C,YAAY,CAACJ,IAAI,EAAEvC,KAAK,CAAC;MAC9B,IAAIuC,IAAI,IAAIrC,MAAM,CAACwC,OAAO,EACtB,IAAI,CAACvD,MAAM,CAACmB,IAAI,CAACiC,IAAI,EAAEvC,KAAK,EAAEwC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC,MACI;MAAE;MACH,IAAI,CAACvD,GAAG,GAAGuD,OAAO;MAClB,IAAI,CAACG,YAAY,CAACJ,IAAI,EAAEvC,KAAK,CAAC;MAC9B,IAAIuC,IAAI,IAAI,IAAI,CAAC1D,CAAC,CAACqB,MAAM,CAACwC,OAAO,EAC7B,IAAI,CAACvD,MAAM,CAACmB,IAAI,CAACiC,IAAI,EAAEvC,KAAK,EAAEwC,OAAO,EAAE,CAAC,CAAC;IACjD;EACJ;EACA;EACA;EACAI,KAAKA,CAACpC,MAAM,EAAE+B,IAAI,EAAEC,OAAO,EAAE;IACzB,IAAIhC,MAAM,GAAG,KAAK,CAAC,yBACf,IAAI,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,KAEpB,IAAI,CAAC8B,KAAK,CAAC9B,MAAM,EAAE+B,IAAI,EAAEC,OAAO,CAAC;EACzC;EACA;EACA;EACAK,OAAOA,CAACC,KAAK,EAAEP,IAAI,EAAE;IACjB,IAAIF,KAAK,GAAG,IAAI,CAACxD,CAAC,CAACkE,MAAM,CAACvD,MAAM,GAAG,CAAC;IACpC,IAAI6C,KAAK,GAAG,CAAC,IAAI,IAAI,CAACxD,CAAC,CAACkE,MAAM,CAACV,KAAK,CAAC,IAAIS,KAAK,EAAE;MAC5C,IAAI,CAACjE,CAAC,CAACkE,MAAM,CAACzC,IAAI,CAACwC,KAAK,CAAC;MACzBT,KAAK,EAAE;IACX;IACA,IAAIrC,KAAK,GAAG,IAAI,CAACf,GAAG;IACpB,IAAI,CAACD,SAAS,GAAG,IAAI,CAACC,GAAG,GAAGe,KAAK,GAAG8C,KAAK,CAACtD,MAAM;IAChD,IAAI,CAACa,SAAS,CAACkC,IAAI,EAAEvC,KAAK,CAAC;IAC3B,IAAI,CAACb,MAAM,CAACmB,IAAI,CAAC+B,KAAK,EAAErC,KAAK,EAAE,IAAI,CAAChB,SAAS,EAAE,CAAC,CAAC,CAAC,6CAA6C,CAAC;IAChG,IAAI,IAAI,CAACK,UAAU,EACf,IAAI,CAAC2D,aAAa,CAAC,IAAI,CAAC3D,UAAU,CAAC4D,OAAO,CAACC,KAAK,CAAC,IAAI,CAAC7D,UAAU,CAACc,OAAO,EAAE2C,KAAK,EAAE,IAAI,EAAE,IAAI,CAACjE,CAAC,CAACsE,MAAM,CAACC,KAAK,CAAC,IAAI,CAACnE,GAAG,GAAG6D,KAAK,CAACtD,MAAM,CAAC,CAAC,CAAC;EAC7I;EACA;EACA;EACA;EACA;EACA6D,KAAKA,CAAA,EAAG;IACJ,IAAI3D,MAAM,GAAG,IAAI;IACjB,IAAI4D,GAAG,GAAG5D,MAAM,CAACP,MAAM,CAACK,MAAM;IAC9B;IACA;IACA;IACA;IACA,OAAO8D,GAAG,GAAG,CAAC,IAAI5D,MAAM,CAACP,MAAM,CAACmE,GAAG,GAAG,CAAC,CAAC,GAAG5D,MAAM,CAACV,SAAS,EACvDsE,GAAG,IAAI,CAAC;IACZ,IAAInE,MAAM,GAAGO,MAAM,CAACP,MAAM,CAACoE,KAAK,CAACD,GAAG,CAAC;MAAEpC,IAAI,GAAGxB,MAAM,CAACN,UAAU,GAAGkE,GAAG;IACrE;IACA,OAAO5D,MAAM,IAAIwB,IAAI,IAAIxB,MAAM,CAACN,UAAU,EACtCM,MAAM,GAAGA,MAAM,CAACA,MAAM;IAC1B,OAAO,IAAIf,KAAK,CAAC,IAAI,CAACE,CAAC,EAAE,IAAI,CAACC,KAAK,CAACyE,KAAK,CAAC,CAAC,EAAE,IAAI,CAACxE,KAAK,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,GAAG,EAAE,IAAI,CAACC,KAAK,EAAEC,MAAM,EAAE+B,IAAI,EAAE,IAAI,CAAC7B,UAAU,EAAE,IAAI,CAACC,SAAS,EAAEI,MAAM,CAAC;EACzJ;EACA;EACA;EACA8D,eAAeA,CAACjB,IAAI,EAAEC,OAAO,EAAE;IAC3B,IAAIiB,MAAM,GAAGlB,IAAI,IAAI,IAAI,CAAC1D,CAAC,CAACqB,MAAM,CAACwC,OAAO;IAC1C,IAAIe,MAAM,EACN,IAAI,CAACzC,SAAS,CAACuB,IAAI,EAAE,IAAI,CAACtD,GAAG,EAAEuD,OAAO,EAAE,CAAC,CAAC;IAC9C,IAAI,CAACxB,SAAS,CAAC,CAAC,CAAC,gBAAgB,IAAI,CAAC/B,GAAG,EAAEuD,OAAO,EAAEiB,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IACnE,IAAI,CAACxE,GAAG,GAAG,IAAI,CAACD,SAAS,GAAGwD,OAAO;IACnC,IAAI,CAACtD,KAAK,IAAI,GAAG,CAAC;EACtB;EACA;EACA;EACA;EACA;EACAwE,QAAQA,CAAC1B,IAAI,EAAE;IACX,KAAK,IAAI2B,GAAG,GAAG,IAAIC,cAAc,CAAC,IAAI,CAAC,IAAI;MACvC,IAAIpD,MAAM,GAAG,IAAI,CAAC3B,CAAC,CAACqB,MAAM,CAAC2D,SAAS,CAACF,GAAG,CAAC5E,KAAK,EAAE,CAAC,CAAC,8BAA8B,CAAC,IAAI,IAAI,CAACF,CAAC,CAACqB,MAAM,CAAC4D,SAAS,CAACH,GAAG,CAAC5E,KAAK,EAAEiD,IAAI,CAAC;MAC7H,IAAIxB,MAAM,IAAI,CAAC,EACX,OAAO,KAAK;MAChB,IAAI,CAACA,MAAM,GAAG,KAAK,CAAC,4BAA4B,CAAC,EAC7C,OAAO,IAAI;MACfmD,GAAG,CAACpD,MAAM,CAACC,MAAM,CAAC;IACtB;EACJ;EACA;EACA;EACA;EACAuD,eAAeA,CAACxB,IAAI,EAAE;IAClB,IAAI,IAAI,CAACzD,KAAK,CAACU,MAAM,IAAI,GAAG,CAAC,mCACzB,OAAO,EAAE;IACb,IAAIwE,UAAU,GAAG,IAAI,CAACnF,CAAC,CAACqB,MAAM,CAAC8D,UAAU,CAAC,IAAI,CAACjF,KAAK,CAAC;IACrD,IAAIiF,UAAU,CAACxE,MAAM,GAAG,CAAC,CAAC,yBAAyB,CAAC,IAAI,IAAI,CAACV,KAAK,CAACU,MAAM,IAAI,GAAG,CAAC,sCAAsC;MACnH,IAAIyE,IAAI,GAAG,EAAE;MACb,KAAK,IAAInE,CAAC,GAAG,CAAC,EAAEoE,CAAC,EAAEpE,CAAC,GAAGkE,UAAU,CAACxE,MAAM,EAAEM,CAAC,IAAI,CAAC,EAAE;QAC9C,IAAI,CAACoE,CAAC,GAAGF,UAAU,CAAClE,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAACf,KAAK,IAAI,IAAI,CAACF,CAAC,CAACqB,MAAM,CAAC4D,SAAS,CAACI,CAAC,EAAE3B,IAAI,CAAC,EACzE0B,IAAI,CAAC3D,IAAI,CAAC0D,UAAU,CAAClE,CAAC,CAAC,EAAEoE,CAAC,CAAC;MACnC;MACA,IAAI,IAAI,CAACpF,KAAK,CAACU,MAAM,GAAG,GAAG,CAAC,sCACxB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEmE,IAAI,CAACzE,MAAM,GAAG,CAAC,CAAC,yBAAyB,CAAC,IAAIM,CAAC,GAAGkE,UAAU,CAACxE,MAAM,EAAEM,CAAC,IAAI,CAAC,EAAE;QACzF,IAAIoE,CAAC,GAAGF,UAAU,CAAClE,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,CAACmE,IAAI,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEtE,CAAC,KAAMA,CAAC,GAAG,CAAC,IAAKsE,CAAC,IAAIF,CAAC,CAAC,EACvCD,IAAI,CAAC3D,IAAI,CAAC0D,UAAU,CAAClE,CAAC,CAAC,EAAEoE,CAAC,CAAC;MACnC;MACJF,UAAU,GAAGC,IAAI;IACrB;IACA,IAAII,MAAM,GAAG,EAAE;IACf,KAAK,IAAIvE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkE,UAAU,CAACxE,MAAM,IAAI6E,MAAM,CAAC7E,MAAM,GAAG,CAAC,CAAC,uBAAuBM,CAAC,IAAI,CAAC,EAAE;MACtF,IAAIoE,CAAC,GAAGF,UAAU,CAAClE,CAAC,GAAG,CAAC,CAAC;MACzB,IAAIoE,CAAC,IAAI,IAAI,CAACnF,KAAK,EACf;MACJ,IAAID,KAAK,GAAG,IAAI,CAACuE,KAAK,CAAC,CAAC;MACxBvE,KAAK,CAACuB,SAAS,CAAC6D,CAAC,EAAE,IAAI,CAACjF,GAAG,CAAC;MAC5BH,KAAK,CAACkC,SAAS,CAAC,CAAC,CAAC,gBAAgBlC,KAAK,CAACG,GAAG,EAAEH,KAAK,CAACG,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC;MAChEH,KAAK,CAAC6D,YAAY,CAACqB,UAAU,CAAClE,CAAC,CAAC,EAAE,IAAI,CAACb,GAAG,CAAC;MAC3CH,KAAK,CAACI,KAAK,IAAI,GAAG,CAAC;MACnBmF,MAAM,CAAC/D,IAAI,CAACxB,KAAK,CAAC;IACtB;IACA,OAAOuF,MAAM;EACjB;EACA;EACA;EACA;EACAC,WAAWA,CAAA,EAAG;IACV,IAAI/D,MAAM,GAAG,IAAI,CAAC1B,CAAC,CAACqB,MAAM,CAAC2D,SAAS,CAAC,IAAI,CAAC9E,KAAK,EAAE,CAAC,CAAC,6BAA6B,CAAC;IACjF,IAAI,CAACwB,MAAM,GAAG,KAAK,CAAC,4BAA4B,CAAC,EAC7C,OAAO,KAAK;IAChB,IAAI;MAAEL;IAAO,CAAC,GAAG,IAAI,CAACrB,CAAC;IACvB,IAAI,CAACqB,MAAM,CAACqE,WAAW,CAAC,IAAI,CAACxF,KAAK,EAAEwB,MAAM,CAAC,EAAE;MACzC,IAAIG,KAAK,GAAGH,MAAM,IAAI,EAAE,CAAC;QAA+ByB,IAAI,GAAGzB,MAAM,GAAG,KAAK,CAAC;MAC9E,IAAIiE,MAAM,GAAG,IAAI,CAAC1F,KAAK,CAACU,MAAM,GAAGkB,KAAK,GAAG,CAAC;MAC1C,IAAI8D,MAAM,GAAG,CAAC,IAAItE,MAAM,CAACY,OAAO,CAAC,IAAI,CAAChC,KAAK,CAAC0F,MAAM,CAAC,EAAExC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,EACjE,OAAO,KAAK;MAChB,IAAI,CAAChB,SAAS,CAAC,CAAC,CAAC,gBAAgB,IAAI,CAAChC,SAAS,EAAE,IAAI,CAACA,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC;MACzE,IAAI,CAACE,KAAK,IAAI,GAAG,CAAC;IACtB;;IACA,IAAI,CAACF,SAAS,GAAG,IAAI,CAACC,GAAG;IACzB,IAAI,CAACsB,MAAM,CAACA,MAAM,CAAC;IACnB,OAAO,IAAI;EACf;EACA;EACAkE,QAAQA,CAAA,EAAG;IACP,OAAO,CAAC,IAAI,CAAC5F,CAAC,CAACqB,MAAM,CAAC2B,SAAS,CAAC,IAAI,CAAC9C,KAAK,EAAE,CAAC,CAAC,yBAAyB,CAAC,EAAE;MACtE,IAAI,CAAC,IAAI,CAACuF,WAAW,CAAC,CAAC,EAAE;QACrB,IAAI,CAACtD,SAAS,CAAC,CAAC,CAAC,gBAAgB,IAAI,CAAC/B,GAAG,EAAE,IAAI,CAACA,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC;QAC7D;MACJ;IACJ;IACA,OAAO,IAAI;EACf;EACA;EACA;EACA;EACA,IAAIyF,OAAOA,CAAA,EAAG;IACV,IAAI,IAAI,CAAC5F,KAAK,CAACU,MAAM,IAAI,CAAC,EACtB,OAAO,KAAK;IAChB,IAAI;MAAEU;IAAO,CAAC,GAAG,IAAI,CAACrB,CAAC;IACvB,OAAOqB,MAAM,CAACyE,IAAI,CAACzE,MAAM,CAAC2D,SAAS,CAAC,IAAI,CAAC9E,KAAK,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,IAAI,KAAK,CAAC,iBAClF,CAACmB,MAAM,CAAC2D,SAAS,CAAC,IAAI,CAAC9E,KAAK,EAAE,CAAC,CAAC,8BAA8B,CAAC;EACvE;EACA;EACA;EACA;EACA6F,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC7F,KAAK,GAAG,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC;IAC1B,IAAI,CAACA,KAAK,CAACU,MAAM,GAAG,CAAC;EACzB;EACA;EACAqF,SAASA,CAACC,KAAK,EAAE;IACb,IAAI,IAAI,CAAC/F,KAAK,IAAI+F,KAAK,CAAC/F,KAAK,IAAI,IAAI,CAACD,KAAK,CAACU,MAAM,IAAIsF,KAAK,CAAChG,KAAK,CAACU,MAAM,EACpE,OAAO,KAAK;IAChB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChB,KAAK,CAACU,MAAM,EAAEM,CAAC,IAAI,CAAC,EACzC,IAAI,IAAI,CAAChB,KAAK,CAACgB,CAAC,CAAC,IAAIgF,KAAK,CAAChG,KAAK,CAACgB,CAAC,CAAC,EAC/B,OAAO,KAAK;IACpB,OAAO,IAAI;EACf;EACA;EACA,IAAII,MAAMA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACrB,CAAC,CAACqB,MAAM;EAAE;EACrC;EACA;EACA6E,cAAcA,CAACC,SAAS,EAAE;IAAE,OAAO,IAAI,CAACnG,CAAC,CAACqB,MAAM,CAAC+E,OAAO,CAACC,KAAK,CAACF,SAAS,CAAC;EAAE;EAC3ErC,YAAYA,CAACX,IAAI,EAAEhC,KAAK,EAAE;IACtB,IAAI,IAAI,CAACX,UAAU,EACf,IAAI,CAAC2D,aAAa,CAAC,IAAI,CAAC3D,UAAU,CAAC4D,OAAO,CAACX,KAAK,CAAC,IAAI,CAACjD,UAAU,CAACc,OAAO,EAAE6B,IAAI,EAAE,IAAI,EAAE,IAAI,CAACnD,CAAC,CAACsE,MAAM,CAACC,KAAK,CAACpD,KAAK,CAAC,CAAC,CAAC;EAC1H;EACAiB,aAAaA,CAACe,IAAI,EAAEhC,KAAK,EAAE;IACvB,IAAI,IAAI,CAACX,UAAU,EACf,IAAI,CAAC2D,aAAa,CAAC,IAAI,CAAC3D,UAAU,CAAC4D,OAAO,CAAC1C,MAAM,CAAC,IAAI,CAAClB,UAAU,CAACc,OAAO,EAAE6B,IAAI,EAAE,IAAI,EAAE,IAAI,CAACnD,CAAC,CAACsE,MAAM,CAACC,KAAK,CAACpD,KAAK,CAAC,CAAC,CAAC;EAC3H;EACA;EACAmF,WAAWA,CAAA,EAAG;IACV,IAAIC,IAAI,GAAG,IAAI,CAACjG,MAAM,CAACK,MAAM,GAAG,CAAC;IACjC,IAAI4F,IAAI,GAAG,CAAC,IAAI,IAAI,CAACjG,MAAM,CAACiG,IAAI,CAAC,IAAI,CAAC,CAAC,EACnC,IAAI,CAACjG,MAAM,CAACmB,IAAI,CAAC,IAAI,CAACjB,UAAU,CAACgG,IAAI,EAAE,IAAI,CAACrG,SAAS,EAAE,IAAI,CAACA,SAAS,EAAE,CAAC,CAAC,CAAC;EAClF;EACA;EACAsG,aAAaA,CAAA,EAAG;IACZ,IAAIF,IAAI,GAAG,IAAI,CAACjG,MAAM,CAACK,MAAM,GAAG,CAAC;IACjC,IAAI4F,IAAI,GAAG,CAAC,IAAI,IAAI,CAACjG,MAAM,CAACiG,IAAI,CAAC,IAAI,CAAC,CAAC,EACnC,IAAI,CAACjG,MAAM,CAACmB,IAAI,CAAC,IAAI,CAAChB,SAAS,EAAE,IAAI,CAACN,SAAS,EAAE,IAAI,CAACA,SAAS,EAAE,CAAC,CAAC,CAAC;EAC5E;EACAgE,aAAaA,CAAC7C,OAAO,EAAE;IACnB,IAAIA,OAAO,IAAI,IAAI,CAACd,UAAU,CAACc,OAAO,EAAE;MACpC,IAAIoF,KAAK,GAAG,IAAInF,YAAY,CAAC,IAAI,CAACf,UAAU,CAAC4D,OAAO,EAAE9C,OAAO,CAAC;MAC9D,IAAIoF,KAAK,CAACF,IAAI,IAAI,IAAI,CAAChG,UAAU,CAACgG,IAAI,EAClC,IAAI,CAACF,WAAW,CAAC,CAAC;MACtB,IAAI,CAAC9F,UAAU,GAAGkG,KAAK;IAC3B;EACJ;EACA;EACAC,YAAYA,CAAClG,SAAS,EAAE;IACpB,IAAIA,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;MAC5B,IAAI,CAACgG,aAAa,CAAC,CAAC;MACpB,IAAI,CAAChG,SAAS,GAAGA,SAAS;IAC9B;EACJ;EACA;EACAmG,KAAKA,CAAA,EAAG;IACJ,IAAI,IAAI,CAACpG,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC4D,OAAO,CAACyC,MAAM,EACjD,IAAI,CAACP,WAAW,CAAC,CAAC;IACtB,IAAI,IAAI,CAAC7F,SAAS,GAAG,CAAC,EAClB,IAAI,CAACgG,aAAa,CAAC,CAAC;EAC5B;AACJ;AACA,MAAMlF,YAAY,CAAC;EACfxB,WAAWA,CAACqE,OAAO,EAAE9C,OAAO,EAAE;IAC1B,IAAI,CAAC8C,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC9C,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACkF,IAAI,GAAGpC,OAAO,CAACyC,MAAM,GAAGzC,OAAO,CAACoC,IAAI,CAAClF,OAAO,CAAC,GAAG,CAAC;EAC1D;AACJ;AACA,IAAIwF,OAAO;AACX,CAAC,UAAUA,OAAO,EAAE;EAChBA,OAAO,CAACA,OAAO,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ;EAC3CA,OAAO,CAACA,OAAO,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ;EAC3CA,OAAO,CAACA,OAAO,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ;EAC3CA,OAAO,CAACA,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EAC3CA,OAAO,CAACA,OAAO,CAAC,qBAAqB,CAAC,GAAG,GAAG,CAAC,GAAG,qBAAqB;EACrEA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,GAAG,CAAC,GAAG,wBAAwB;EAC3EA,OAAO,CAACA,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,GAAG,iBAAiB;AAClE,CAAC,EAAEA,OAAO,KAAKA,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B;AACA;AACA,MAAM/B,cAAc,CAAC;EACjBhF,WAAWA,CAACoB,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACjB,KAAK,GAAGiB,KAAK,CAACjB,KAAK;IACxB,IAAI,CAACD,KAAK,GAAGkB,KAAK,CAAClB,KAAK;IACxB,IAAI,CAACoC,IAAI,GAAG,IAAI,CAACpC,KAAK,CAACU,MAAM;EACjC;EACAe,MAAMA,CAACC,MAAM,EAAE;IACX,IAAIwB,IAAI,GAAGxB,MAAM,GAAG,KAAK,CAAC;MAAwBE,KAAK,GAAGF,MAAM,IAAI,EAAE,CAAC;IACvE,IAAIE,KAAK,IAAI,CAAC,EAAE;MACZ,IAAI,IAAI,CAAC5B,KAAK,IAAI,IAAI,CAACkB,KAAK,CAAClB,KAAK,EAC9B,IAAI,CAACA,KAAK,GAAG,IAAI,CAACA,KAAK,CAACyE,KAAK,CAAC,CAAC;MACnC,IAAI,CAACzE,KAAK,CAACwB,IAAI,CAAC,IAAI,CAACvB,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;MACjC,IAAI,CAACmC,IAAI,IAAI,CAAC;IAClB,CAAC,MACI;MACD,IAAI,CAACA,IAAI,IAAI,CAACR,KAAK,GAAG,CAAC,IAAI,CAAC;IAChC;IACA,IAAIkF,IAAI,GAAG,IAAI,CAAC5F,KAAK,CAACnB,CAAC,CAACqB,MAAM,CAACY,OAAO,CAAC,IAAI,CAAChC,KAAK,CAAC,IAAI,CAACoC,IAAI,GAAG,CAAC,CAAC,EAAEc,IAAI,EAAE,IAAI,CAAC;IAC7E,IAAI,CAACjD,KAAK,GAAG6G,IAAI;EACrB;AACJ;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACpBjH,WAAWA,CAACE,KAAK,EAAEG,GAAG,EAAEoD,KAAK,EAAE;IAC3B,IAAI,CAACvD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,GAAG,GAAGA,GAAG;IACd,IAAI,CAACoD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAClD,MAAM,GAAGL,KAAK,CAACK,MAAM;IAC1B,IAAI,IAAI,CAACkD,KAAK,IAAI,CAAC,EACf,IAAI,CAACyD,SAAS,CAAC,CAAC;EACxB;EACA,OAAOC,MAAMA,CAACjH,KAAK,EAAgD;IAAA,IAA9CG,GAAG,GAAAM,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGT,KAAK,CAACM,UAAU,GAAGN,KAAK,CAACK,MAAM,CAACK,MAAM;IAC7D,OAAO,IAAIqG,iBAAiB,CAAC/G,KAAK,EAAEG,GAAG,EAAEA,GAAG,GAAGH,KAAK,CAACM,UAAU,CAAC;EACpE;EACA0G,SAASA,CAAA,EAAG;IACR,IAAIvD,IAAI,GAAG,IAAI,CAACzD,KAAK,CAACY,MAAM;IAC5B,IAAI6C,IAAI,IAAI,IAAI,EAAE;MACd,IAAI,CAACF,KAAK,GAAG,IAAI,CAACvD,KAAK,CAACM,UAAU,GAAGmD,IAAI,CAACnD,UAAU;MACpD,IAAI,CAACN,KAAK,GAAGyD,IAAI;MACjB,IAAI,CAACpD,MAAM,GAAGoD,IAAI,CAACpD,MAAM;IAC7B;EACJ;EACA,IAAI6G,EAAEA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC7G,MAAM,CAAC,IAAI,CAACkD,KAAK,GAAG,CAAC,CAAC;EAAE;EAC/C,IAAIrC,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACb,MAAM,CAAC,IAAI,CAACkD,KAAK,GAAG,CAAC,CAAC;EAAE;EAClD,IAAIJ,GAAGA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC9C,MAAM,CAAC,IAAI,CAACkD,KAAK,GAAG,CAAC,CAAC;EAAE;EAChD,IAAIhB,IAAIA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAClC,MAAM,CAAC,IAAI,CAACkD,KAAK,GAAG,CAAC,CAAC;EAAE;EACjDE,IAAIA,CAAA,EAAG;IACH,IAAI,CAACF,KAAK,IAAI,CAAC;IACf,IAAI,CAACpD,GAAG,IAAI,CAAC;IACb,IAAI,IAAI,CAACoD,KAAK,IAAI,CAAC,EACf,IAAI,CAACyD,SAAS,CAAC,CAAC;EACxB;EACAG,IAAIA,CAAA,EAAG;IACH,OAAO,IAAIJ,iBAAiB,CAAC,IAAI,CAAC/G,KAAK,EAAE,IAAI,CAACG,GAAG,EAAE,IAAI,CAACoD,KAAK,CAAC;EAClE;AACJ;;AAEA;AACA;AACA,SAAS6D,WAAWA,CAACC,KAAK,EAAsB;EAAA,IAApBC,IAAI,GAAA7G,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG8G,WAAW;EAC1C,IAAI,OAAOF,KAAK,IAAI,QAAQ,EACxB,OAAOA,KAAK;EAChB,IAAIG,KAAK,GAAG,IAAI;EAChB,KAAK,IAAIrH,GAAG,GAAG,CAAC,EAAEsH,GAAG,GAAG,CAAC,EAAEtH,GAAG,GAAGkH,KAAK,CAAC3G,MAAM,GAAG;IAC5C,IAAIsD,KAAK,GAAG,CAAC;IACb,SAAS;MACL,IAAIP,IAAI,GAAG4D,KAAK,CAACK,UAAU,CAACvH,GAAG,EAAE,CAAC;QAAEwH,IAAI,GAAG,KAAK;MAChD,IAAIlE,IAAI,IAAI,GAAG,CAAC,yBAAyB;QACrCO,KAAK,GAAG,KAAK,CAAC;QACd;MACJ;MACA,IAAIP,IAAI,IAAI,EAAE,CAAC,mBACXA,IAAI,EAAE;MACV,IAAIA,IAAI,IAAI,EAAE,CAAC,mBACXA,IAAI,EAAE;MACV,IAAImE,KAAK,GAAGnE,IAAI,GAAG,EAAE,CAAC;MACtB,IAAImE,KAAK,IAAI,EAAE,CAAC,mBAAmB;QAC/BA,KAAK,IAAI,EAAE,CAAC;QACZD,IAAI,GAAG,IAAI;MACf;MACA3D,KAAK,IAAI4D,KAAK;MACd,IAAID,IAAI,EACJ;MACJ3D,KAAK,IAAI,EAAE,CAAC;IAChB;;IACA,IAAIwD,KAAK,EACLA,KAAK,CAACC,GAAG,EAAE,CAAC,GAAGzD,KAAK,CAAC,KAErBwD,KAAK,GAAG,IAAIF,IAAI,CAACtD,KAAK,CAAC;EAC/B;EACA,OAAOwD,KAAK;AAChB;AAEA,MAAMK,WAAW,CAAC;EACd/H,WAAWA,CAAA,EAAG;IACV,IAAI,CAACoB,KAAK,GAAG,CAAC,CAAC;IACf,IAAI,CAAC8C,KAAK,GAAG,CAAC,CAAC;IACf,IAAI,CAACb,GAAG,GAAG,CAAC,CAAC;IACb,IAAI,CAAC2E,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACtH,SAAS,GAAG,CAAC;IAClB,IAAI,CAACuH,IAAI,GAAG,CAAC;IACb,IAAI,CAAC1G,OAAO,GAAG,CAAC;EACpB;AACJ;AACA,MAAM2G,SAAS,GAAG,IAAIH,WAAW,CAAD,CAAC;AACjC;AACA;AACA;AACA;AACA,MAAMI,WAAW,CAAC;EACd;EACAnI,WAAWA;EACX;EACAuH,KAAK;EACL;EACAhF,MAAM,EAAE;IACJ,IAAI,CAACgF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAChF,MAAM,GAAGA,MAAM;IACpB;IACA,IAAI,CAAC6F,KAAK,GAAG,EAAE;IACf;IACA,IAAI,CAACC,QAAQ,GAAG,CAAC;IACjB;IACA,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB;IACA;IACA,IAAI,CAAC5E,IAAI,GAAG,CAAC,CAAC;IACd;IACA,IAAI,CAAC6E,KAAK,GAAGN,SAAS;IACtB,IAAI,CAACO,UAAU,GAAG,CAAC;IACnB,IAAI,CAACpI,GAAG,GAAG,IAAI,CAACqI,QAAQ,GAAGnG,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI;IACzC,IAAI,CAACmG,KAAK,GAAGpG,MAAM,CAAC,CAAC,CAAC;IACtB,IAAI,CAACc,GAAG,GAAGd,MAAM,CAACA,MAAM,CAAC3B,MAAM,GAAG,CAAC,CAAC,CAACgI,EAAE;IACvC,IAAI,CAACC,QAAQ,CAAC,CAAC;EACnB;EACA;EACAC,aAAaA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACzB,IAAIL,KAAK,GAAG,IAAI,CAACA,KAAK;MAAElF,KAAK,GAAG,IAAI,CAACgF,UAAU;IAC/C,IAAIpI,GAAG,GAAG,IAAI,CAACA,GAAG,GAAG0I,MAAM;IAC3B,OAAO1I,GAAG,GAAGsI,KAAK,CAACnG,IAAI,EAAE;MACrB,IAAI,CAACiB,KAAK,EACN,OAAO,IAAI;MACf,IAAIE,IAAI,GAAG,IAAI,CAACpB,MAAM,CAAC,EAAEkB,KAAK,CAAC;MAC/BpD,GAAG,IAAIsI,KAAK,CAACnG,IAAI,GAAGmB,IAAI,CAACiF,EAAE;MAC3BD,KAAK,GAAGhF,IAAI;IAChB;IACA,OAAOqF,KAAK,GAAG,CAAC,GAAG3I,GAAG,GAAGsI,KAAK,CAACC,EAAE,GAAGvI,GAAG,IAAIsI,KAAK,CAACC,EAAE,EAAE;MACjD,IAAInF,KAAK,IAAI,IAAI,CAAClB,MAAM,CAAC3B,MAAM,GAAG,CAAC,EAC/B,OAAO,IAAI;MACf,IAAI+C,IAAI,GAAG,IAAI,CAACpB,MAAM,CAAC,EAAEkB,KAAK,CAAC;MAC/BpD,GAAG,IAAIsD,IAAI,CAACnB,IAAI,GAAGmG,KAAK,CAACC,EAAE;MAC3BD,KAAK,GAAGhF,IAAI;IAChB;IACA,OAAOtD,GAAG;EACd;EACA;EACA4I,OAAOA,CAAC5I,GAAG,EAAE;IACT,IAAIA,GAAG,IAAI,IAAI,CAACsI,KAAK,CAACnG,IAAI,IAAInC,GAAG,GAAG,IAAI,CAACsI,KAAK,CAACC,EAAE,EAC7C,OAAOvI,GAAG;IACd,KAAK,IAAIsI,KAAK,IAAI,IAAI,CAACpG,MAAM,EACzB,IAAIoG,KAAK,CAACC,EAAE,GAAGvI,GAAG,EACd,OAAO6I,IAAI,CAACC,GAAG,CAAC9I,GAAG,EAAEsI,KAAK,CAACnG,IAAI,CAAC;IACxC,OAAO,IAAI,CAACa,GAAG;EACnB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA+F,IAAIA,CAACL,MAAM,EAAE;IACT,IAAIM,GAAG,GAAG,IAAI,CAAChB,QAAQ,GAAGU,MAAM;MAAE1I,GAAG;MAAEoF,MAAM;IAC7C,IAAI4D,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAG,IAAI,CAACjB,KAAK,CAACxH,MAAM,EAAE;MACrCP,GAAG,GAAG,IAAI,CAACA,GAAG,GAAG0I,MAAM;MACvBtD,MAAM,GAAG,IAAI,CAAC2C,KAAK,CAACR,UAAU,CAACyB,GAAG,CAAC;IACvC,CAAC,MACI;MACD,IAAIC,QAAQ,GAAG,IAAI,CAACR,aAAa,CAACC,MAAM,EAAE,CAAC,CAAC;MAC5C,IAAIO,QAAQ,IAAI,IAAI,EAChB,OAAO,CAAC,CAAC;MACbjJ,GAAG,GAAGiJ,QAAQ;MACd,IAAIjJ,GAAG,IAAI,IAAI,CAACkI,SAAS,IAAIlI,GAAG,GAAG,IAAI,CAACkI,SAAS,GAAG,IAAI,CAACD,MAAM,CAAC1H,MAAM,EAAE;QACpE6E,MAAM,GAAG,IAAI,CAAC6C,MAAM,CAACV,UAAU,CAACvH,GAAG,GAAG,IAAI,CAACkI,SAAS,CAAC;MACzD,CAAC,MACI;QACD,IAAIrH,CAAC,GAAG,IAAI,CAACuH,UAAU;UAAEE,KAAK,GAAG,IAAI,CAACA,KAAK;QAC3C,OAAOA,KAAK,CAACC,EAAE,IAAIvI,GAAG,EAClBsI,KAAK,GAAG,IAAI,CAACpG,MAAM,CAAC,EAAErB,CAAC,CAAC;QAC5B,IAAI,CAACoH,MAAM,GAAG,IAAI,CAACf,KAAK,CAACa,KAAK,CAAC,IAAI,CAACG,SAAS,GAAGlI,GAAG,CAAC;QACpD,IAAIA,GAAG,GAAG,IAAI,CAACiI,MAAM,CAAC1H,MAAM,GAAG+H,KAAK,CAACC,EAAE,EACnC,IAAI,CAACN,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC3D,KAAK,CAAC,CAAC,EAAEgE,KAAK,CAACC,EAAE,GAAGvI,GAAG,CAAC;QACtDoF,MAAM,GAAG,IAAI,CAAC6C,MAAM,CAACV,UAAU,CAAC,CAAC,CAAC;MACtC;IACJ;IACA,IAAIvH,GAAG,IAAI,IAAI,CAACmI,KAAK,CAAC9H,SAAS,EAC3B,IAAI,CAAC8H,KAAK,CAAC9H,SAAS,GAAGL,GAAG,GAAG,CAAC;IAClC,OAAOoF,MAAM;EACjB;EACA;EACA;EACA;EACA8D,WAAWA,CAACf,KAAK,EAAiB;IAAA,IAAfgB,SAAS,GAAA7I,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAC5B,IAAI0C,GAAG,GAAGmG,SAAS,GAAG,IAAI,CAACV,aAAa,CAACU,SAAS,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAACnJ,GAAG;IAClE,IAAIgD,GAAG,IAAI,IAAI,IAAIA,GAAG,GAAG,IAAI,CAACmF,KAAK,CAACpH,KAAK,EACrC,MAAM,IAAIqI,UAAU,CAAC,yBAAyB,CAAC;IACnD,IAAI,CAACjB,KAAK,CAACtE,KAAK,GAAGsE,KAAK;IACxB,IAAI,CAACA,KAAK,CAACnF,GAAG,GAAGA,GAAG;EACxB;EACAqG,QAAQA,CAAA,EAAG;IACP,IAAI,IAAI,CAACrJ,GAAG,IAAI,IAAI,CAACkI,SAAS,IAAI,IAAI,CAAClI,GAAG,GAAG,IAAI,CAACkI,SAAS,GAAG,IAAI,CAACD,MAAM,CAAC1H,MAAM,EAAE;MAC9E,IAAI;QAAEwH,KAAK;QAAEM;MAAS,CAAC,GAAG,IAAI;MAC9B,IAAI,CAACN,KAAK,GAAG,IAAI,CAACE,MAAM;MACxB,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACH,SAAS;MAC9B,IAAI,CAACD,MAAM,GAAGF,KAAK;MACnB,IAAI,CAACG,SAAS,GAAGG,QAAQ;MACzB,IAAI,CAACL,QAAQ,GAAG,IAAI,CAAChI,GAAG,GAAG,IAAI,CAACqI,QAAQ;IAC5C,CAAC,MACI;MACD,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACF,KAAK;MACxB,IAAI,CAACG,SAAS,GAAG,IAAI,CAACG,QAAQ;MAC9B,IAAIiB,SAAS,GAAG,IAAI,CAACpC,KAAK,CAACa,KAAK,CAAC,IAAI,CAAC/H,GAAG,CAAC;MAC1C,IAAIgD,GAAG,GAAG,IAAI,CAAChD,GAAG,GAAGsJ,SAAS,CAAC/I,MAAM;MACrC,IAAI,CAACwH,KAAK,GAAG/E,GAAG,GAAG,IAAI,CAACsF,KAAK,CAACC,EAAE,GAAGe,SAAS,CAAChF,KAAK,CAAC,CAAC,EAAE,IAAI,CAACgE,KAAK,CAACC,EAAE,GAAG,IAAI,CAACvI,GAAG,CAAC,GAAGsJ,SAAS;MAC3F,IAAI,CAACjB,QAAQ,GAAG,IAAI,CAACrI,GAAG;MACxB,IAAI,CAACgI,QAAQ,GAAG,CAAC;IACrB;EACJ;EACAQ,QAAQA,CAAA,EAAG;IACP,IAAI,IAAI,CAACR,QAAQ,IAAI,IAAI,CAACD,KAAK,CAACxH,MAAM,EAAE;MACpC,IAAI,CAAC8I,QAAQ,CAAC,CAAC;MACf,IAAI,IAAI,CAACrB,QAAQ,IAAI,IAAI,CAACD,KAAK,CAACxH,MAAM,EAClC,OAAO,IAAI,CAAC+C,IAAI,GAAG,CAAC,CAAC;IAC7B;IACA,OAAO,IAAI,CAACA,IAAI,GAAG,IAAI,CAACyE,KAAK,CAACR,UAAU,CAAC,IAAI,CAACS,QAAQ,CAAC;EAC3D;EACA;EACA;EACAuB,OAAOA,CAAA,EAAQ;IAAA,IAAPC,CAAC,GAAAlJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IACT,IAAI,CAAC0H,QAAQ,IAAIwB,CAAC;IAClB,OAAO,IAAI,CAACxJ,GAAG,GAAGwJ,CAAC,IAAI,IAAI,CAAClB,KAAK,CAACC,EAAE,EAAE;MAClC,IAAI,IAAI,CAACH,UAAU,IAAI,IAAI,CAAClG,MAAM,CAAC3B,MAAM,GAAG,CAAC,EACzC,OAAO,IAAI,CAACkJ,OAAO,CAAC,CAAC;MACzBD,CAAC,IAAI,IAAI,CAAClB,KAAK,CAACC,EAAE,GAAG,IAAI,CAACvI,GAAG;MAC7B,IAAI,CAACsI,KAAK,GAAG,IAAI,CAACpG,MAAM,CAAC,EAAE,IAAI,CAACkG,UAAU,CAAC;MAC3C,IAAI,CAACpI,GAAG,GAAG,IAAI,CAACsI,KAAK,CAACnG,IAAI;IAC9B;IACA,IAAI,CAACnC,GAAG,IAAIwJ,CAAC;IACb,IAAI,IAAI,CAACxJ,GAAG,IAAI,IAAI,CAACmI,KAAK,CAAC9H,SAAS,EAChC,IAAI,CAAC8H,KAAK,CAAC9H,SAAS,GAAG,IAAI,CAACL,GAAG,GAAG,CAAC;IACvC,OAAO,IAAI,CAACwI,QAAQ,CAAC,CAAC;EAC1B;EACAiB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACzJ,GAAG,GAAG,IAAI,CAACqI,QAAQ,GAAG,IAAI,CAACrF,GAAG;IACnC,IAAI,CAACsF,KAAK,GAAG,IAAI,CAACpG,MAAM,CAAC,IAAI,CAACkG,UAAU,GAAG,IAAI,CAAClG,MAAM,CAAC3B,MAAM,GAAG,CAAC,CAAC;IAClE,IAAI,CAACwH,KAAK,GAAG,EAAE;IACf,OAAO,IAAI,CAACzE,IAAI,GAAG,CAAC,CAAC;EACzB;EACA;EACAa,KAAKA,CAACnE,GAAG,EAAEmI,KAAK,EAAE;IACd,IAAIA,KAAK,EAAE;MACP,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClBA,KAAK,CAACpH,KAAK,GAAGf,GAAG;MACjBmI,KAAK,CAAC9H,SAAS,GAAGL,GAAG,GAAG,CAAC;MACzBmI,KAAK,CAACtE,KAAK,GAAGsE,KAAK,CAACR,QAAQ,GAAG,CAAC,CAAC;IACrC,CAAC,MACI;MACD,IAAI,CAACQ,KAAK,GAAGN,SAAS;IAC1B;IACA,IAAI,IAAI,CAAC7H,GAAG,IAAIA,GAAG,EAAE;MACjB,IAAI,CAACA,GAAG,GAAGA,GAAG;MACd,IAAIA,GAAG,IAAI,IAAI,CAACgD,GAAG,EAAE;QACjB,IAAI,CAACyG,OAAO,CAAC,CAAC;QACd,OAAO,IAAI;MACf;MACA,OAAOzJ,GAAG,GAAG,IAAI,CAACsI,KAAK,CAACnG,IAAI,EACxB,IAAI,CAACmG,KAAK,GAAG,IAAI,CAACpG,MAAM,CAAC,EAAE,IAAI,CAACkG,UAAU,CAAC;MAC/C,OAAOpI,GAAG,IAAI,IAAI,CAACsI,KAAK,CAACC,EAAE,EACvB,IAAI,CAACD,KAAK,GAAG,IAAI,CAACpG,MAAM,CAAC,EAAE,IAAI,CAACkG,UAAU,CAAC;MAC/C,IAAIpI,GAAG,IAAI,IAAI,CAACqI,QAAQ,IAAIrI,GAAG,GAAG,IAAI,CAACqI,QAAQ,GAAG,IAAI,CAACN,KAAK,CAACxH,MAAM,EAAE;QACjE,IAAI,CAACyH,QAAQ,GAAGhI,GAAG,GAAG,IAAI,CAACqI,QAAQ;MACvC,CAAC,MACI;QACD,IAAI,CAACN,KAAK,GAAG,EAAE;QACf,IAAI,CAACC,QAAQ,GAAG,CAAC;MACrB;MACA,IAAI,CAACQ,QAAQ,CAAC,CAAC;IACnB;IACA,OAAO,IAAI;EACf;EACA;EACAkB,IAAIA,CAACvH,IAAI,EAAEoG,EAAE,EAAE;IACX,IAAIpG,IAAI,IAAI,IAAI,CAACkG,QAAQ,IAAIE,EAAE,IAAI,IAAI,CAACF,QAAQ,GAAG,IAAI,CAACN,KAAK,CAACxH,MAAM,EAChE,OAAO,IAAI,CAACwH,KAAK,CAACzD,KAAK,CAACnC,IAAI,GAAG,IAAI,CAACkG,QAAQ,EAAEE,EAAE,GAAG,IAAI,CAACF,QAAQ,CAAC;IACrE,IAAIlG,IAAI,IAAI,IAAI,CAAC+F,SAAS,IAAIK,EAAE,IAAI,IAAI,CAACL,SAAS,GAAG,IAAI,CAACD,MAAM,CAAC1H,MAAM,EACnE,OAAO,IAAI,CAAC0H,MAAM,CAAC3D,KAAK,CAACnC,IAAI,GAAG,IAAI,CAAC+F,SAAS,EAAEK,EAAE,GAAG,IAAI,CAACL,SAAS,CAAC;IACxE,IAAI/F,IAAI,IAAI,IAAI,CAACmG,KAAK,CAACnG,IAAI,IAAIoG,EAAE,IAAI,IAAI,CAACD,KAAK,CAACC,EAAE,EAC9C,OAAO,IAAI,CAACrB,KAAK,CAACwC,IAAI,CAACvH,IAAI,EAAEoG,EAAE,CAAC;IACpC,IAAInD,MAAM,GAAG,EAAE;IACf,KAAK,IAAIuE,CAAC,IAAI,IAAI,CAACzH,MAAM,EAAE;MACvB,IAAIyH,CAAC,CAACxH,IAAI,IAAIoG,EAAE,EACZ;MACJ,IAAIoB,CAAC,CAACpB,EAAE,GAAGpG,IAAI,EACXiD,MAAM,IAAI,IAAI,CAAC8B,KAAK,CAACwC,IAAI,CAACb,IAAI,CAACC,GAAG,CAACa,CAAC,CAACxH,IAAI,EAAEA,IAAI,CAAC,EAAE0G,IAAI,CAACe,GAAG,CAACD,CAAC,CAACpB,EAAE,EAAEA,EAAE,CAAC,CAAC;IAC7E;IACA,OAAOnD,MAAM;EACjB;AACJ;AACA;AACA,MAAMyE,UAAU,CAAC;EACblK,WAAWA,CAAC+F,IAAI,EAAEqB,EAAE,EAAE;IAClB,IAAI,CAACrB,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACqB,EAAE,GAAGA,EAAE;EAChB;EACAoB,KAAKA,CAACjB,KAAK,EAAErH,KAAK,EAAE;IAChB,IAAI;MAAEoB;IAAO,CAAC,GAAGpB,KAAK,CAACD,CAAC;IACxBkK,SAAS,CAAC,IAAI,CAACpE,IAAI,EAAEwB,KAAK,EAAErH,KAAK,EAAE,IAAI,CAACkH,EAAE,EAAE9F,MAAM,CAACyE,IAAI,EAAEzE,MAAM,CAAC8I,cAAc,CAAC;EACnF;AACJ;AACAF,UAAU,CAACG,SAAS,CAACC,UAAU,GAAGJ,UAAU,CAACG,SAAS,CAACE,QAAQ,GAAGL,UAAU,CAACG,SAAS,CAACG,MAAM,GAAG,KAAK;AACrG;AACA,MAAMC,eAAe,CAAC;EAClBzK,WAAWA,CAAC+F,IAAI,EAAE2E,SAAS,EAAEC,SAAS,EAAE;IACpC,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC5E,IAAI,GAAG,OAAOA,IAAI,IAAI,QAAQ,GAAGuB,WAAW,CAACvB,IAAI,CAAC,GAAGA,IAAI;EAClE;EACAyC,KAAKA,CAACjB,KAAK,EAAErH,KAAK,EAAE;IAChB,IAAIkB,KAAK,GAAGmG,KAAK,CAAClH,GAAG;MAAEuK,OAAO,GAAG,CAAC;IAClC,SAAS;MACLT,SAAS,CAAC,IAAI,CAACpE,IAAI,EAAEwB,KAAK,EAAErH,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC6F,IAAI,EAAE,IAAI,CAAC2E,SAAS,CAAC;MAChE,IAAInD,KAAK,CAACiB,KAAK,CAACtE,KAAK,GAAG,CAAC,CAAC,EACtB;MACJ,IAAI,IAAI,CAACyG,SAAS,IAAI,IAAI,EACtB;MACJ,IAAIpD,KAAK,CAAC5D,IAAI,GAAG,CAAC,EACd;MACJ4D,KAAK,CAACqC,OAAO,CAAC,CAAC;MACfrC,KAAK,CAAC/C,KAAK,CAAC+C,KAAK,CAAClH,GAAG,EAAEkH,KAAK,CAACiB,KAAK,CAAC;MACnCoC,OAAO,EAAE;IACb;IACA,IAAIA,OAAO,EAAE;MACTrD,KAAK,CAAC/C,KAAK,CAACpD,KAAK,EAAEmG,KAAK,CAACiB,KAAK,CAAC;MAC/BjB,KAAK,CAACgC,WAAW,CAAC,IAAI,CAACoB,SAAS,EAAEC,OAAO,CAAC;IAC9C;EACJ;AACJ;AACAH,eAAe,CAACJ,SAAS,CAACC,UAAU,GAAGJ,UAAU,CAACG,SAAS,CAACE,QAAQ,GAAGL,UAAU,CAACG,SAAS,CAACG,MAAM,GAAG,KAAK;AAC1G;AACA;AACA,MAAMK,iBAAiB,CAAC;EACpB;EACA;EACA;EACA;EACA;EACA7K,WAAWA;EACX;EACAwI,KAAK,EAAgB;IAAA,IAAdsC,OAAO,GAAAnK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACf,IAAI,CAAC6H,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAC8B,UAAU,GAAG,CAAC,CAACQ,OAAO,CAACR,UAAU;IACtC,IAAI,CAACC,QAAQ,GAAG,CAAC,CAACO,OAAO,CAACP,QAAQ;IAClC,IAAI,CAACC,MAAM,GAAG,CAAC,CAACM,OAAO,CAACN,MAAM;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,SAASA,CAACpE,IAAI,EAAEwB,KAAK,EAAErH,KAAK,EAAE6K,KAAK,EAAEL,SAAS,EAAEM,UAAU,EAAE;EACjE,IAAI7K,KAAK,GAAG,CAAC;IAAE8K,SAAS,GAAG,CAAC,IAAIF,KAAK;IAAE;MAAE1E;IAAQ,CAAC,GAAGnG,KAAK,CAACD,CAAC,CAACqB,MAAM;EACnE4J,IAAI,EAAE,SAAS;IACX,IAAI,CAACD,SAAS,GAAGlF,IAAI,CAAC5F,KAAK,CAAC,KAAK,CAAC,EAC9B;IACJ,IAAIgL,MAAM,GAAGpF,IAAI,CAAC5F,KAAK,GAAG,CAAC,CAAC;IAC5B;IACA;IACA;IACA,KAAK,IAAIe,CAAC,GAAGf,KAAK,GAAG,CAAC,EAAEe,CAAC,GAAGiK,MAAM,EAAEjK,CAAC,IAAI,CAAC,EACtC,IAAI,CAAC6E,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC,GAAG+J,SAAS,IAAI,CAAC,EAAE;MAC/B,IAAI7H,IAAI,GAAG2C,IAAI,CAAC7E,CAAC,CAAC;MAClB,IAAImF,OAAO,CAAC+E,MAAM,CAAChI,IAAI,CAAC,KACnBmE,KAAK,CAACiB,KAAK,CAACtE,KAAK,IAAI,CAAC,CAAC,IAAIqD,KAAK,CAACiB,KAAK,CAACtE,KAAK,IAAId,IAAI,IACjDiI,SAAS,CAACjI,IAAI,EAAEmE,KAAK,CAACiB,KAAK,CAACtE,KAAK,EAAEwG,SAAS,EAAEM,UAAU,CAAC,CAAC,EAAE;QAChEzD,KAAK,CAACgC,WAAW,CAACnG,IAAI,CAAC;QACvB;MACJ;IACJ;IACJ,IAAIO,IAAI,GAAG4D,KAAK,CAAC5D,IAAI;MAAE2H,GAAG,GAAG,CAAC;MAAEC,IAAI,GAAGxF,IAAI,CAAC5F,KAAK,GAAG,CAAC,CAAC;IACtD;IACA,IAAIoH,KAAK,CAAC5D,IAAI,GAAG,CAAC,IAAI4H,IAAI,GAAGD,GAAG,IAAIvF,IAAI,CAACoF,MAAM,GAAGI,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,iBAAiBxF,IAAI,CAACoF,MAAM,GAAGI,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,eAAe;MAC1IpL,KAAK,GAAG4F,IAAI,CAACoF,MAAM,GAAGI,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;MACnC,SAASL,IAAI;IACjB;IACA;IACA,OAAOI,GAAG,GAAGC,IAAI,GAAG;MAChB,IAAIC,GAAG,GAAIF,GAAG,GAAGC,IAAI,IAAK,CAAC;MAC3B,IAAI9H,KAAK,GAAG0H,MAAM,GAAGK,GAAG,IAAIA,GAAG,IAAI,CAAC,CAAC;MACrC,IAAIhJ,IAAI,GAAGuD,IAAI,CAACtC,KAAK,CAAC;QAAEmF,EAAE,GAAG7C,IAAI,CAACtC,KAAK,GAAG,CAAC,CAAC,IAAI,OAAO;MACvD,IAAIE,IAAI,GAAGnB,IAAI,EACX+I,IAAI,GAAGC,GAAG,CAAC,KACV,IAAI7H,IAAI,IAAIiF,EAAE,EACf0C,GAAG,GAAGE,GAAG,GAAG,CAAC,CAAC,KACb;QACDrL,KAAK,GAAG4F,IAAI,CAACtC,KAAK,GAAG,CAAC,CAAC;QACvB8D,KAAK,CAACqC,OAAO,CAAC,CAAC;QACf,SAASsB,IAAI;MACjB;IACJ;IACA;EACJ;AACJ;AACA,SAASO,UAAUA,CAAC1F,IAAI,EAAE3E,KAAK,EAAEgC,IAAI,EAAE;EACnC,KAAK,IAAIlC,CAAC,GAAGE,KAAK,EAAEuC,IAAI,EAAE,CAACA,IAAI,GAAGoC,IAAI,CAAC7E,CAAC,CAAC,KAAK,KAAK,CAAC,eAAeA,CAAC,EAAE,EAClE,IAAIyC,IAAI,IAAIP,IAAI,EACZ,OAAOlC,CAAC,GAAGE,KAAK;EACxB,OAAO,CAAC,CAAC;AACb;AACA,SAASiK,SAASA,CAAC7C,KAAK,EAAEkD,IAAI,EAAEC,SAAS,EAAEC,WAAW,EAAE;EACpD,IAAIC,KAAK,GAAGJ,UAAU,CAACE,SAAS,EAAEC,WAAW,EAAEF,IAAI,CAAC;EACpD,OAAOG,KAAK,GAAG,CAAC,IAAIJ,UAAU,CAACE,SAAS,EAAEC,WAAW,EAAEpD,KAAK,CAAC,GAAGqD,KAAK;AACzE;;AAEA;AACA,MAAMC,OAAO,GAAG,OAAOC,OAAO,IAAI,WAAW,IAAIA,OAAO,CAACC,GAAG,IAAI,WAAW,CAACC,IAAI,CAACF,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;AACjG,IAAIC,QAAQ,GAAG,IAAI;AACnB,IAAIC,MAAM;AACV,CAAC,UAAUA,MAAM,EAAE;EACfA,MAAM,CAACA,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,QAAQ;AAC5C,CAAC,EAAEA,MAAM,KAAKA,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3B,SAASC,KAAKA,CAACC,IAAI,EAAEjM,GAAG,EAAEkM,IAAI,EAAE;EAC5B,IAAIC,MAAM,GAAGF,IAAI,CAACE,MAAM,CAAC1M,QAAQ,CAAC2M,gBAAgB,CAAC;EACnDD,MAAM,CAACE,MAAM,CAACrM,GAAG,CAAC;EAClB,SAAS;IACL,IAAI,EAAEkM,IAAI,GAAG,CAAC,GAAGC,MAAM,CAACG,WAAW,CAACtM,GAAG,CAAC,GAAGmM,MAAM,CAACI,UAAU,CAACvM,GAAG,CAAC,CAAC,EAC9D,SAAS;MACL,IAAI,CAACkM,IAAI,GAAG,CAAC,GAAGC,MAAM,CAAC5D,EAAE,GAAGvI,GAAG,GAAGmM,MAAM,CAAChK,IAAI,GAAGnC,GAAG,KAAK,CAACmM,MAAM,CAACzK,IAAI,CAAC8K,OAAO,EACxE,OAAON,IAAI,GAAG,CAAC,GAAGrD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACe,GAAG,CAACuC,MAAM,CAAC5D,EAAE,GAAG,CAAC,EAAEvI,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC,CAAC,GAC9E6I,IAAI,CAACe,GAAG,CAACqC,IAAI,CAAC1L,MAAM,EAAEsI,IAAI,CAACC,GAAG,CAACqD,MAAM,CAAChK,IAAI,GAAG,CAAC,EAAEnC,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC,CAAC;MACxF,IAAIkM,IAAI,GAAG,CAAC,GAAGC,MAAM,CAACM,WAAW,CAAC,CAAC,GAAGN,MAAM,CAACO,WAAW,CAAC,CAAC,EACtD;MACJ,IAAI,CAACP,MAAM,CAAC1L,MAAM,CAAC,CAAC,EAChB,OAAOyL,IAAI,GAAG,CAAC,GAAG,CAAC,GAAGD,IAAI,CAAC1L,MAAM;IACzC;EACR;AACJ;AACA,MAAMoM,cAAc,CAAC;EACjBhN,WAAWA,CAACiN,SAAS,EAAEvK,OAAO,EAAE;IAC5B,IAAI,CAACuK,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACvK,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACxB,CAAC,GAAG,CAAC;IACV,IAAI,CAACgM,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACjM,KAAK,GAAG,EAAE;IACf,IAAI,CAACqC,KAAK,GAAG,EAAE;IACf,IAAI,CAAC6J,YAAY,CAAC,CAAC;EACvB;EACAA,YAAYA,CAAA,EAAG;IACX,IAAIC,EAAE,GAAG,IAAI,CAACL,QAAQ,GAAG,IAAI,CAAChM,CAAC,IAAI,IAAI,CAAC+L,SAAS,CAACrM,MAAM,GAAG,IAAI,GAAG,IAAI,CAACqM,SAAS,CAAC,IAAI,CAAC/L,CAAC,EAAE,CAAC;IAC1F,IAAIqM,EAAE,EAAE;MACJ,IAAI,CAACJ,QAAQ,GAAGI,EAAE,CAACC,SAAS,GAAGnB,KAAK,CAACkB,EAAE,CAACjB,IAAI,EAAEiB,EAAE,CAAC/K,IAAI,GAAG+K,EAAE,CAACxE,MAAM,EAAE,CAAC,CAAC,GAAGwE,EAAE,CAACxE,MAAM,GAAGwE,EAAE,CAAC/K,IAAI;MAC3F,IAAI,CAAC4K,MAAM,GAAGG,EAAE,CAACE,OAAO,GAAGpB,KAAK,CAACkB,EAAE,CAACjB,IAAI,EAAEiB,EAAE,CAAC3E,EAAE,GAAG2E,EAAE,CAACxE,MAAM,EAAE,CAAC,CAAC,CAAC,GAAGwE,EAAE,CAACxE,MAAM,GAAGwE,EAAE,CAAC3E,EAAE;MACpF,OAAO,IAAI,CAACyE,KAAK,CAACzM,MAAM,EAAE;QACtB,IAAI,CAACyM,KAAK,CAAClK,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC/B,KAAK,CAAC+B,GAAG,CAAC,CAAC;QAChB,IAAI,CAACM,KAAK,CAACN,GAAG,CAAC,CAAC;MACpB;MACA,IAAI,CAACkK,KAAK,CAAC3L,IAAI,CAAC6L,EAAE,CAACjB,IAAI,CAAC;MACxB,IAAI,CAAClL,KAAK,CAACM,IAAI,CAAC,CAAC6L,EAAE,CAACxE,MAAM,CAAC;MAC3B,IAAI,CAACtF,KAAK,CAAC/B,IAAI,CAAC,CAAC,CAAC;MAClB,IAAI,CAACgM,SAAS,GAAG,IAAI,CAACP,QAAQ;IAClC,CAAC,MACI;MACD,IAAI,CAACO,SAAS,GAAG,GAAG;IACxB;EACJ;EACA;EACAC,MAAMA,CAACtN,GAAG,EAAE;IACR,IAAIA,GAAG,GAAG,IAAI,CAACqN,SAAS,EACpB,OAAO,IAAI;IACf,OAAO,IAAI,CAACR,QAAQ,IAAI,IAAI,CAACE,MAAM,IAAI/M,GAAG,EACtC,IAAI,CAACiN,YAAY,CAAC,CAAC;IACvB,IAAI,CAAC,IAAI,CAACJ,QAAQ,EACd,OAAO,IAAI;IACf,SAAS;MACL,IAAI1G,IAAI,GAAG,IAAI,CAAC6G,KAAK,CAACzM,MAAM,GAAG,CAAC;MAChC,IAAI4F,IAAI,GAAG,CAAC,EAAE;QAAE;QACZ,IAAI,CAAC8G,YAAY,CAAC,CAAC;QACnB,OAAO,IAAI;MACf;MACA,IAAI9J,GAAG,GAAG,IAAI,CAAC6J,KAAK,CAAC7G,IAAI,CAAC;QAAE/C,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC+C,IAAI,CAAC;MACpD,IAAI/C,KAAK,IAAID,GAAG,CAACoK,QAAQ,CAAChN,MAAM,EAAE;QAC9B,IAAI,CAACyM,KAAK,CAAClK,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC/B,KAAK,CAAC+B,GAAG,CAAC,CAAC;QAChB,IAAI,CAACM,KAAK,CAACN,GAAG,CAAC,CAAC;QAChB;MACJ;MACA,IAAIQ,IAAI,GAAGH,GAAG,CAACoK,QAAQ,CAACnK,KAAK,CAAC;MAC9B,IAAIrC,KAAK,GAAG,IAAI,CAACA,KAAK,CAACoF,IAAI,CAAC,GAAGhD,GAAG,CAACqK,SAAS,CAACpK,KAAK,CAAC;MACnD,IAAIrC,KAAK,GAAGf,GAAG,EAAE;QACb,IAAI,CAACqN,SAAS,GAAGtM,KAAK;QACtB,OAAO,IAAI;MACf;MACA,IAAIuC,IAAI,YAAY9D,IAAI,EAAE;QACtB,IAAIuB,KAAK,IAAIf,GAAG,EAAE;UACd,IAAIe,KAAK,GAAG,IAAI,CAAC+L,QAAQ,EACrB,OAAO,IAAI;UACf,IAAI9J,GAAG,GAAGjC,KAAK,GAAGuC,IAAI,CAAC/C,MAAM;UAC7B,IAAIyC,GAAG,IAAI,IAAI,CAAC+J,MAAM,EAAE;YACpB,IAAI1M,SAAS,GAAGiD,IAAI,CAACmK,IAAI,CAACrO,QAAQ,CAACiB,SAAS,CAAC;YAC7C,IAAI,CAACA,SAAS,IAAI2C,GAAG,GAAG3C,SAAS,GAAG,IAAI,CAACwM,QAAQ,CAACtE,EAAE,EAChD,OAAOjF,IAAI;UACnB;QACJ;QACA,IAAI,CAACF,KAAK,CAAC+C,IAAI,CAAC,EAAE;QAClB,IAAIpF,KAAK,GAAGuC,IAAI,CAAC/C,MAAM,IAAIsI,IAAI,CAACC,GAAG,CAAC,IAAI,CAACgE,QAAQ,EAAE9M,GAAG,CAAC,EAAE;UAAE;UACvD,IAAI,CAACgN,KAAK,CAAC3L,IAAI,CAACiC,IAAI,CAAC;UACrB,IAAI,CAACvC,KAAK,CAACM,IAAI,CAACN,KAAK,CAAC;UACtB,IAAI,CAACqC,KAAK,CAAC/B,IAAI,CAAC,CAAC,CAAC;QACtB;MACJ,CAAC,MACI;QACD,IAAI,CAAC+B,KAAK,CAAC+C,IAAI,CAAC,EAAE;QAClB,IAAI,CAACkH,SAAS,GAAGtM,KAAK,GAAGuC,IAAI,CAAC/C,MAAM;MACxC;IACJ;EACJ;AACJ;AACA,MAAMmN,UAAU,CAAC;EACb/N,WAAWA,CAACsB,MAAM,EAAEiD,MAAM,EAAE;IACxB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACyJ,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACF,MAAM,GAAG1M,MAAM,CAAC6M,UAAU,CAACC,GAAG,CAACnN,CAAC,IAAI,IAAI8G,WAAW,CAAD,CAAC,CAAC;EAC7D;EACAsG,UAAUA,CAACnO,KAAK,EAAE;IACd,IAAIoO,WAAW,GAAG,CAAC;IACnB,IAAIC,IAAI,GAAG,IAAI;IACf,IAAI;QAAEjN;MAAO,CAAC,GAAGpB,KAAK,CAACD,CAAC;MAAE;QAAEkO;MAAW,CAAC,GAAG7M,MAAM;IACjD,IAAI2G,IAAI,GAAG3G,MAAM,CAAC2D,SAAS,CAAC/E,KAAK,CAACC,KAAK,EAAE,CAAC,CAAC,8BAA8B,CAAC;IAC1E,IAAIoB,OAAO,GAAGrB,KAAK,CAACO,UAAU,GAAGP,KAAK,CAACO,UAAU,CAACgG,IAAI,GAAG,CAAC;IAC1D,IAAI/F,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiN,UAAU,CAACvN,MAAM,EAAEM,CAAC,EAAE,EAAE;MACxC,IAAI,CAAE,CAAC,IAAIA,CAAC,GAAI+G,IAAI,KAAK,CAAC,EACtB;MACJ,IAAIuG,SAAS,GAAGL,UAAU,CAACjN,CAAC,CAAC;QAAEsH,KAAK,GAAG,IAAI,CAACwF,MAAM,CAAC9M,CAAC,CAAC;MACrD,IAAIqN,IAAI,IAAI,CAACC,SAAS,CAACjE,QAAQ,EAC3B;MACJ,IAAIiE,SAAS,CAAClE,UAAU,IAAI9B,KAAK,CAACpH,KAAK,IAAIlB,KAAK,CAACG,GAAG,IAAImI,KAAK,CAACP,IAAI,IAAIA,IAAI,IAAIO,KAAK,CAACjH,OAAO,IAAIA,OAAO,EAAE;QACpG,IAAI,CAACkN,iBAAiB,CAACjG,KAAK,EAAEgG,SAAS,EAAEtO,KAAK,CAAC;QAC/CsI,KAAK,CAACP,IAAI,GAAGA,IAAI;QACjBO,KAAK,CAACjH,OAAO,GAAGA,OAAO;MAC3B;MACA,IAAIiH,KAAK,CAAC9H,SAAS,GAAG8H,KAAK,CAACnF,GAAG,GAAG,EAAE,CAAC,qBACjC3C,SAAS,GAAGwI,IAAI,CAACC,GAAG,CAACX,KAAK,CAAC9H,SAAS,EAAEA,SAAS,CAAC;MACpD,IAAI8H,KAAK,CAACtE,KAAK,IAAI,CAAC,CAAC,gBAAgB;QACjC,IAAIwK,UAAU,GAAGJ,WAAW;QAC5B,IAAI9F,KAAK,CAACR,QAAQ,GAAG,CAAC,CAAC,EACnBsG,WAAW,GAAG,IAAI,CAACK,UAAU,CAACzO,KAAK,EAAEsI,KAAK,CAACR,QAAQ,EAAEQ,KAAK,CAACnF,GAAG,EAAEiL,WAAW,CAAC;QAChFA,WAAW,GAAG,IAAI,CAACK,UAAU,CAACzO,KAAK,EAAEsI,KAAK,CAACtE,KAAK,EAAEsE,KAAK,CAACnF,GAAG,EAAEiL,WAAW,CAAC;QACzE,IAAI,CAACE,SAAS,CAAChE,MAAM,EAAE;UACnB+D,IAAI,GAAG/F,KAAK;UACZ,IAAI8F,WAAW,GAAGI,UAAU,EACxB;QACR;MACJ;IACJ;IACA,OAAO,IAAI,CAACR,OAAO,CAACtN,MAAM,GAAG0N,WAAW,EACpC,IAAI,CAACJ,OAAO,CAAC/K,GAAG,CAAC,CAAC;IACtB,IAAIzC,SAAS,EACTR,KAAK,CAAC0G,YAAY,CAAClG,SAAS,CAAC;IACjC,IAAI,CAAC6N,IAAI,IAAIrO,KAAK,CAACG,GAAG,IAAI,IAAI,CAACkE,MAAM,CAAClB,GAAG,EAAE;MACvCkL,IAAI,GAAG,IAAIxG,WAAW,CAAD,CAAC;MACtBwG,IAAI,CAACrK,KAAK,GAAGhE,KAAK,CAACD,CAAC,CAACqB,MAAM,CAACsN,OAAO;MACnCL,IAAI,CAACnN,KAAK,GAAGmN,IAAI,CAAClL,GAAG,GAAGnD,KAAK,CAACG,GAAG;MACjCiO,WAAW,GAAG,IAAI,CAACK,UAAU,CAACzO,KAAK,EAAEqO,IAAI,CAACrK,KAAK,EAAEqK,IAAI,CAAClL,GAAG,EAAEiL,WAAW,CAAC;IAC3E;IACA,IAAI,CAACL,SAAS,GAAGM,IAAI;IACrB,OAAO,IAAI,CAACL,OAAO;EACvB;EACAW,YAAYA,CAAC3O,KAAK,EAAE;IAChB,IAAI,IAAI,CAAC+N,SAAS,EACd,OAAO,IAAI,CAACA,SAAS;IACzB,IAAIM,IAAI,GAAG,IAAIxG,WAAW,CAAD,CAAC;MAAE;QAAE1H,GAAG;QAAEJ;MAAE,CAAC,GAAGC,KAAK;IAC9CqO,IAAI,CAACnN,KAAK,GAAGf,GAAG;IAChBkO,IAAI,CAAClL,GAAG,GAAG6F,IAAI,CAACe,GAAG,CAAC5J,GAAG,GAAG,CAAC,EAAEJ,CAAC,CAACsE,MAAM,CAAClB,GAAG,CAAC;IAC1CkL,IAAI,CAACrK,KAAK,GAAG7D,GAAG,IAAIJ,CAAC,CAACsE,MAAM,CAAClB,GAAG,GAAGpD,CAAC,CAACqB,MAAM,CAACsN,OAAO,GAAG,CAAC,CAAC;IACxD,OAAOL,IAAI;EACf;EACAE,iBAAiBA,CAACjG,KAAK,EAAEgG,SAAS,EAAEtO,KAAK,EAAE;IACvC,IAAIkB,KAAK,GAAG,IAAI,CAACmD,MAAM,CAAC0E,OAAO,CAAC/I,KAAK,CAACG,GAAG,CAAC;IAC1CmO,SAAS,CAAChG,KAAK,CAAC,IAAI,CAACjE,MAAM,CAACC,KAAK,CAACpD,KAAK,EAAEoH,KAAK,CAAC,EAAEtI,KAAK,CAAC;IACvD,IAAIsI,KAAK,CAACtE,KAAK,GAAG,CAAC,CAAC,EAAE;MAClB,IAAI;QAAE5C;MAAO,CAAC,GAAGpB,KAAK,CAACD,CAAC;MACxB,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,MAAM,CAACwN,WAAW,CAAClO,MAAM,EAAEM,CAAC,EAAE,EAC9C,IAAII,MAAM,CAACwN,WAAW,CAAC5N,CAAC,CAAC,IAAIsH,KAAK,CAACtE,KAAK,EAAE;QACtC,IAAIuB,MAAM,GAAGnE,MAAM,CAACyN,YAAY,CAAC7N,CAAC,CAAC,CAAC,IAAI,CAACqD,MAAM,CAACwF,IAAI,CAACvB,KAAK,CAACpH,KAAK,EAAEoH,KAAK,CAACnF,GAAG,CAAC,EAAEnD,KAAK,CAAC;QACpF,IAAIuF,MAAM,IAAI,CAAC,IAAIvF,KAAK,CAACD,CAAC,CAACqB,MAAM,CAAC+E,OAAO,CAAC+E,MAAM,CAAC3F,MAAM,IAAI,CAAC,CAAC,EAAE;UAC3D,IAAI,CAACA,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,6BAClB+C,KAAK,CAACtE,KAAK,GAAGuB,MAAM,IAAI,CAAC,CAAC,KAE1B+C,KAAK,CAACR,QAAQ,GAAGvC,MAAM,IAAI,CAAC;UAChC;QACJ;MACJ;IACR,CAAC,MACI;MACD+C,KAAK,CAACtE,KAAK,GAAG,CAAC,CAAC;MAChBsE,KAAK,CAACnF,GAAG,GAAG,IAAI,CAACkB,MAAM,CAAC0E,OAAO,CAAC7H,KAAK,GAAG,CAAC,CAAC;IAC9C;EACJ;EACA4N,SAASA,CAACpN,MAAM,EAAE4G,KAAK,EAAEnF,GAAG,EAAEI,KAAK,EAAE;IACjC;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuC,KAAK,EAAEvC,CAAC,IAAI,CAAC,EAC7B,IAAI,IAAI,CAACgN,OAAO,CAAChN,CAAC,CAAC,IAAIU,MAAM,EACzB,OAAO6B,KAAK;IACpB,IAAI,CAACyK,OAAO,CAACzK,KAAK,EAAE,CAAC,GAAG7B,MAAM;IAC9B,IAAI,CAACsM,OAAO,CAACzK,KAAK,EAAE,CAAC,GAAG+E,KAAK;IAC7B,IAAI,CAAC0F,OAAO,CAACzK,KAAK,EAAE,CAAC,GAAGJ,GAAG;IAC3B,OAAOI,KAAK;EAChB;EACAkL,UAAUA,CAACzO,KAAK,EAAEsI,KAAK,EAAEnF,GAAG,EAAEI,KAAK,EAAE;IACjC,IAAI;QAAEtD;MAAM,CAAC,GAAGD,KAAK;MAAE;QAAEoB;MAAO,CAAC,GAAGpB,KAAK,CAACD,CAAC;MAAE;QAAE8F;MAAK,CAAC,GAAGzE,MAAM;IAC9D,KAAK,IAAI2N,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAC9B,KAAK,IAAI/N,CAAC,GAAGI,MAAM,CAAC2D,SAAS,CAAC9E,KAAK,EAAE8O,GAAG,GAAG,CAAC,CAAC,wBAAwB,CAAC,CAAC,wBAAwB,CAAC,GAAG/N,CAAC,IAAI,CAAC,EAAE;QACvG,IAAI6E,IAAI,CAAC7E,CAAC,CAAC,IAAI,KAAK,CAAC,eAAe;UAChC,IAAI6E,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,gBAAgB;YACjCA,CAAC,GAAGgO,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC;UACzB,CAAC,MACI;YACD,IAAIuC,KAAK,IAAI,CAAC,IAAIsC,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,iBAC/BuC,KAAK,GAAG,IAAI,CAACuL,SAAS,CAACE,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC,EAAEsH,KAAK,EAAEnF,GAAG,EAAEI,KAAK,CAAC;YAChE;UACJ;QACJ;QACA,IAAIsC,IAAI,CAAC7E,CAAC,CAAC,IAAIsH,KAAK,EAChB/E,KAAK,GAAG,IAAI,CAACuL,SAAS,CAACE,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC,EAAEsH,KAAK,EAAEnF,GAAG,EAAEI,KAAK,CAAC;MACpE;IACJ;IACA,OAAOA,KAAK;EAChB;AACJ;AACA,IAAI0L,GAAG;AACP,CAAC,UAAUA,GAAG,EAAE;EACZA,GAAG,CAACA,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EACrCA,GAAG,CAACA,GAAG,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,GAAG,qBAAqB;EAC3D;EACA;EACAA,GAAG,CAACA,GAAG,CAAC,sBAAsB,CAAC,GAAG,GAAG,CAAC,GAAG,sBAAsB;EAC/DA,GAAG,CAACA,GAAG,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,GAAG,kBAAkB;EACtD;EACA;EACA;EACAA,GAAG,CAACA,GAAG,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,GAAG,UAAU;EACzCA,GAAG,CAACA,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO;EAClCA,GAAG,CAACA,GAAG,CAAC,kCAAkC,CAAC,GAAG,GAAG,CAAC,GAAG,kCAAkC;EACvF;EACA;EACA;EACAA,GAAG,CAACA,GAAG,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,eAAe;AACpD,CAAC,EAAEA,GAAG,KAAKA,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACrB,MAAMC,KAAK,CAAC;EACRpP,WAAWA,CAACsB,MAAM,EAAEiG,KAAK,EAAE0F,SAAS,EAAE1K,MAAM,EAAE;IAC1C,IAAI,CAACjB,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACiG,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAChF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC8M,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,WAAW,GAAG,MAAM,CAAC,CAAC;IAC3B,IAAI,CAACC,WAAW,GAAG,CAAC;IACpB,IAAI,CAACpL,MAAM,GAAG,EAAE;IAChB,IAAI,CAACqL,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC3M,qBAAqB,GAAG,CAAC,CAAC;IAC/B,IAAI,CAACE,oBAAoB,GAAG,CAAC;IAC7B,IAAI,CAACD,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACyB,MAAM,GAAG,IAAI4D,WAAW,CAACZ,KAAK,EAAEhF,MAAM,CAAC;IAC5C,IAAI,CAACyL,MAAM,GAAG,IAAID,UAAU,CAACzM,MAAM,EAAE,IAAI,CAACiD,MAAM,CAAC;IACjD,IAAI,CAACkL,OAAO,GAAGnO,MAAM,CAACkC,GAAG,CAAC,CAAC,CAAC;IAC5B,IAAI;MAAEhB;IAAK,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;IACxB,IAAI,CAACmN,MAAM,GAAG,CAAC3P,KAAK,CAACqB,KAAK,CAAC,IAAI,EAAEE,MAAM,CAACkC,GAAG,CAAC,CAAC,CAAC,EAAEhB,IAAI,CAAC,CAAC;IACtD,IAAI,CAACyK,SAAS,GAAGA,SAAS,CAACrM,MAAM,IAAI,IAAI,CAAC2D,MAAM,CAAClB,GAAG,GAAGb,IAAI,GAAGlB,MAAM,CAACqO,YAAY,GAAG,CAAC,GAC/E,IAAI3C,cAAc,CAACC,SAAS,EAAE3L,MAAM,CAACoB,OAAO,CAAC,GAAG,IAAI;EAC9D;EACA,IAAIkN,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACL,WAAW;EAC3B;EACA;EACA;EACA;EACA;EACA;EACA;EACA3F,OAAOA,CAAA,EAAG;IACN,IAAI8F,MAAM,GAAG,IAAI,CAACA,MAAM;MAAErP,GAAG,GAAG,IAAI,CAACkP,WAAW;IAChD;IACA,IAAIM,SAAS,GAAG,IAAI,CAACH,MAAM,GAAG,EAAE;IAChC,IAAII,OAAO,EAAEC,aAAa;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACjN,iBAAiB,GAAG,GAAG,CAAC,8CAA8C4M,MAAM,CAAC9O,MAAM,IAAI,CAAC,EAAE;MAC/F,IAAI,CAAC0E,CAAC,CAAC,GAAGoK,MAAM;MAChB,OAAOpK,CAAC,CAACI,WAAW,CAAC,CAAC,IAAIJ,CAAC,CAACpF,KAAK,CAACU,MAAM,IAAI0E,CAAC,CAACpF,KAAK,CAACoF,CAAC,CAACpF,KAAK,CAACU,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAACiC,qBAAqB,EAAE,CAAE;MACzG,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,GAAG,CAAC;IAC1D;IACA;IACA;IACA;IACA,KAAK,IAAI7B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwO,MAAM,CAAC9O,MAAM,EAAEM,CAAC,EAAE,EAAE;MACpC,IAAIhB,KAAK,GAAGwP,MAAM,CAACxO,CAAC,CAAC;MACrB,SAAS;QACL,IAAI,CAAC8M,MAAM,CAACC,SAAS,GAAG,IAAI;QAC5B,IAAI/N,KAAK,CAACG,GAAG,GAAGA,GAAG,EAAE;UACjBwP,SAAS,CAACnO,IAAI,CAACxB,KAAK,CAAC;QACzB,CAAC,MACI,IAAI,IAAI,CAAC8P,YAAY,CAAC9P,KAAK,EAAE2P,SAAS,EAAEH,MAAM,CAAC,EAAE;UAClD;QACJ,CAAC,MACI;UACD,IAAI,CAACI,OAAO,EAAE;YACVA,OAAO,GAAG,EAAE;YACZC,aAAa,GAAG,EAAE;UACtB;UACAD,OAAO,CAACpO,IAAI,CAACxB,KAAK,CAAC;UACnB,IAAI+P,GAAG,GAAG,IAAI,CAACjC,MAAM,CAACa,YAAY,CAAC3O,KAAK,CAAC;UACzC6P,aAAa,CAACrO,IAAI,CAACuO,GAAG,CAAC/L,KAAK,EAAE+L,GAAG,CAAC5M,GAAG,CAAC;QAC1C;QACA;MACJ;IACJ;IACA,IAAI,CAACwM,SAAS,CAACjP,MAAM,EAAE;MACnB,IAAIsP,QAAQ,GAAGJ,OAAO,IAAIK,YAAY,CAACL,OAAO,CAAC;MAC/C,IAAII,QAAQ,EACR,OAAO,IAAI,CAACE,WAAW,CAACF,QAAQ,CAAC;MACrC,IAAI,IAAI,CAAC5O,MAAM,CAACwF,MAAM,EAAE;QACpB,IAAIgF,OAAO,IAAIgE,OAAO,EAClBO,OAAO,CAACC,GAAG,CAAC,mBAAmB,IAAI,IAAI,CAACtC,MAAM,CAACC,SAAS,GAAG,IAAI,CAAC3M,MAAM,CAACiP,OAAO,CAAC,IAAI,CAACvC,MAAM,CAACC,SAAS,CAAC/J,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC;QAC1H,MAAM,IAAIsM,WAAW,CAAC,cAAc,GAAGnQ,GAAG,CAAC;MAC/C;MACA,IAAI,CAAC,IAAI,CAACgP,UAAU,EAChB,IAAI,CAACA,UAAU,GAAG,CAAC,CAAC;IAC5B;;IACA,IAAI,IAAI,CAACA,UAAU,IAAIS,OAAO,EAAE;MAC5B,IAAII,QAAQ,GAAG,IAAI,CAACV,SAAS,IAAI,IAAI,IAAIM,OAAO,CAAC,CAAC,CAAC,CAACzP,GAAG,GAAG,IAAI,CAACmP,SAAS,GAAGM,OAAO,CAAC,CAAC,CAAC,GAC/E,IAAI,CAACW,WAAW,CAACX,OAAO,EAAEC,aAAa,EAAEF,SAAS,CAAC;MACzD,IAAIK,QAAQ,EACR,OAAO,IAAI,CAACE,WAAW,CAACF,QAAQ,CAACrK,QAAQ,CAAC,CAAC,CAAC;IACpD;IACA,IAAI,IAAI,CAACwJ,UAAU,EAAE;MACjB,IAAIqB,YAAY,GAAG,IAAI,CAACrB,UAAU,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,UAAU,GAAG,CAAC,CAAC;MAClE,IAAIQ,SAAS,CAACjP,MAAM,GAAG8P,YAAY,EAAE;QACjCb,SAAS,CAACc,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACvQ,KAAK,GAAGsQ,CAAC,CAACtQ,KAAK,CAAC;QAC3C,OAAOuP,SAAS,CAACjP,MAAM,GAAG8P,YAAY,EAClCb,SAAS,CAAC1M,GAAG,CAAC,CAAC;MACvB;MACA,IAAI0M,SAAS,CAACtK,IAAI,CAACD,CAAC,IAAIA,CAAC,CAAClF,SAAS,GAAGC,GAAG,CAAC,EACtC,IAAI,CAACgP,UAAU,EAAE;IACzB,CAAC,MACI,IAAIQ,SAAS,CAACjP,MAAM,GAAG,CAAC,EAAE;MAC3B;MACA;MACA;MACAkQ,KAAK,EAAE,KAAK,IAAI5P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2O,SAAS,CAACjP,MAAM,GAAG,CAAC,EAAEM,CAAC,EAAE,EAAE;QAClD,IAAIhB,KAAK,GAAG2P,SAAS,CAAC3O,CAAC,CAAC;QACxB,KAAK,IAAI6P,CAAC,GAAG7P,CAAC,GAAG,CAAC,EAAE6P,CAAC,GAAGlB,SAAS,CAACjP,MAAM,EAAEmQ,CAAC,EAAE,EAAE;UAC3C,IAAI7K,KAAK,GAAG2J,SAAS,CAACkB,CAAC,CAAC;UACxB,IAAI7Q,KAAK,CAAC+F,SAAS,CAACC,KAAK,CAAC,IACtBhG,KAAK,CAACK,MAAM,CAACK,MAAM,GAAG,GAAG,CAAC,kCAAkCsF,KAAK,CAAC3F,MAAM,CAACK,MAAM,GAAG,GAAG,CAAC,gCAAgC;YACtH,IAAI,CAAEV,KAAK,CAACI,KAAK,GAAG4F,KAAK,CAAC5F,KAAK,IAAMJ,KAAK,CAACK,MAAM,CAACK,MAAM,GAAGsF,KAAK,CAAC3F,MAAM,CAACK,MAAO,IAAI,CAAC,EAAE;cAClFiP,SAAS,CAACmB,MAAM,CAACD,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5B,CAAC,MACI;cACDlB,SAAS,CAACmB,MAAM,CAAC9P,CAAC,EAAE,EAAE,CAAC,CAAC;cACxB,SAAS4P,KAAK;YAClB;UACJ;QACJ;MACJ;MACA,IAAIjB,SAAS,CAACjP,MAAM,GAAG,EAAE,CAAC,yBACtBiP,SAAS,CAACmB,MAAM,CAAC,EAAE,CAAC,yBAAyBnB,SAAS,CAACjP,MAAM,GAAG,EAAE,CAAC,uBAAuB,CAAC;IACnG;;IACA,IAAI,CAAC2O,WAAW,GAAGM,SAAS,CAAC,CAAC,CAAC,CAACxP,GAAG;IACnC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2O,SAAS,CAACjP,MAAM,EAAEM,CAAC,EAAE,EACrC,IAAI2O,SAAS,CAAC3O,CAAC,CAAC,CAACb,GAAG,GAAG,IAAI,CAACkP,WAAW,EACnC,IAAI,CAACA,WAAW,GAAGM,SAAS,CAAC3O,CAAC,CAAC,CAACb,GAAG;IAC3C,OAAO,IAAI;EACf;EACA4Q,MAAMA,CAAC5Q,GAAG,EAAE;IACR,IAAI,IAAI,CAACmP,SAAS,IAAI,IAAI,IAAI,IAAI,CAACA,SAAS,GAAGnP,GAAG,EAC9C,MAAM,IAAIoJ,UAAU,CAAC,8BAA8B,CAAC;IACxD,IAAI,CAAC+F,SAAS,GAAGnP,GAAG;EACxB;EACA;EACA;EACA;EACA;EACA2P,YAAYA,CAAC9P,KAAK,EAAEwP,MAAM,EAAEjL,KAAK,EAAE;IAC/B,IAAIrD,KAAK,GAAGlB,KAAK,CAACG,GAAG;MAAE;QAAEiB;MAAO,CAAC,GAAG,IAAI;IACxC,IAAIgB,IAAI,GAAGwJ,OAAO,GAAG,IAAI,CAACoF,OAAO,CAAChR,KAAK,CAAC,GAAG,MAAM,GAAG,EAAE;IACtD,IAAI,IAAI,CAACsP,SAAS,IAAI,IAAI,IAAIpO,KAAK,GAAG,IAAI,CAACoO,SAAS,EAChD,OAAOtP,KAAK,CAACwF,WAAW,CAAC,CAAC,GAAGxF,KAAK,GAAG,IAAI;IAC7C,IAAI,IAAI,CAAC+M,SAAS,EAAE;MAChB,IAAIkE,QAAQ,GAAGjR,KAAK,CAACO,UAAU,IAAIP,KAAK,CAACO,UAAU,CAAC4D,OAAO,CAACyC,MAAM;QAAEsK,MAAM,GAAGD,QAAQ,GAAGjR,KAAK,CAACO,UAAU,CAACgG,IAAI,GAAG,CAAC;MACjH,KAAK,IAAI4K,MAAM,GAAG,IAAI,CAACpE,SAAS,CAACU,MAAM,CAACvM,KAAK,CAAC,EAAEiQ,MAAM,GAAG;QACrD,IAAIC,KAAK,GAAG,IAAI,CAAChQ,MAAM,CAACoB,OAAO,CAACC,KAAK,CAAC0O,MAAM,CAACtP,IAAI,CAACqF,EAAE,CAAC,IAAIiK,MAAM,CAACtP,IAAI,GAAGT,MAAM,CAACY,OAAO,CAAChC,KAAK,CAACC,KAAK,EAAEkR,MAAM,CAACtP,IAAI,CAACqF,EAAE,CAAC,GAAG,CAAC,CAAC;QACvH,IAAIkK,KAAK,GAAG,CAAC,CAAC,IAAID,MAAM,CAACzQ,MAAM,KAAK,CAACuQ,QAAQ,IAAI,CAACE,MAAM,CAACvD,IAAI,CAACrO,QAAQ,CAAC8R,WAAW,CAAC,IAAI,CAAC,KAAKH,MAAM,CAAC,EAAE;UAClGlR,KAAK,CAAC+D,OAAO,CAACoN,MAAM,EAAEC,KAAK,CAAC;UAC5B,IAAIxF,OAAO,EACPuE,OAAO,CAACC,GAAG,CAAChO,IAAI,GAAG,IAAI,CAAC4O,OAAO,CAAChR,KAAK,CAAC,GAAI,kBAAiBoB,MAAM,CAACiP,OAAO,CAACc,MAAM,CAACtP,IAAI,CAACqF,EAAE,CAAE,GAAE,CAAC;UACjG,OAAO,IAAI;QACf;QACA,IAAI,EAAEiK,MAAM,YAAYxR,IAAI,CAAC,IAAIwR,MAAM,CAACzD,QAAQ,CAAChN,MAAM,IAAI,CAAC,IAAIyQ,MAAM,CAACxD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,EACnF;QACJ,IAAI2D,KAAK,GAAGH,MAAM,CAACzD,QAAQ,CAAC,CAAC,CAAC;QAC9B,IAAI4D,KAAK,YAAY3R,IAAI,IAAIwR,MAAM,CAACxD,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EACjDwD,MAAM,GAAGG,KAAK,CAAC,KAEf;MACR;IACJ;IACA,IAAIC,aAAa,GAAGnQ,MAAM,CAAC2D,SAAS,CAAC/E,KAAK,CAACC,KAAK,EAAE,CAAC,CAAC,8BAA8B,CAAC;IACnF,IAAIsR,aAAa,GAAG,CAAC,EAAE;MACnBvR,KAAK,CAACyB,MAAM,CAAC8P,aAAa,CAAC;MAC3B,IAAI3F,OAAO,EACPuE,OAAO,CAACC,GAAG,CAAChO,IAAI,GAAG,IAAI,CAAC4O,OAAO,CAAChR,KAAK,CAAC,GAAI,uBAAsBoB,MAAM,CAACiP,OAAO,CAACkB,aAAa,GAAG,KAAK,CAAC,sBAAsB,CAAE,GAAE,CAAC;MACpI,OAAO,IAAI;IACf;IACA,IAAIvR,KAAK,CAACA,KAAK,CAACU,MAAM,IAAI,KAAK,CAAC,oBAAoB;MAChD,OAAOV,KAAK,CAACA,KAAK,CAACU,MAAM,GAAG,IAAI,CAAC,mBAAmBV,KAAK,CAACwF,WAAW,CAAC,CAAC,EAAE,CAAE;IAC/E;IACA,IAAIwI,OAAO,GAAG,IAAI,CAACF,MAAM,CAACK,UAAU,CAACnO,KAAK,CAAC;IAC3C,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgN,OAAO,CAACtN,MAAM,GAAG;MACjC,IAAIgB,MAAM,GAAGsM,OAAO,CAAChN,CAAC,EAAE,CAAC;QAAEkC,IAAI,GAAG8K,OAAO,CAAChN,CAAC,EAAE,CAAC;QAAEmC,GAAG,GAAG6K,OAAO,CAAChN,CAAC,EAAE,CAAC;MAClE,IAAIsF,IAAI,GAAGtF,CAAC,IAAIgN,OAAO,CAACtN,MAAM,IAAI,CAAC6D,KAAK;MACxC,IAAIiN,UAAU,GAAGlL,IAAI,GAAGtG,KAAK,GAAGA,KAAK,CAACuE,KAAK,CAAC,CAAC;MAC7CiN,UAAU,CAAC1N,KAAK,CAACpC,MAAM,EAAEwB,IAAI,EAAEC,GAAG,CAAC;MACnC,IAAIyI,OAAO,EACPuE,OAAO,CAACC,GAAG,CAAChO,IAAI,GAAG,IAAI,CAAC4O,OAAO,CAACQ,UAAU,CAAC,GAAI,SAAQ,CAAC9P,MAAM,GAAG,KAAK,CAAC,4BAA4B,CAAC,GAAG,OAAO,GACvG,aAAYN,MAAM,CAACiP,OAAO,CAAC3O,MAAM,GAAG,KAAK,CAAC,sBAAsB,CAAE,EAAE,QAAON,MAAM,CAACiP,OAAO,CAACnN,IAAI,CAAE,MAAKhC,KAAM,GAAEsQ,UAAU,IAAIxR,KAAK,GAAG,EAAE,GAAG,SAAU,GAAE,CAAC;MAChK,IAAIsG,IAAI,EACJ,OAAO,IAAI,CAAC,KACX,IAAIkL,UAAU,CAACrR,GAAG,GAAGe,KAAK,EAC3BsO,MAAM,CAAChO,IAAI,CAACgQ,UAAU,CAAC,CAAC,KAExBjN,KAAK,CAAC/C,IAAI,CAACgQ,UAAU,CAAC;IAC9B;IACA,OAAO,KAAK;EAChB;EACA;EACA;EACA;EACAC,YAAYA,CAACzR,KAAK,EAAE2P,SAAS,EAAE;IAC3B,IAAIxP,GAAG,GAAGH,KAAK,CAACG,GAAG;IACnB,SAAS;MACL,IAAI,CAAC,IAAI,CAAC2P,YAAY,CAAC9P,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,EACrC,OAAO,KAAK;MAChB,IAAIA,KAAK,CAACG,GAAG,GAAGA,GAAG,EAAE;QACjBuR,cAAc,CAAC1R,KAAK,EAAE2P,SAAS,CAAC;QAChC,OAAO,IAAI;MACf;IACJ;EACJ;EACAY,WAAWA,CAACf,MAAM,EAAE1B,MAAM,EAAE6B,SAAS,EAAE;IACnC,IAAIK,QAAQ,GAAG,IAAI;MAAE2B,SAAS,GAAG,KAAK;IACtC,KAAK,IAAI3Q,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwO,MAAM,CAAC9O,MAAM,EAAEM,CAAC,EAAE,EAAE;MACpC,IAAIhB,KAAK,GAAGwP,MAAM,CAACxO,CAAC,CAAC;QAAEsH,KAAK,GAAGwF,MAAM,CAAC9M,CAAC,IAAI,CAAC,CAAC;QAAE4Q,QAAQ,GAAG9D,MAAM,CAAC,CAAC9M,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MAC9E,IAAIoB,IAAI,GAAGwJ,OAAO,GAAG,IAAI,CAACoF,OAAO,CAAChR,KAAK,CAAC,GAAG,MAAM,GAAG,EAAE;MACtD,IAAIA,KAAK,CAAC4F,OAAO,EAAE;QACf,IAAI+L,SAAS,EACT;QACJA,SAAS,GAAG,IAAI;QAChB3R,KAAK,CAAC8F,OAAO,CAAC,CAAC;QACf,IAAI8F,OAAO,EACPuE,OAAO,CAACC,GAAG,CAAChO,IAAI,GAAG,IAAI,CAAC4O,OAAO,CAAChR,KAAK,CAAC,GAAG,cAAc,CAAC;QAC5D,IAAI6R,IAAI,GAAG,IAAI,CAACJ,YAAY,CAACzR,KAAK,EAAE2P,SAAS,CAAC;QAC9C,IAAIkC,IAAI,EACJ;MACR;MACA,IAAIC,KAAK,GAAG9R,KAAK,CAACuE,KAAK,CAAC,CAAC;QAAEwN,SAAS,GAAG3P,IAAI;MAC3C,KAAK,IAAIyO,CAAC,GAAG,CAAC,EAAEiB,KAAK,CAACtM,WAAW,CAAC,CAAC,IAAIqL,CAAC,GAAG,EAAE,CAAC,4BAA4BA,CAAC,EAAE,EAAE;QAC3E,IAAIjF,OAAO,EACPuE,OAAO,CAACC,GAAG,CAAC2B,SAAS,GAAG,IAAI,CAACf,OAAO,CAACc,KAAK,CAAC,GAAG,qBAAqB,CAAC;QACxE,IAAID,IAAI,GAAG,IAAI,CAACJ,YAAY,CAACK,KAAK,EAAEnC,SAAS,CAAC;QAC9C,IAAIkC,IAAI,EACJ;QACJ,IAAIjG,OAAO,EACPmG,SAAS,GAAG,IAAI,CAACf,OAAO,CAACc,KAAK,CAAC,GAAG,MAAM;MAChD;MACA,KAAK,IAAIE,MAAM,IAAIhS,KAAK,CAACiF,eAAe,CAACqD,KAAK,CAAC,EAAE;QAC7C,IAAIsD,OAAO,EACPuE,OAAO,CAACC,GAAG,CAAChO,IAAI,GAAG,IAAI,CAAC4O,OAAO,CAACgB,MAAM,CAAC,GAAG,uBAAuB,CAAC;QACtE,IAAI,CAACP,YAAY,CAACO,MAAM,EAAErC,SAAS,CAAC;MACxC;MACA,IAAI,IAAI,CAACtL,MAAM,CAAClB,GAAG,GAAGnD,KAAK,CAACG,GAAG,EAAE;QAC7B,IAAIyR,QAAQ,IAAI5R,KAAK,CAACG,GAAG,EAAE;UACvByR,QAAQ,EAAE;UACVtJ,KAAK,GAAG,CAAC,CAAC;QACd;;QACAtI,KAAK,CAAC0E,eAAe,CAAC4D,KAAK,EAAEsJ,QAAQ,CAAC;QACtC,IAAIhG,OAAO,EACPuE,OAAO,CAACC,GAAG,CAAChO,IAAI,GAAG,IAAI,CAAC4O,OAAO,CAAChR,KAAK,CAAC,GAAI,wBAAuB,IAAI,CAACoB,MAAM,CAACiP,OAAO,CAAC/H,KAAK,CAAE,GAAE,CAAC;QACnGoJ,cAAc,CAAC1R,KAAK,EAAE2P,SAAS,CAAC;MACpC,CAAC,MACI,IAAI,CAACK,QAAQ,IAAIA,QAAQ,CAAC5P,KAAK,GAAGJ,KAAK,CAACI,KAAK,EAAE;QAChD4P,QAAQ,GAAGhQ,KAAK;MACpB;IACJ;IACA,OAAOgQ,QAAQ;EACnB;EACA;EACAE,WAAWA,CAAClQ,KAAK,EAAE;IACfA,KAAK,CAAC2G,KAAK,CAAC,CAAC;IACb,OAAOhH,IAAI,CAACsS,KAAK,CAAC;MAAE5R,MAAM,EAAE0G,iBAAiB,CAACE,MAAM,CAACjH,KAAK,CAAC;MACvDwC,OAAO,EAAE,IAAI,CAACpB,MAAM,CAACoB,OAAO;MAC5B0P,KAAK,EAAE,IAAI,CAAC3C,OAAO;MACnB4C,eAAe,EAAE,IAAI,CAAC/Q,MAAM,CAACqO,YAAY;MACzCxL,MAAM,EAAE,IAAI,CAACA,MAAM;MACnB/C,KAAK,EAAE,IAAI,CAACmB,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI;MAC1B5B,MAAM,EAAEV,KAAK,CAACG,GAAG,GAAG,IAAI,CAACkC,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI;MACvC8P,aAAa,EAAE,IAAI,CAAChR,MAAM,CAACa;IAAc,CAAC,CAAC;EACnD;EACA+O,OAAOA,CAAChR,KAAK,EAAE;IACX,IAAIkH,EAAE,GAAG,CAAC+E,QAAQ,KAAKA,QAAQ,GAAG,IAAIoG,OAAO,CAAD,CAAC,CAAC,EAAEC,GAAG,CAACtS,KAAK,CAAC;IAC1D,IAAI,CAACkH,EAAE,EACH+E,QAAQ,CAAC8C,GAAG,CAAC/O,KAAK,EAAEkH,EAAE,GAAGqL,MAAM,CAACC,aAAa,CAAC,IAAI,CAACpD,WAAW,EAAE,CAAC,CAAC;IACtE,OAAOlI,EAAE,GAAGlH,KAAK;EACrB;AACJ;AACA,SAAS0R,cAAcA,CAAC1R,KAAK,EAAE2P,SAAS,EAAE;EACtC,KAAK,IAAI3O,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2O,SAAS,CAACjP,MAAM,EAAEM,CAAC,EAAE,EAAE;IACvC,IAAIgF,KAAK,GAAG2J,SAAS,CAAC3O,CAAC,CAAC;IACxB,IAAIgF,KAAK,CAAC7F,GAAG,IAAIH,KAAK,CAACG,GAAG,IAAI6F,KAAK,CAACD,SAAS,CAAC/F,KAAK,CAAC,EAAE;MAClD,IAAI2P,SAAS,CAAC3O,CAAC,CAAC,CAACZ,KAAK,GAAGJ,KAAK,CAACI,KAAK,EAChCuP,SAAS,CAAC3O,CAAC,CAAC,GAAGhB,KAAK;MACxB;IACJ;EACJ;EACA2P,SAAS,CAACnO,IAAI,CAACxB,KAAK,CAAC;AACzB;AACA,MAAMyS,OAAO,CAAC;EACV3S,WAAWA,CAAC4S,MAAM,EAAEtM,KAAK,EAAEuM,QAAQ,EAAE;IACjC,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACtM,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACuM,QAAQ,GAAGA,QAAQ;EAC5B;EACAzH,MAAMA,CAAChI,IAAI,EAAE;IAAE,OAAO,CAAC,IAAI,CAACyP,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACzP,IAAI,CAAC,IAAI,CAAC;EAAE;AACtE;AACA,MAAMgE,EAAE,GAAG0L,CAAC,IAAIA,CAAC;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACjB;EACA/S,WAAWA,CAACgT,IAAI,EAAE;IACd,IAAI,CAAC5R,KAAK,GAAG4R,IAAI,CAAC5R,KAAK;IACvB,IAAI,CAACsC,KAAK,GAAGsP,IAAI,CAACtP,KAAK,IAAI0D,EAAE;IAC7B,IAAI,CAACzF,MAAM,GAAGqR,IAAI,CAACrR,MAAM,IAAIyF,EAAE;IAC/B,IAAI,CAAC9C,KAAK,GAAG0O,IAAI,CAAC1O,KAAK,IAAI8C,EAAE;IAC7B,IAAI,CAACX,IAAI,GAAGuM,IAAI,CAACvM,IAAI,KAAK,MAAM,CAAC,CAAC;IAClC,IAAI,CAACK,MAAM,GAAGkM,IAAI,CAAClM,MAAM,KAAK,KAAK;EACvC;AACJ;AACA;AACA;AACA;AACA,MAAMmM,QAAQ,SAASzT,MAAM,CAAC;EAC1B;EACAQ,WAAWA,CAACgT,IAAI,EAAE;IACd,KAAK,CAAC,CAAC;IACP;IACA,IAAI,CAACE,QAAQ,GAAG,EAAE;IAClB,IAAIF,IAAI,CAACG,OAAO,IAAI,EAAE,CAAC,oBACnB,MAAM,IAAI1J,UAAU,CAAE,mBAAkBuJ,IAAI,CAACG,OAAQ,oCAAmC,EAAE,CAAC,kBAAmB,GAAE,CAAC;IACrH,IAAIC,SAAS,GAAGJ,IAAI,CAACI,SAAS,CAAC3O,KAAK,CAAC,GAAG,CAAC;IACzC,IAAI,CAACtC,aAAa,GAAGiR,SAAS,CAACxS,MAAM;IACrC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8R,IAAI,CAACK,eAAe,EAAEnS,CAAC,EAAE,EACzCkS,SAAS,CAAC1R,IAAI,CAAC,EAAE,CAAC;IACtB,IAAI4R,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACR,IAAI,CAACS,QAAQ,CAAC,CAACrF,GAAG,CAACpE,CAAC,IAAIgJ,IAAI,CAACS,QAAQ,CAACzJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,IAAI0J,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIxS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkS,SAAS,CAACxS,MAAM,EAAEM,CAAC,EAAE,EACrCwS,SAAS,CAAChS,IAAI,CAAC,EAAE,CAAC;IACtB,SAASiS,OAAOA,CAACC,MAAM,EAAE9F,IAAI,EAAE5J,KAAK,EAAE;MAClCwP,SAAS,CAACE,MAAM,CAAC,CAAClS,IAAI,CAAC,CAACoM,IAAI,EAAEA,IAAI,CAAC+F,WAAW,CAACpB,MAAM,CAACvO,KAAK,CAAC,CAAC,CAAC,CAAC;IACnE;IACA,IAAI8O,IAAI,CAACU,SAAS,EACd,KAAK,IAAII,QAAQ,IAAId,IAAI,CAACU,SAAS,EAAE;MACjC,IAAI5F,IAAI,GAAGgG,QAAQ,CAAC,CAAC,CAAC;MACtB,IAAI,OAAOhG,IAAI,IAAI,QAAQ,EACvBA,IAAI,GAAGrO,QAAQ,CAACqO,IAAI,CAAC;MACzB,KAAK,IAAI5M,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4S,QAAQ,CAAClT,MAAM,GAAG;QAClC,IAAI+C,IAAI,GAAGmQ,QAAQ,CAAC5S,CAAC,EAAE,CAAC;QACxB,IAAIyC,IAAI,IAAI,CAAC,EAAE;UACXgQ,OAAO,CAAChQ,IAAI,EAAEmK,IAAI,EAAEgG,QAAQ,CAAC5S,CAAC,EAAE,CAAC,CAAC;QACtC,CAAC,MACI;UACD,IAAIgD,KAAK,GAAG4P,QAAQ,CAAC5S,CAAC,GAAG,CAACyC,IAAI,CAAC;UAC/B,KAAK,IAAIoN,CAAC,GAAG,CAACpN,IAAI,EAAEoN,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAC1B4C,OAAO,CAACG,QAAQ,CAAC5S,CAAC,EAAE,CAAC,EAAE4M,IAAI,EAAE5J,KAAK,CAAC;UACvChD,CAAC,EAAE;QACP;MACJ;IACJ;IACJ,IAAI,CAACwB,OAAO,GAAG,IAAIhD,OAAO,CAAC0T,SAAS,CAAChF,GAAG,CAAC,CAAC2F,IAAI,EAAE7S,CAAC,KAAKvB,QAAQ,CAACqU,MAAM,CAAC;MAClED,IAAI,EAAE7S,CAAC,IAAI,IAAI,CAACiB,aAAa,GAAGtB,SAAS,GAAGkT,IAAI;MAChD3M,EAAE,EAAElG,CAAC;MACL+S,KAAK,EAAEP,SAAS,CAACxS,CAAC,CAAC;MACnBsC,GAAG,EAAE8P,QAAQ,CAACY,OAAO,CAAChT,CAAC,CAAC,GAAG,CAAC,CAAC;MAC7BiT,KAAK,EAAEjT,CAAC,IAAI,CAAC;MACb0J,OAAO,EAAEoI,IAAI,CAACoB,YAAY,IAAIpB,IAAI,CAACoB,YAAY,CAACF,OAAO,CAAChT,CAAC,CAAC,GAAG,CAAC;IAClE,CAAC,CAAC,CAAC,CAAC;IACJ,IAAI8R,IAAI,CAACqB,WAAW,EAChB,IAAI,CAAC3R,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC8H,MAAM,CAAC,GAAGwI,IAAI,CAACqB,WAAW,CAAC;IAC3D,IAAI,CAACvN,MAAM,GAAG,KAAK;IACnB,IAAI,CAAC6I,YAAY,GAAG/P,mBAAmB;IACvC,IAAI0U,UAAU,GAAGhN,WAAW,CAAC0L,IAAI,CAACuB,SAAS,CAAC;IAC5C,IAAI,CAAChT,OAAO,GAAGyR,IAAI,CAACzR,OAAO;IAC3B,IAAI,CAACiT,gBAAgB,GAAGxB,IAAI,CAAClE,WAAW,IAAI,EAAE;IAC9C,IAAI,CAACA,WAAW,GAAG,IAAIrH,WAAW,CAAC,IAAI,CAAC+M,gBAAgB,CAAC5T,MAAM,CAAC;IAChE,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACsT,gBAAgB,CAAC5T,MAAM,EAAEM,CAAC,EAAE,EACjD,IAAI,CAAC4N,WAAW,CAAC5N,CAAC,CAAC,GAAG,IAAI,CAACsT,gBAAgB,CAACtT,CAAC,CAAC,CAACkC,IAAI;IACvD,IAAI,CAAC2L,YAAY,GAAG,IAAI,CAACyF,gBAAgB,CAACpG,GAAG,CAACqG,cAAc,CAAC;IAC7D,IAAI,CAACC,MAAM,GAAGpN,WAAW,CAAC0L,IAAI,CAAC0B,MAAM,EAAEC,WAAW,CAAC;IACnD,IAAI,CAAC5O,IAAI,GAAGuB,WAAW,CAAC0L,IAAI,CAAC4B,SAAS,CAAC;IACvC,IAAI,CAAC5N,IAAI,GAAGM,WAAW,CAAC0L,IAAI,CAAChM,IAAI,CAAC;IAClC,IAAI,CAAC6N,OAAO,GAAG7B,IAAI,CAAC6B,OAAO;IAC3B,IAAI,CAAC1G,UAAU,GAAG6E,IAAI,CAAC7E,UAAU,CAACC,GAAG,CAAClK,KAAK,IAAI,OAAOA,KAAK,IAAI,QAAQ,GAAG,IAAIgG,UAAU,CAACoK,UAAU,EAAEpQ,KAAK,CAAC,GAAGA,KAAK,CAAC;IACpH,IAAI,CAACuP,QAAQ,GAAGT,IAAI,CAACS,QAAQ;IAC7B,IAAI,CAACqB,QAAQ,GAAG9B,IAAI,CAAC8B,QAAQ,IAAI,CAAC,CAAC;IACnC,IAAI,CAACC,kBAAkB,GAAG/B,IAAI,CAAC+B,kBAAkB,IAAI,IAAI;IACzD,IAAI,CAAC3K,cAAc,GAAG4I,IAAI,CAACgC,SAAS;IACpC,IAAI,CAACC,SAAS,GAAGjC,IAAI,CAACiC,SAAS,IAAI,IAAI;IACvC,IAAI,CAACnR,OAAO,GAAG,IAAI,CAACpB,OAAO,CAACC,KAAK,CAAC/B,MAAM,GAAG,CAAC;IAC5C,IAAI,CAACyF,OAAO,GAAG,IAAI,CAAC6O,YAAY,CAAC,CAAC;IAClC,IAAI,CAAC1R,GAAG,GAAG,IAAI,CAACiQ,QAAQ,CAACF,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3D;EACA0B,WAAWA,CAAC5N,KAAK,EAAE0F,SAAS,EAAE1K,MAAM,EAAE;IAClC,IAAI6S,KAAK,GAAG,IAAIhG,KAAK,CAAC,IAAI,EAAE7H,KAAK,EAAE0F,SAAS,EAAE1K,MAAM,CAAC;IACrD,KAAK,IAAI8S,CAAC,IAAI,IAAI,CAACnC,QAAQ,EACvBkC,KAAK,GAAGC,CAAC,CAACD,KAAK,EAAE7N,KAAK,EAAE0F,SAAS,EAAE1K,MAAM,CAAC;IAC9C,OAAO6S,KAAK;EAChB;EACA;EACAlT,OAAOA,CAAC/B,KAAK,EAAEiD,IAAI,EAAiB;IAAA,IAAfkS,KAAK,GAAA3U,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAC9B,IAAI4U,KAAK,GAAG,IAAI,CAACvO,IAAI;IACrB,IAAI5D,IAAI,IAAImS,KAAK,CAAC,CAAC,CAAC,EAChB,OAAO,CAAC,CAAC;IACb,KAAK,IAAIlV,GAAG,GAAGkV,KAAK,CAACnS,IAAI,GAAG,CAAC,CAAC,IAAI;MAC9B,IAAIoS,QAAQ,GAAGD,KAAK,CAAClV,GAAG,EAAE,CAAC;QAAEmG,IAAI,GAAGgP,QAAQ,GAAG,CAAC;MAChD,IAAI5P,MAAM,GAAG2P,KAAK,CAAClV,GAAG,EAAE,CAAC;MACzB,IAAImG,IAAI,IAAI8O,KAAK,EACb,OAAO1P,MAAM;MACjB,KAAK,IAAIvC,GAAG,GAAGhD,GAAG,IAAImV,QAAQ,IAAI,CAAC,CAAC,EAAEnV,GAAG,GAAGgD,GAAG,EAAEhD,GAAG,EAAE,EAClD,IAAIkV,KAAK,CAAClV,GAAG,CAAC,IAAIF,KAAK,EACnB,OAAOyF,MAAM;MACrB,IAAIY,IAAI,EACJ,OAAO,CAAC,CAAC;IACjB;EACJ;EACA;EACAtB,SAASA,CAAC/E,KAAK,EAAEsV,QAAQ,EAAE;IACvB,IAAI1P,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,KAAK,IAAIkJ,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAC9B,KAAK,IAAI/N,CAAC,GAAG,IAAI,CAAC+D,SAAS,CAAC9E,KAAK,EAAE8O,GAAG,GAAG,CAAC,CAAC,wBAAwB,CAAC,CAAC,wBAAwB,CAAC,EAAEtL,IAAI,GAAGzC,CAAC,IAAI,CAAC,EAAE;QAC3G,IAAI,CAACyC,IAAI,GAAGoC,IAAI,CAAC7E,CAAC,CAAC,KAAK,KAAK,CAAC,eAAe;UACzC,IAAI6E,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,gBACjByC,IAAI,GAAGoC,IAAI,CAAC7E,CAAC,GAAGgO,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAClC,IAAI6E,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,iBACtB,OAAOgO,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC,CAAC,KAEzB;QACR;QACA,IAAIyC,IAAI,IAAI8R,QAAQ,IAAI9R,IAAI,IAAI,CAAC,CAAC,gBAC9B,OAAOuL,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC;MAChC;IACJ;IACA,OAAO,CAAC;EACZ;EACA;EACA+D,SAASA,CAAC9E,KAAK,EAAEuV,IAAI,EAAE;IACnB,OAAO,IAAI,CAAChB,MAAM,CAAEvU,KAAK,GAAG,CAAC,CAAC,wBAAyBuV,IAAI,CAAC;EAChE;EACA;EACAzS,SAASA,CAAC9C,KAAK,EAAEwV,IAAI,EAAE;IACnB,OAAO,CAAC,IAAI,CAAC1Q,SAAS,CAAC9E,KAAK,EAAE,CAAC,CAAC,sBAAsB,CAAC,GAAGwV,IAAI,IAAI,CAAC;EACvE;EACA;EACAhQ,WAAWA,CAACxF,KAAK,EAAEyB,MAAM,EAAE;IACvB,IAAIA,MAAM,IAAI,IAAI,CAACqD,SAAS,CAAC9E,KAAK,EAAE,CAAC,CAAC,8BAA8B,CAAC,EACjE,OAAO,IAAI;IACf,KAAK,IAAIe,CAAC,GAAG,IAAI,CAAC+D,SAAS,CAAC9E,KAAK,EAAE,CAAC,CAAC,wBAAwB,CAAC,GAAGe,CAAC,IAAI,CAAC,EAAE;MACrE,IAAI,IAAI,CAAC6E,IAAI,CAAC7E,CAAC,CAAC,IAAI,KAAK,CAAC,eAAe;QACrC,IAAI,IAAI,CAAC6E,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,gBACtBA,CAAC,GAAGgO,IAAI,CAAC,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC,CAAC,KAE3B,OAAO,KAAK;MACpB;MACA,IAAIU,MAAM,IAAIsN,IAAI,CAAC,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC,EAChC,OAAO,IAAI;IACnB;EACJ;EACA;EACA;EACAkE,UAAUA,CAACjF,KAAK,EAAE;IACd,IAAIsF,MAAM,GAAG,EAAE;IACf,KAAK,IAAIvE,CAAC,GAAG,IAAI,CAAC+D,SAAS,CAAC9E,KAAK,EAAE,CAAC,CAAC,wBAAwB,CAAC,GAAGe,CAAC,IAAI,CAAC,EAAE;MACrE,IAAI,IAAI,CAAC6E,IAAI,CAAC7E,CAAC,CAAC,IAAI,KAAK,CAAC,eAAe;QACrC,IAAI,IAAI,CAAC6E,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,gBACtBA,CAAC,GAAGgO,IAAI,CAAC,IAAI,CAACnJ,IAAI,EAAE7E,CAAC,GAAG,CAAC,CAAC,CAAC,KAE3B;MACR;MACA,IAAI,CAAC,IAAI,CAAC6E,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC,GAAI,KAAK,CAAC,2BAA2B,EAAG,KAAK,CAAC,EAAE;QACjE,IAAIgD,KAAK,GAAG,IAAI,CAAC6B,IAAI,CAAC7E,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAACuE,MAAM,CAACF,IAAI,CAAC,CAACC,CAAC,EAAEtE,CAAC,KAAMA,CAAC,GAAG,CAAC,IAAKsE,CAAC,IAAItB,KAAK,CAAC,EAC7CuB,MAAM,CAAC/D,IAAI,CAAC,IAAI,CAACqE,IAAI,CAAC7E,CAAC,CAAC,EAAEgD,KAAK,CAAC;MACxC;IACJ;IACA,OAAOuB,MAAM;EACjB;EACA;EACA;EACA;EACAmQ,SAASA,CAACC,MAAM,EAAE;IACd;IACA;IACA,IAAIC,IAAI,GAAGvC,MAAM,CAACwC,MAAM,CAACxC,MAAM,CAACpM,MAAM,CAAC8L,QAAQ,CAAC5I,SAAS,CAAC,EAAE,IAAI,CAAC;IACjE,IAAIwL,MAAM,CAAC5B,KAAK,EACZ6B,IAAI,CAACpT,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC8H,MAAM,CAAC,GAAGqL,MAAM,CAAC5B,KAAK,CAAC;IACvD,IAAI4B,MAAM,CAACrS,GAAG,EAAE;MACZ,IAAIwS,IAAI,GAAG,IAAI,CAACvC,QAAQ,CAACoC,MAAM,CAACrS,GAAG,CAAC;MACpC,IAAI,CAACwS,IAAI,EACL,MAAM,IAAIvM,UAAU,CAAE,yBAAwBoM,MAAM,CAACrS,GAAI,EAAC,CAAC;MAC/DsS,IAAI,CAACtS,GAAG,GAAGwS,IAAI;IACnB;IACA,IAAIH,MAAM,CAAC1H,UAAU,EACjB2H,IAAI,CAAC3H,UAAU,GAAG,IAAI,CAACA,UAAU,CAACC,GAAG,CAAC6H,CAAC,IAAI;MACvC,IAAIC,KAAK,GAAGL,MAAM,CAAC1H,UAAU,CAACgI,IAAI,CAACnM,CAAC,IAAIA,CAAC,CAACxH,IAAI,IAAIyT,CAAC,CAAC;MACpD,OAAOC,KAAK,GAAGA,KAAK,CAACtN,EAAE,GAAGqN,CAAC;IAC/B,CAAC,CAAC;IACN,IAAIJ,MAAM,CAAC9G,YAAY,EAAE;MACrB+G,IAAI,CAAC/G,YAAY,GAAG,IAAI,CAACA,YAAY,CAACpK,KAAK,CAAC,CAAC;MAC7CmR,IAAI,CAACtB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACpG,GAAG,CAAC,CAAC9I,CAAC,EAAEpE,CAAC,KAAK;QACxD,IAAIgV,KAAK,GAAGL,MAAM,CAAC9G,YAAY,CAACoH,IAAI,CAACnM,CAAC,IAAIA,CAAC,CAACxH,IAAI,IAAI8C,CAAC,CAAC8Q,QAAQ,CAAC;QAC/D,IAAI,CAACF,KAAK,EACN,OAAO5Q,CAAC;QACZ,IAAI0N,IAAI,GAAGO,MAAM,CAACwC,MAAM,CAACxC,MAAM,CAACwC,MAAM,CAAC,CAAC,CAAC,EAAEzQ,CAAC,CAAC,EAAE;UAAE8Q,QAAQ,EAAEF,KAAK,CAACtN;QAAG,CAAC,CAAC;QACtEkN,IAAI,CAAC/G,YAAY,CAAC7N,CAAC,CAAC,GAAGuT,cAAc,CAACzB,IAAI,CAAC;QAC3C,OAAOA,IAAI;MACf,CAAC,CAAC;IACN;IACA,IAAI6C,MAAM,CAACQ,cAAc,EACrBP,IAAI,CAACvU,OAAO,GAAGsU,MAAM,CAACQ,cAAc;IACxC,IAAIR,MAAM,CAACxP,OAAO,EACdyP,IAAI,CAACzP,OAAO,GAAG,IAAI,CAAC6O,YAAY,CAACW,MAAM,CAACxP,OAAO,CAAC;IACpD,IAAIwP,MAAM,CAAC/O,MAAM,IAAI,IAAI,EACrBgP,IAAI,CAAChP,MAAM,GAAG+O,MAAM,CAAC/O,MAAM;IAC/B,IAAI+O,MAAM,CAACS,IAAI,EACXR,IAAI,CAAC5C,QAAQ,GAAG4C,IAAI,CAAC5C,QAAQ,CAAC/R,MAAM,CAAC0U,MAAM,CAACS,IAAI,CAAC;IACrD,IAAIT,MAAM,CAAClG,YAAY,IAAI,IAAI,EAC3BmG,IAAI,CAACnG,YAAY,GAAGkG,MAAM,CAAClG,YAAY;IAC3C,OAAOmG,IAAI;EACf;EACA;EACA;EACAS,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACrD,QAAQ,CAACtS,MAAM,GAAG,CAAC;EACnC;EACA;EACA;EACA;EACA;EACA2P,OAAOA,CAACnN,IAAI,EAAE;IACV,OAAO,IAAI,CAAC6R,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC7R,IAAI,CAAC,GAAGqP,MAAM,CAACrP,IAAI,IAAI,IAAI,CAACU,OAAO,IAAI,IAAI,CAACpB,OAAO,CAACC,KAAK,CAACS,IAAI,CAAC,CAAC2Q,IAAI,IAAI3Q,IAAI,CAAC;EACxH;EACA;EACA;EACA,IAAIwL,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC9K,OAAO,GAAG,CAAC;EAAE;EACzC;EACA,IAAI0S,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC9T,OAAO,CAACC,KAAK,CAAC,IAAI,CAACa,GAAG,CAAC,CAAC,CAAC,CAAC;EAAE;EACxD;EACAvB,iBAAiBA,CAACmB,IAAI,EAAE;IACpB,IAAIqT,IAAI,GAAG,IAAI,CAAC1B,kBAAkB;IAClC,OAAO0B,IAAI,IAAI,IAAI,GAAG,CAAC,GAAGA,IAAI,CAACrT,IAAI,CAAC,IAAI,CAAC;EAC7C;EACA;EACA8R,YAAYA,CAAC7O,OAAO,EAAE;IAClB,IAAIqQ,MAAM,GAAGnD,MAAM,CAACC,IAAI,CAAC,IAAI,CAACsB,QAAQ,CAAC;MAAExO,KAAK,GAAGoQ,MAAM,CAACtI,GAAG,CAAC,MAAM,KAAK,CAAC;IACxE,IAAI/H,OAAO,EACP,KAAK,IAAIsQ,IAAI,IAAItQ,OAAO,CAAC5B,KAAK,CAAC,GAAG,CAAC,EAAE;MACjC,IAAI2C,EAAE,GAAGsP,MAAM,CAACxC,OAAO,CAACyC,IAAI,CAAC;MAC7B,IAAIvP,EAAE,IAAI,CAAC,EACPd,KAAK,CAACc,EAAE,CAAC,GAAG,IAAI;IACxB;IACJ,IAAIyL,QAAQ,GAAG,IAAI;IACnB,KAAK,IAAI3R,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwV,MAAM,CAAC9V,MAAM,EAAEM,CAAC,EAAE,EAClC,IAAI,CAACoF,KAAK,CAACpF,CAAC,CAAC,EAAE;MACX,KAAK,IAAI6P,CAAC,GAAG,IAAI,CAAC+D,QAAQ,CAAC4B,MAAM,CAACxV,CAAC,CAAC,CAAC,EAAEkG,EAAE,EAAE,CAACA,EAAE,GAAG,IAAI,CAACrB,IAAI,CAACgL,CAAC,EAAE,CAAC,KAAK,KAAK,CAAC,gBACtE,CAAC8B,QAAQ,KAAKA,QAAQ,GAAG,IAAI+D,UAAU,CAAC,IAAI,CAAC/B,OAAO,GAAG,CAAC,CAAC,CAAC,EAAEzN,EAAE,CAAC,GAAG,CAAC;IAC3E;IACJ,OAAO,IAAIuL,OAAO,CAACtM,OAAO,EAAEC,KAAK,EAAEuM,QAAQ,CAAC;EAChD;EACA;EACA;EACA,OAAOgB,WAAWA,CAACb,IAAI,EAAE;IACrB,OAAO,IAAIC,QAAQ,CAACD,IAAI,CAAC;EAC7B;AACJ;AACA,SAAS9D,IAAIA,CAACnJ,IAAI,EAAErB,GAAG,EAAE;EAAE,OAAOqB,IAAI,CAACrB,GAAG,CAAC,GAAIqB,IAAI,CAACrB,GAAG,GAAG,CAAC,CAAC,IAAI,EAAG;AAAE;AACrE,SAASyL,YAAYA,CAACT,MAAM,EAAE;EAC1B,IAAIrK,IAAI,GAAG,IAAI;EACf,KAAK,IAAInF,KAAK,IAAIwP,MAAM,EAAE;IACtB,IAAII,OAAO,GAAG5P,KAAK,CAACD,CAAC,CAACuP,SAAS;IAC/B,IAAI,CAACtP,KAAK,CAACG,GAAG,IAAIH,KAAK,CAACD,CAAC,CAACsE,MAAM,CAAClB,GAAG,IAAIyM,OAAO,IAAI,IAAI,IAAI5P,KAAK,CAACG,GAAG,GAAGyP,OAAO,KAC1E5P,KAAK,CAACD,CAAC,CAACqB,MAAM,CAAC2B,SAAS,CAAC/C,KAAK,CAACC,KAAK,EAAE,CAAC,CAAC,yBAAyB,CAAC,KACjE,CAACkF,IAAI,IAAIA,IAAI,CAAC/E,KAAK,GAAGJ,KAAK,CAACI,KAAK,CAAC,EACnC+E,IAAI,GAAGnF,KAAK;EACpB;EACA,OAAOmF,IAAI;AACf;AACA,SAASoP,cAAcA,CAACzB,IAAI,EAAE;EAC1B,IAAIA,IAAI,CAACoD,QAAQ,EAAE;IACf,IAAInO,IAAI,GAAG+K,IAAI,CAACxI,MAAM,GAAG,CAAC,CAAC,0BAA0B,CAAC,CAAC;IACvD,OAAO,CAACtG,KAAK,EAAEhE,KAAK,KAAM8S,IAAI,CAACoD,QAAQ,CAAClS,KAAK,EAAEhE,KAAK,CAAC,IAAI,CAAC,GAAI+H,IAAI;EACtE;EACA,OAAO+K,IAAI,CAACR,GAAG;AACnB;AAEA,SAASO,cAAc,EAAElI,iBAAiB,EAAE1C,WAAW,EAAE8K,QAAQ,EAAExI,eAAe,EAAE1K,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}