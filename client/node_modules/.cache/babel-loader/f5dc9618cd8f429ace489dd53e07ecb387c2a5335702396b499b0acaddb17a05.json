{"ast":null,"code":"var _jsxFileName = \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/src/components/chatbotui.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./chatbotui.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = _ref => {\n  _s();\n  let {\n    fetchAndUpdateCode,\n    htmlCode,\n    cssCode,\n    jsCode\n  } = _ref;\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (input.trim() !== \"\") {\n      const userMessage = {\n        sender: \"user\",\n        text: input.trim()\n      }; // Add : Message here\n      setMessages([...messages, userMessage]);\n      setInput(\"\");\n      const clientCode = {\n        html: htmlCode,\n        css: cssCode,\n        js: jsCode\n      };\n      const response = await fetch(\"/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMessage.text,\n          code: clientCode\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n\n      // After the response from the server is received, add the bot's message\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"bot\",\n        text: data.message\n      }]);\n      fetchAndUpdateCode();\n    }\n  };\n\n  // You no longer need to add the bot's message in this useEffect hook\n  useEffect(() => {}, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: message.sender === \"user\" ? \"userMessage\" : \"botMessage\",\n      children: message.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: handleInputChange,\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faPaperPlane,\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"BKjx01IWf9U3K+nXc11gsN714uQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["useEffect","useState","FontAwesomeIcon","faPaperPlane","jsxDEV","_jsxDEV","Chatbot","_ref","_s","fetchAndUpdateCode","htmlCode","cssCode","jsCode","input","setInput","messages","setMessages","handleInputChange","event","target","value","handleSendMessage","trim","userMessage","sender","text","clientCode","html","css","js","response","fetch","method","headers","body","JSON","stringify","message","code","data","json","console","log","prevMessages","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","icon","size","_c","$RefreshReg$"],"sources":["/Users/adityapethe/Developer/ui-chat/ui-chat/client/src/components/chatbotui.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./chatbotui.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Message {\n  sender: \"user\" | \"bot\";\n  text: string;\n}\n\ninterface ChatbotUIProps {\n  fetchAndUpdateCode: () => void;\n  htmlCode: string;\n  cssCode: string;\n  jsCode: string;\n}\n\nconst Chatbot: React.FC<ChatbotUIProps> = ({ fetchAndUpdateCode, htmlCode, cssCode, jsCode }) => {\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInput(event.target.value);\n  };\n\n  const handleSendMessage = async () => {\n    if (input.trim() !== \"\") {\n      const userMessage: Message = { sender: \"user\", text: input.trim() }; // Add : Message here\n      setMessages([...messages, userMessage]);\n      setInput(\"\");\n\n      const clientCode = {html:htmlCode, css:cssCode, js:jsCode};\n\n      const response = await fetch(\"/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ message: userMessage.text, code: clientCode}),\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      // After the response from the server is received, add the bot's message\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"bot\", text: data.message } as Message,\n      ]);\n\n      fetchAndUpdateCode();\n    }\n  };\n\n  // You no longer need to add the bot's message in this useEffect hook\n  useEffect(() => {}, [messages]);\n\n  return (\n    <div className=\"chatbot-container\">\n      {messages.map((message, index) => (\n        <div\n          key={index}\n          className={message.sender === \"user\" ? \"userMessage\" : \"botMessage\"}\n        >\n          {message.text}\n        </div>\n      ))}\n      <div className=\"input-area\">\n        <textarea\n          value={input}\n          onChange={handleInputChange}\n          className=\"input-field\"\n        />\n        <button onClick={handleSendMessage}>\n          <FontAwesomeIcon icon={faPaperPlane} size=\"lg\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}