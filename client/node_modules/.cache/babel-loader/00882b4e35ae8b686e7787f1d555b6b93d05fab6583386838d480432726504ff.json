{"ast":null,"code":"var _jsxFileName = \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/src/components/chatbotui.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./chatbotui.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = _ref => {\n  _s();\n  let {\n    fetchAndUpdateCode,\n    htmlCode,\n    cssCode,\n    jsCode\n  } = _ref;\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [apiKey, setApiKey] = useState(\"\");\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n\n  // Add a function to handle changes to the API key input\n  const handleApiKeyChange = event => {\n    setApiKey(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (input.trim() !== \"\") {\n      const userMessage = {\n        sender: \"user\",\n        text: input.trim()\n      }; // Add : Message here\n      setMessages([...messages, userMessage]);\n      setInput(\"\");\n      setIsLoading(true);\n      const clientCode = {\n        html: htmlCode,\n        css: cssCode,\n        js: jsCode\n      };\n      const startTime = Date.now();\n      const response = await fetch(\"/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMessage.text,\n          code: clientCode\n        })\n      });\n      const endTime = Date.now();\n      const data = await response.json();\n      console.log(data.message);\n      const timeElapsed = (endTime - startTime) / 1000;\n      const newMessage = `${data.message}. Time elapsed: ${timeElapsed} seconds`;\n\n      // After the response from the server is received, add the bot's message\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"bot\",\n        text: newMessage\n      }]);\n      fetchAndUpdateCode();\n      setIsLoading(false);\n    }\n  };\n\n  // You no longer need to add the bot's message in this useEffect hook\n  useEffect(() => {}, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: message.sender === \"user\" ? \"userMessage\" : \"botMessage\",\n      children: message.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: handleInputChange,\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faPaperPlane,\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: apiKey,\n        onChange: handleApiKeyChange,\n        className: \"api-key-field\",\n        placeholder: \"Enter OpenAI API key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"Geo3K5vnGg4kYrM2Q8kEmWWc5Cc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["useEffect","useState","FontAwesomeIcon","faPaperPlane","jsxDEV","_jsxDEV","Chatbot","_ref","_s","fetchAndUpdateCode","htmlCode","cssCode","jsCode","input","setInput","messages","setMessages","isLoading","setIsLoading","apiKey","setApiKey","handleInputChange","event","target","value","handleApiKeyChange","handleSendMessage","trim","userMessage","sender","text","clientCode","html","css","js","startTime","Date","now","response","fetch","method","headers","body","JSON","stringify","message","code","endTime","data","json","console","log","timeElapsed","newMessage","prevMessages","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","icon","size","type","placeholder","_c","$RefreshReg$"],"sources":["/Users/adityapethe/Developer/ui-chat/ui-chat/client/src/components/chatbotui.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./chatbotui.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Message {\n  sender: \"user\" | \"bot\";\n  text: string;\n}\n\ninterface ChatbotUIProps {\n  fetchAndUpdateCode: () => void;\n  htmlCode: string;\n  cssCode: string;\n  jsCode: string;\n}\n\nconst Chatbot: React.FC<ChatbotUIProps> = ({\n  fetchAndUpdateCode,\n  htmlCode,\n  cssCode,\n  jsCode,\n}) => {\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [apiKey, setApiKey] = useState(\"\");\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInput(event.target.value);\n  };\n\n  // Add a function to handle changes to the API key input\n  const handleApiKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setApiKey(event.target.value);\n  };\n\n  const handleSendMessage = async () => {\n    if (input.trim() !== \"\") {\n      const userMessage: Message = { sender: \"user\", text: input.trim() }; // Add : Message here\n      setMessages([...messages, userMessage]);\n      setInput(\"\");\n      setIsLoading(true);\n\n      const clientCode = { html: htmlCode, css: cssCode, js: jsCode };\n      const startTime = Date.now();\n\n      const response = await fetch(\"/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ message: userMessage.text, code: clientCode }),\n      });\n\n      const endTime = Date.now();\n\n      const data = await response.json();\n      console.log(data.message);\n\n      const timeElapsed = (endTime - startTime) / 1000;\n      const newMessage = `${data.message}. Time elapsed: ${timeElapsed} seconds`;\n\n      // After the response from the server is received, add the bot's message\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"bot\", text: newMessage } as Message,\n      ]);\n\n      fetchAndUpdateCode();\n      setIsLoading(false);\n    }\n  };\n\n  // You no longer need to add the bot's message in this useEffect hook\n  useEffect(() => {}, [messages]);\n\n  return (\n    <div className=\"chatbot-container\">\n      {messages.map((message, index) => (\n        <div\n          key={index}\n          className={message.sender === \"user\" ? \"userMessage\" : \"botMessage\"}\n        >\n          {message.text}\n        </div>\n      ))}\n      {isLoading && <div className=\"loading\"></div>}\n      <div className=\"message-input-container\">\n        <textarea\n          value={input}\n          onChange={handleInputChange}\n          className=\"input-field\"\n        />\n        <button onClick={handleSendMessage}>\n          <FontAwesomeIcon icon={faPaperPlane} size=\"lg\" />\n        </button>\n        <input\n        type=\"password\"\n        value={apiKey}\n        onChange={handleApiKeyChange}\n        className=\"api-key-field\"\n        placeholder=\"Enter OpenAI API key\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}