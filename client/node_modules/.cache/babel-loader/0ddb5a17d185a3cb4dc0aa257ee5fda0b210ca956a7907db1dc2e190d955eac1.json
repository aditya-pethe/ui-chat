{"ast":null,"code":"import _toConsumableArray from \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _inherits from \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nvar Stack = /*#__PURE__*/function () {\n  /// @internal\n  function Stack(\n  /// The parse that this stack is part of @internal\n  p,\n  /// Holds state, input pos, buffer index triplets for all but the\n  /// top state @internal\n  stack,\n  /// The current parse state @internal\n  state,\n  // The position at which the next reduce should take place. This\n  // can be less than `this.pos` when skipped expressions have been\n  // added to the stack (which should be moved outside of the next\n  // reduction)\n  /// @internal\n  reducePos,\n  /// The input position up to which this stack has parsed.\n  pos,\n  /// The dynamic score of the stack, including dynamic precedence\n  /// and error-recovery penalties\n  /// @internal\n  score,\n  // The output buffer. Holds (type, start, end, size) quads\n  // representing nodes created by the parser, where `size` is\n  // amount of buffer array entries covered by this node.\n  /// @internal\n  buffer,\n  // The base offset of the buffer. When stacks are split, the split\n  // instance shared the buffer history with its parent up to\n  // `bufferBase`, which is the absolute offset (including the\n  // offset of previous splits) into the buffer at which this stack\n  // starts writing.\n  /// @internal\n  bufferBase,\n  /// @internal\n  curContext) {\n    var lookAhead = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    var\n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent = arguments.length > 10 ? arguments[10] : undefined;\n    _classCallCheck(this, Stack);\n    this.p = p;\n    this.stack = stack;\n    this.state = state;\n    this.reducePos = reducePos;\n    this.pos = pos;\n    this.score = score;\n    this.buffer = buffer;\n    this.bufferBase = bufferBase;\n    this.curContext = curContext;\n    this.lookAhead = lookAhead;\n    this.parent = parent;\n  }\n  /// @internal\n  _createClass(Stack, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"[\".concat(this.stack.filter(function (_, i) {\n        return i % 3 == 0;\n      }).concat(this.state), \"]@\").concat(this.pos).concat(this.score ? \"!\" + this.score : \"\");\n    }\n    // Start an empty stack\n    /// @internal\n  }, {\n    key: \"context\",\n    get:\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    function get() {\n      return this.curContext ? this.curContext.context : null;\n    }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n  }, {\n    key: \"pushState\",\n    value: function pushState(state, start) {\n      this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n      this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n  }, {\n    key: \"reduce\",\n    value: function reduce(action) {\n      var _a;\n      var depth = action >> 19 /* Action.ReduceDepthShift */,\n        type = action & 65535 /* Action.ValueMask */;\n      var parser = this.p.parser;\n      var dPrec = parser.dynamicPrecedence(type);\n      if (dPrec) this.score += dPrec;\n      if (depth == 0) {\n        this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n        // Zero-depth reductions are a special caseâ€”they add stuff to\n        // the stack without popping anything off.\n        if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n        this.reduceContext(type, this.reducePos);\n        return;\n      }\n      // Find the base index into `this.stack`, content after which will\n      // be dropped. Note that with `StayFlag` reductions we need to\n      // consume two extra frames (the dummy parent node for the skipped\n      // expression and the state that we'll be staying in, which should\n      // be moved to `this.state`).\n      var base = this.stack.length - (depth - 1) * 3 - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n      var start = base ? this.stack[base - 2] : this.p.ranges[0].from,\n        size = this.reducePos - start;\n      // This is a kludge to try and detect overly deep left-associative\n      // trees, which will not increase the parse stack depth and thus\n      // won't be caught by the regular stack-depth limit check.\n      if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n        if (start == this.p.lastBigReductionStart) {\n          this.p.bigReductionCount++;\n          this.p.lastBigReductionSize = size;\n        } else if (this.p.lastBigReductionSize < size) {\n          this.p.bigReductionCount = 1;\n          this.p.lastBigReductionStart = start;\n          this.p.lastBigReductionSize = size;\n        }\n      }\n      var bufferBase = base ? this.stack[base - 1] : 0,\n        count = this.bufferBase + this.buffer.length - bufferBase;\n      // Store normal terms or `R -> R R` repeat reductions\n      if (type < parser.minRepeatTerm || action & 131072 /* Action.RepeatFlag */) {\n        var pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n        this.storeNode(type, start, pos, count + 4, true);\n      }\n      if (action & 262144 /* Action.StayFlag */) {\n        this.state = this.stack[base];\n      } else {\n        var baseStateID = this.stack[base - 3];\n        this.state = parser.getGoto(baseStateID, type, true);\n      }\n      while (this.stack.length > base) this.stack.pop();\n      this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n  }, {\n    key: \"storeNode\",\n    value: function storeNode(term, start, end) {\n      var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n      var isReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (term == 0 /* Term.Err */ && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n        // Try to omit/merge adjacent error nodes\n        var cur = this,\n          top = this.buffer.length;\n        if (top == 0 && cur.parent) {\n          top = cur.bufferBase - cur.parent.bufferBase;\n          cur = cur.parent;\n        }\n        if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n          if (start == end) return;\n          if (cur.buffer[top - 2] >= start) {\n            cur.buffer[top - 2] = end;\n            return;\n          }\n        }\n      }\n      if (!isReduce || this.pos == end) {\n        // Simple case, just append\n        this.buffer.push(term, start, end, size);\n      } else {\n        // There may be skipped nodes that have to be moved forward\n        var index = this.buffer.length;\n        if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) while (index > 0 && this.buffer[index - 2] > end) {\n          // Move this record forward\n          this.buffer[index] = this.buffer[index - 4];\n          this.buffer[index + 1] = this.buffer[index - 3];\n          this.buffer[index + 2] = this.buffer[index - 2];\n          this.buffer[index + 3] = this.buffer[index - 1];\n          index -= 4;\n          if (size > 4) size -= 4;\n        }\n        this.buffer[index] = term;\n        this.buffer[index + 1] = start;\n        this.buffer[index + 2] = end;\n        this.buffer[index + 3] = size;\n      }\n    }\n    // Apply a shift action\n    /// @internal\n  }, {\n    key: \"shift\",\n    value: function shift(action, next, nextEnd) {\n      var start = this.pos;\n      if (action & 131072 /* Action.GotoFlag */) {\n        this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n      } else if ((action & 262144 /* Action.StayFlag */) == 0) {\n        // Regular shift\n        var nextState = action,\n          parser = this.p.parser;\n        if (nextEnd > this.pos || next <= parser.maxNode) {\n          this.pos = nextEnd;\n          if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */)) this.reducePos = nextEnd;\n        }\n        this.pushState(nextState, start);\n        this.shiftContext(next, start);\n        if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n      } else {\n        // Shift-and-stay, which means this is a skipped token\n        this.pos = nextEnd;\n        this.shiftContext(next, start);\n        if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n      }\n    }\n    // Apply an action\n    /// @internal\n  }, {\n    key: \"apply\",\n    value: function apply(action, next, nextEnd) {\n      if (action & 65536 /* Action.ReduceFlag */) this.reduce(action);else this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n  }, {\n    key: \"useNode\",\n    value: function useNode(value, next) {\n      var index = this.p.reused.length - 1;\n      if (index < 0 || this.p.reused[index] != value) {\n        this.p.reused.push(value);\n        index++;\n      }\n      var start = this.pos;\n      this.reducePos = this.pos = start + value.length;\n      this.pushState(next, start);\n      this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n      if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n  }, {\n    key: \"split\",\n    value: function split() {\n      var parent = this;\n      var off = parent.buffer.length;\n      // Because the top of the buffer (after this.pos) may be mutated\n      // to reorder reductions and skipped tokens, and shared buffers\n      // should be immutable, this copies any outstanding skipped tokens\n      // to the new buffer, and puts the base pointer before them.\n      while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;\n      var buffer = parent.buffer.slice(off),\n        base = parent.bufferBase + off;\n      // Make sure parent points to an actual parent with content, if there is such a parent.\n      while (parent && base == parent.bufferBase) parent = parent.parent;\n      return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n  }, {\n    key: \"recoverByDelete\",\n    value: function recoverByDelete(next, nextEnd) {\n      var isNode = next <= this.p.parser.maxNode;\n      if (isNode) this.storeNode(next, this.pos, nextEnd, 4);\n      this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n      this.pos = this.reducePos = nextEnd;\n      this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n  }, {\n    key: \"canShift\",\n    value: function canShift(term) {\n      for (var sim = new SimulatedStack(this);;) {\n        var action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n        if (action == 0) return false;\n        if ((action & 65536 /* Action.ReduceFlag */) == 0) return true;\n        sim.reduce(action);\n      }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n  }, {\n    key: \"recoverByInsert\",\n    value: function recoverByInsert(next) {\n      if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */) return [];\n      var nextStates = this.p.parser.nextStates(this.state);\n      if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n        var best = [];\n        for (var i = 0, s; i < nextStates.length; i += 2) {\n          if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);\n        }\n        if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */) {\n          var _loop = function _loop() {\n            var s = nextStates[_i + 1];\n            if (!best.some(function (v, i) {\n              return i & 1 && v == s;\n            })) best.push(nextStates[_i], s);\n          };\n          for (var _i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && _i < nextStates.length; _i += 2) {\n            _loop();\n          }\n        }\n        nextStates = best;\n      }\n      var result = [];\n      for (var _i2 = 0; _i2 < nextStates.length && result.length < 4 /* Recover.MaxNext */; _i2 += 2) {\n        var _s = nextStates[_i2 + 1];\n        if (_s == this.state) continue;\n        var stack = this.split();\n        stack.pushState(_s, this.pos);\n        stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n        stack.shiftContext(nextStates[_i2], this.pos);\n        stack.score -= 200 /* Recover.Insert */;\n        result.push(stack);\n      }\n      return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n  }, {\n    key: \"forceReduce\",\n    value: function forceReduce() {\n      var reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n      if ((reduce & 65536 /* Action.ReduceFlag */) == 0) return false;\n      var parser = this.p.parser;\n      if (!parser.validAction(this.state, reduce)) {\n        var depth = reduce >> 19 /* Action.ReduceDepthShift */,\n          term = reduce & 65535 /* Action.ValueMask */;\n        var target = this.stack.length - depth * 3;\n        if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;\n        this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n        this.score -= 100 /* Recover.Reduce */;\n      }\n\n      this.reducePos = this.pos;\n      this.reduce(reduce);\n      return true;\n    }\n    /// @internal\n  }, {\n    key: \"forceAll\",\n    value: function forceAll() {\n      while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n        if (!this.forceReduce()) {\n          this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n          break;\n        }\n      }\n      return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n  }, {\n    key: \"deadEnd\",\n    get: function get() {\n      if (this.stack.length != 3) return false;\n      var parser = this.p.parser;\n      return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ && !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.state = this.stack[0];\n      this.stack.length = 0;\n    }\n    /// @internal\n  }, {\n    key: \"sameState\",\n    value: function sameState(other) {\n      if (this.state != other.state || this.stack.length != other.stack.length) return false;\n      for (var i = 0; i < this.stack.length; i += 3) if (this.stack[i] != other.stack[i]) return false;\n      return true;\n    }\n    /// Get the parser used by this stack.\n  }, {\n    key: \"parser\",\n    get: function get() {\n      return this.p.parser;\n    }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n  }, {\n    key: \"dialectEnabled\",\n    value: function dialectEnabled(dialectID) {\n      return this.p.parser.dialect.flags[dialectID];\n    }\n  }, {\n    key: \"shiftContext\",\n    value: function shiftContext(term, start) {\n      if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n  }, {\n    key: \"reduceContext\",\n    value: function reduceContext(term, start) {\n      if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n  }, {\n    key: \"emitContext\",\n    value: function emitContext() {\n      var last = this.buffer.length - 1;\n      if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n  }, {\n    key: \"emitLookAhead\",\n    value: function emitLookAhead() {\n      var last = this.buffer.length - 1;\n      if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(context) {\n      if (context != this.curContext.context) {\n        var newCx = new StackContext(this.curContext.tracker, context);\n        if (newCx.hash != this.curContext.hash) this.emitContext();\n        this.curContext = newCx;\n      }\n    }\n    /// @internal\n  }, {\n    key: \"setLookAhead\",\n    value: function setLookAhead(lookAhead) {\n      if (lookAhead > this.lookAhead) {\n        this.emitLookAhead();\n        this.lookAhead = lookAhead;\n      }\n    }\n    /// @internal\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.curContext && this.curContext.tracker.strict) this.emitContext();\n      if (this.lookAhead > 0) this.emitLookAhead();\n    }\n  }], [{\n    key: \"start\",\n    value: function start(p, state) {\n      var pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var cx = p.parser.context;\n      return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n  }]);\n  return Stack;\n}();\nvar StackContext = /*#__PURE__*/_createClass(function StackContext(tracker, context) {\n  _classCallCheck(this, StackContext);\n  this.tracker = tracker;\n  this.context = context;\n  this.hash = tracker.strict ? tracker.hash(context) : 0;\n});\nvar Recover;\n(function (Recover) {\n  Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n  Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n  Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n  Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n  Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n  Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n  Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nvar SimulatedStack = /*#__PURE__*/function () {\n  function SimulatedStack(start) {\n    _classCallCheck(this, SimulatedStack);\n    this.start = start;\n    this.state = start.state;\n    this.stack = start.stack;\n    this.base = this.stack.length;\n  }\n  _createClass(SimulatedStack, [{\n    key: \"reduce\",\n    value: function reduce(action) {\n      var term = action & 65535 /* Action.ValueMask */,\n        depth = action >> 19 /* Action.ReduceDepthShift */;\n      if (depth == 0) {\n        if (this.stack == this.start.stack) this.stack = this.stack.slice();\n        this.stack.push(this.state, 0, 0);\n        this.base += 3;\n      } else {\n        this.base -= (depth - 1) * 3;\n      }\n      var goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n      this.state = goto;\n    }\n  }]);\n  return SimulatedStack;\n}(); // This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nvar StackBufferCursor = /*#__PURE__*/function () {\n  function StackBufferCursor(stack, pos, index) {\n    _classCallCheck(this, StackBufferCursor);\n    this.stack = stack;\n    this.pos = pos;\n    this.index = index;\n    this.buffer = stack.buffer;\n    if (this.index == 0) this.maybeNext();\n  }\n  _createClass(StackBufferCursor, [{\n    key: \"maybeNext\",\n    value: function maybeNext() {\n      var next = this.stack.parent;\n      if (next != null) {\n        this.index = this.stack.bufferBase - next.bufferBase;\n        this.stack = next;\n        this.buffer = next.buffer;\n      }\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.buffer[this.index - 4];\n    }\n  }, {\n    key: \"start\",\n    get: function get() {\n      return this.buffer[this.index - 3];\n    }\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.buffer[this.index - 2];\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.buffer[this.index - 1];\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.index -= 4;\n      this.pos -= 4;\n      if (this.index == 0) this.maybeNext();\n    }\n  }, {\n    key: \"fork\",\n    value: function fork() {\n      return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(stack) {\n      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.bufferBase + stack.buffer.length;\n      return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n  }]);\n  return StackBufferCursor;\n}(); // See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input) {\n  var Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;\n  if (typeof input != \"string\") return input;\n  var array = null;\n  for (var pos = 0, out = 0; pos < input.length;) {\n    var value = 0;\n    for (;;) {\n      var next = input.charCodeAt(pos++),\n        stop = false;\n      if (next == 126 /* Encode.BigValCode */) {\n        value = 65535 /* Encode.BigVal */;\n        break;\n      }\n      if (next >= 92 /* Encode.Gap2 */) next--;\n      if (next >= 34 /* Encode.Gap1 */) next--;\n      var digit = next - 32 /* Encode.Start */;\n      if (digit >= 46 /* Encode.Base */) {\n        digit -= 46 /* Encode.Base */;\n        stop = true;\n      }\n      value += digit;\n      if (stop) break;\n      value *= 46 /* Encode.Base */;\n    }\n\n    if (array) array[out++] = value;else array = new Type(value);\n  }\n  return array;\n}\nvar CachedToken = /*#__PURE__*/_createClass(function CachedToken() {\n  _classCallCheck(this, CachedToken);\n  this.start = -1;\n  this.value = -1;\n  this.end = -1;\n  this.extended = -1;\n  this.lookAhead = 0;\n  this.mask = 0;\n  this.context = 0;\n});\nvar nullToken = new CachedToken();\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nvar InputStream = /*#__PURE__*/function () {\n  /// @internal\n  function InputStream(\n  /// @internal\n  input,\n  /// @internal\n  ranges) {\n    _classCallCheck(this, InputStream);\n    this.input = input;\n    this.ranges = ranges;\n    /// @internal\n    this.chunk = \"\";\n    /// @internal\n    this.chunkOff = 0;\n    /// Backup chunk\n    this.chunk2 = \"\";\n    this.chunk2Pos = 0;\n    /// The character code of the next code unit in the input, or -1\n    /// when the stream is at the end of the input.\n    this.next = -1;\n    /// @internal\n    this.token = nullToken;\n    this.rangeIndex = 0;\n    this.pos = this.chunkPos = ranges[0].from;\n    this.range = ranges[0];\n    this.end = ranges[ranges.length - 1].to;\n    this.readNext();\n  }\n  /// @internal\n  _createClass(InputStream, [{\n    key: \"resolveOffset\",\n    value: function resolveOffset(offset, assoc) {\n      var range = this.range,\n        index = this.rangeIndex;\n      var pos = this.pos + offset;\n      while (pos < range.from) {\n        if (!index) return null;\n        var next = this.ranges[--index];\n        pos -= range.from - next.to;\n        range = next;\n      }\n      while (assoc < 0 ? pos > range.to : pos >= range.to) {\n        if (index == this.ranges.length - 1) return null;\n        var _next = this.ranges[++index];\n        pos += _next.from - range.to;\n        range = _next;\n      }\n      return pos;\n    }\n    /// @internal\n  }, {\n    key: \"clipPos\",\n    value: function clipPos(pos) {\n      if (pos >= this.range.from && pos < this.range.to) return pos;\n      var _iterator = _createForOfIteratorHelper(this.ranges),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var range = _step.value;\n          if (range.to > pos) return Math.max(pos, range.from);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n  }, {\n    key: \"peek\",\n    value: function peek(offset) {\n      var idx = this.chunkOff + offset,\n        pos,\n        result;\n      if (idx >= 0 && idx < this.chunk.length) {\n        pos = this.pos + offset;\n        result = this.chunk.charCodeAt(idx);\n      } else {\n        var resolved = this.resolveOffset(offset, 1);\n        if (resolved == null) return -1;\n        pos = resolved;\n        if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n          result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n        } else {\n          var i = this.rangeIndex,\n            range = this.range;\n          while (range.to <= pos) range = this.ranges[++i];\n          this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n          if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);\n          result = this.chunk2.charCodeAt(0);\n        }\n      }\n      if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;\n      return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n  }, {\n    key: \"acceptToken\",\n    value: function acceptToken(token) {\n      var endOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n      if (end == null || end < this.token.start) throw new RangeError(\"Token end out of bounds\");\n      this.token.value = token;\n      this.token.end = end;\n    }\n  }, {\n    key: \"getChunk\",\n    value: function getChunk() {\n      if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n        var chunk = this.chunk,\n          chunkPos = this.chunkPos;\n        this.chunk = this.chunk2;\n        this.chunkPos = this.chunk2Pos;\n        this.chunk2 = chunk;\n        this.chunk2Pos = chunkPos;\n        this.chunkOff = this.pos - this.chunkPos;\n      } else {\n        this.chunk2 = this.chunk;\n        this.chunk2Pos = this.chunkPos;\n        var nextChunk = this.input.chunk(this.pos);\n        var end = this.pos + nextChunk.length;\n        this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n        this.chunkPos = this.pos;\n        this.chunkOff = 0;\n      }\n    }\n  }, {\n    key: \"readNext\",\n    value: function readNext() {\n      if (this.chunkOff >= this.chunk.length) {\n        this.getChunk();\n        if (this.chunkOff == this.chunk.length) return this.next = -1;\n      }\n      return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n  }, {\n    key: \"advance\",\n    value: function advance() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.chunkOff += n;\n      while (this.pos + n >= this.range.to) {\n        if (this.rangeIndex == this.ranges.length - 1) return this.setDone();\n        n -= this.range.to - this.pos;\n        this.range = this.ranges[++this.rangeIndex];\n        this.pos = this.range.from;\n      }\n      this.pos += n;\n      if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;\n      return this.readNext();\n    }\n  }, {\n    key: \"setDone\",\n    value: function setDone() {\n      this.pos = this.chunkPos = this.end;\n      this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n      this.chunk = \"\";\n      return this.next = -1;\n    }\n    /// @internal\n  }, {\n    key: \"reset\",\n    value: function reset(pos, token) {\n      if (token) {\n        this.token = token;\n        token.start = pos;\n        token.lookAhead = pos + 1;\n        token.value = token.extended = -1;\n      } else {\n        this.token = nullToken;\n      }\n      if (this.pos != pos) {\n        this.pos = pos;\n        if (pos == this.end) {\n          this.setDone();\n          return this;\n        }\n        while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];\n        while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];\n        if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n          this.chunkOff = pos - this.chunkPos;\n        } else {\n          this.chunk = \"\";\n          this.chunkOff = 0;\n        }\n        this.readNext();\n      }\n      return this;\n    }\n    /// @internal\n  }, {\n    key: \"read\",\n    value: function read(from, to) {\n      if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n      if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length) return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n      if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);\n      var result = \"\";\n      var _iterator2 = _createForOfIteratorHelper(this.ranges),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var r = _step2.value;\n          if (r.from >= to) break;\n          if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return result;\n    }\n  }]);\n  return InputStream;\n}(); /// @internal\nvar TokenGroup = /*#__PURE__*/function () {\n  function TokenGroup(data, id) {\n    _classCallCheck(this, TokenGroup);\n    this.data = data;\n    this.id = id;\n  }\n  _createClass(TokenGroup, [{\n    key: \"token\",\n    value: function token(input, stack) {\n      var parser = stack.p.parser;\n      readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n  }]);\n  return TokenGroup;\n}();\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nvar LocalTokenGroup = /*#__PURE__*/function () {\n  function LocalTokenGroup(data, precTable, elseToken) {\n    _classCallCheck(this, LocalTokenGroup);\n    this.precTable = precTable;\n    this.elseToken = elseToken;\n    this.data = typeof data == \"string\" ? decodeArray(data) : data;\n  }\n  _createClass(LocalTokenGroup, [{\n    key: \"token\",\n    value: function token(input, stack) {\n      var start = input.pos,\n        skipped = 0;\n      for (;;) {\n        readToken(this.data, input, stack, 0, this.data, this.precTable);\n        if (input.token.value > -1) break;\n        if (this.elseToken == null) return;\n        if (input.next < 0) break;\n        input.advance();\n        input.reset(input.pos, input.token);\n        skipped++;\n      }\n      if (skipped) {\n        input.reset(start, input.token);\n        input.acceptToken(this.elseToken, skipped);\n      }\n    }\n  }]);\n  return LocalTokenGroup;\n}();\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nvar ExternalTokenizer = /*#__PURE__*/_createClass(\n/// Create a tokenizer. The first argument is the function that,\n/// given an input stream, scans for the types of tokens it\n/// recognizes at the stream's position, and calls\n/// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n/// one.\nfunction ExternalTokenizer(\n/// @internal\ntoken) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  _classCallCheck(this, ExternalTokenizer);\n  this.token = token;\n  this.contextual = !!options.contextual;\n  this.fallback = !!options.fallback;\n  this.extend = !!options.extend;\n}); // Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n  var state = 0,\n    groupMask = 1 << group,\n    dialect = stack.p.parser.dialect;\n  scan: for (;;) {\n    if ((groupMask & data[state]) == 0) break;\n    var accEnd = data[state + 1];\n    // Check whether this state can lead to a token in the current group\n    // Accept tokens in this state, possibly overwriting\n    // lower-precedence / shorter tokens\n    for (var i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {\n      var term = data[i];\n      if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {\n        input.acceptToken(term);\n        break;\n      }\n    }\n    var next = input.next,\n      low = 0,\n      high = data[state + 2];\n    // Special case for EOF\n    if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n      state = data[accEnd + high * 3 - 1];\n      continue scan;\n    }\n    // Do a binary search on the state's edges\n    for (; low < high;) {\n      var mid = low + high >> 1;\n      var index = accEnd + mid + (mid << 1);\n      var from = data[index],\n        to = data[index + 1] || 0x10000;\n      if (next < from) high = mid;else if (next >= to) low = mid + 1;else {\n        state = data[index + 2];\n        input.advance();\n        continue scan;\n      }\n    }\n    break;\n  }\n}\nfunction findOffset(data, start, term) {\n  for (var i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++) if (next == term) return i - start;\n  return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n  var iPrev = findOffset(tableData, tableOffset, prev);\n  return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nvar verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nvar stackIDs = null;\nvar Safety;\n(function (Safety) {\n  Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n  var cursor = tree.cursor(IterMode.IncludeAnonymous);\n  cursor.moveTo(pos);\n  for (;;) {\n    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {\n      if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;\n      if (!cursor.parent()) return side < 0 ? 0 : tree.length;\n    }\n  }\n}\nvar FragmentCursor = /*#__PURE__*/function () {\n  function FragmentCursor(fragments, nodeSet) {\n    _classCallCheck(this, FragmentCursor);\n    this.fragments = fragments;\n    this.nodeSet = nodeSet;\n    this.i = 0;\n    this.fragment = null;\n    this.safeFrom = -1;\n    this.safeTo = -1;\n    this.trees = [];\n    this.start = [];\n    this.index = [];\n    this.nextFragment();\n  }\n  _createClass(FragmentCursor, [{\n    key: \"nextFragment\",\n    value: function nextFragment() {\n      var fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n      if (fr) {\n        this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n        this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n        while (this.trees.length) {\n          this.trees.pop();\n          this.start.pop();\n          this.index.pop();\n        }\n        this.trees.push(fr.tree);\n        this.start.push(-fr.offset);\n        this.index.push(0);\n        this.nextStart = this.safeFrom;\n      } else {\n        this.nextStart = 1e9;\n      }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n  }, {\n    key: \"nodeAt\",\n    value: function nodeAt(pos) {\n      if (pos < this.nextStart) return null;\n      while (this.fragment && this.safeTo <= pos) this.nextFragment();\n      if (!this.fragment) return null;\n      for (;;) {\n        var last = this.trees.length - 1;\n        if (last < 0) {\n          // End of tree\n          this.nextFragment();\n          return null;\n        }\n        var top = this.trees[last],\n          index = this.index[last];\n        if (index == top.children.length) {\n          this.trees.pop();\n          this.start.pop();\n          this.index.pop();\n          continue;\n        }\n        var next = top.children[index];\n        var start = this.start[last] + top.positions[index];\n        if (start > pos) {\n          this.nextStart = start;\n          return null;\n        }\n        if (next instanceof Tree) {\n          if (start == pos) {\n            if (start < this.safeFrom) return null;\n            var end = start + next.length;\n            if (end <= this.safeTo) {\n              var lookAhead = next.prop(NodeProp.lookAhead);\n              if (!lookAhead || end + lookAhead < this.fragment.to) return next;\n            }\n          }\n          this.index[last]++;\n          if (start + next.length >= Math.max(this.safeFrom, pos)) {\n            // Enter this node\n            this.trees.push(next);\n            this.start.push(start);\n            this.index.push(0);\n          }\n        } else {\n          this.index[last]++;\n          this.nextStart = start + next.length;\n        }\n      }\n    }\n  }]);\n  return FragmentCursor;\n}();\nvar TokenCache = /*#__PURE__*/function () {\n  function TokenCache(parser, stream) {\n    _classCallCheck(this, TokenCache);\n    this.stream = stream;\n    this.tokens = [];\n    this.mainToken = null;\n    this.actions = [];\n    this.tokens = parser.tokenizers.map(function (_) {\n      return new CachedToken();\n    });\n  }\n  _createClass(TokenCache, [{\n    key: \"getActions\",\n    value: function getActions(stack) {\n      var actionIndex = 0;\n      var main = null;\n      var parser = stack.p.parser,\n        tokenizers = parser.tokenizers;\n      var mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n      var context = stack.curContext ? stack.curContext.hash : 0;\n      var lookAhead = 0;\n      for (var i = 0; i < tokenizers.length; i++) {\n        if ((1 << i & mask) == 0) continue;\n        var tokenizer = tokenizers[i],\n          token = this.tokens[i];\n        if (main && !tokenizer.fallback) continue;\n        if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n          this.updateCachedToken(token, tokenizer, stack);\n          token.mask = mask;\n          token.context = context;\n        }\n        if (token.lookAhead > token.end + 25 /* Safety.Margin */) lookAhead = Math.max(token.lookAhead, lookAhead);\n        if (token.value != 0 /* Term.Err */) {\n          var startIndex = actionIndex;\n          if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n          actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n          if (!tokenizer.extend) {\n            main = token;\n            if (actionIndex > startIndex) break;\n          }\n        }\n      }\n      while (this.actions.length > actionIndex) this.actions.pop();\n      if (lookAhead) stack.setLookAhead(lookAhead);\n      if (!main && stack.pos == this.stream.end) {\n        main = new CachedToken();\n        main.value = stack.p.parser.eofTerm;\n        main.start = main.end = stack.pos;\n        actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n      }\n      this.mainToken = main;\n      return this.actions;\n    }\n  }, {\n    key: \"getMainToken\",\n    value: function getMainToken(stack) {\n      if (this.mainToken) return this.mainToken;\n      var main = new CachedToken(),\n        pos = stack.pos,\n        p = stack.p;\n      main.start = pos;\n      main.end = Math.min(pos + 1, p.stream.end);\n      main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n      return main;\n    }\n  }, {\n    key: \"updateCachedToken\",\n    value: function updateCachedToken(token, tokenizer, stack) {\n      var start = this.stream.clipPos(stack.pos);\n      tokenizer.token(this.stream.reset(start, token), stack);\n      if (token.value > -1) {\n        var parser = stack.p.parser;\n        for (var i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {\n          var result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n          if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n            if ((result & 1) == 0 /* Specialize.Specialize */) token.value = result >> 1;else token.extended = result >> 1;\n            break;\n          }\n        }\n      } else {\n        token.value = 0 /* Term.Err */;\n        token.end = this.stream.clipPos(start + 1);\n      }\n    }\n  }, {\n    key: \"putAction\",\n    value: function putAction(action, token, end, index) {\n      // Don't add duplicate actions\n      for (var i = 0; i < index; i += 3) if (this.actions[i] == action) return index;\n      this.actions[index++] = action;\n      this.actions[index++] = token;\n      this.actions[index++] = end;\n      return index;\n    }\n  }, {\n    key: \"addActions\",\n    value: function addActions(stack, token, end, index) {\n      var state = stack.state,\n        parser = stack.p.parser,\n        data = parser.data;\n      for (var set = 0; set < 2; set++) {\n        for (var i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n          if (data[i] == 65535 /* Seq.End */) {\n            if (data[i + 1] == 1 /* Seq.Next */) {\n              i = pair(data, i + 2);\n            } else {\n              if (index == 0 && data[i + 1] == 2 /* Seq.Other */) index = this.putAction(pair(data, i + 2), token, end, index);\n              break;\n            }\n          }\n          if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);\n        }\n      }\n      return index;\n    }\n  }]);\n  return TokenCache;\n}();\nvar Rec;\n(function (Rec) {\n  Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n  Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n  // When two stacks have been running independently long enough to\n  // add this many elements to their buffers, prune one.\n  Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n  Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n  // Once a stack reaches this depth (in .stack.length) force-reduce\n  // it back to CutTo to avoid creating trees that overflow the stack\n  // on recursive traversal.\n  Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n  Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n  Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n  // The maximum number of non-recovering stacks to explore (to avoid\n  // getting bogged down with exponentially multiplying stacks in\n  // ambiguous content)\n  Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nvar Parse = /*#__PURE__*/function () {\n  function Parse(parser, input, fragments, ranges) {\n    _classCallCheck(this, Parse);\n    this.parser = parser;\n    this.input = input;\n    this.ranges = ranges;\n    this.recovering = 0;\n    this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n    this.minStackPos = 0;\n    this.reused = [];\n    this.stoppedAt = null;\n    this.lastBigReductionStart = -1;\n    this.lastBigReductionSize = 0;\n    this.bigReductionCount = 0;\n    this.stream = new InputStream(input, ranges);\n    this.tokens = new TokenCache(parser, this.stream);\n    this.topTerm = parser.top[1];\n    var from = ranges[0].from;\n    this.stacks = [Stack.start(this, parser.top[0], from)];\n    this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;\n  }\n  _createClass(Parse, [{\n    key: \"parsedPos\",\n    get: function get() {\n      return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n  }, {\n    key: \"advance\",\n    value: function advance() {\n      var stacks = this.stacks,\n        pos = this.minStackPos;\n      // This will hold stacks beyond `pos`.\n      var newStacks = this.stacks = [];\n      var stopped, stoppedTokens;\n      // If a large amount of reductions happened with the same start\n      // position, force the stack out of that production in order to\n      // avoid creating a tree too deep to recurse through.\n      // (This is an ugly kludge, because unfortunately there is no\n      // straightforward, cheap way to check for this happening, due to\n      // the history of reductions only being available in an\n      // expensive-to-access format in the stack buffers.)\n      if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n        var _stacks = _slicedToArray(stacks, 1),\n          s = _stacks[0];\n        while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) {}\n        this.bigReductionCount = this.lastBigReductionSize = 0;\n      }\n      // Keep advancing any stacks at `pos` until they either move\n      // forward or can't be advanced. Gather stacks that can't be\n      // advanced further in `stopped`.\n      for (var i = 0; i < stacks.length; i++) {\n        var stack = stacks[i];\n        for (;;) {\n          this.tokens.mainToken = null;\n          if (stack.pos > pos) {\n            newStacks.push(stack);\n          } else if (this.advanceStack(stack, newStacks, stacks)) {\n            continue;\n          } else {\n            if (!stopped) {\n              stopped = [];\n              stoppedTokens = [];\n            }\n            stopped.push(stack);\n            var tok = this.tokens.getMainToken(stack);\n            stoppedTokens.push(tok.value, tok.end);\n          }\n          break;\n        }\n      }\n      if (!newStacks.length) {\n        var finished = stopped && findFinished(stopped);\n        if (finished) return this.stackToTree(finished);\n        if (this.parser.strict) {\n          if (verbose && stopped) console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n          throw new SyntaxError(\"No parse at \" + pos);\n        }\n        if (!this.recovering) this.recovering = 5 /* Rec.Distance */;\n      }\n\n      if (this.recovering && stopped) {\n        var _finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);\n        if (_finished) return this.stackToTree(_finished.forceAll());\n      }\n      if (this.recovering) {\n        var maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n        if (newStacks.length > maxRemaining) {\n          newStacks.sort(function (a, b) {\n            return b.score - a.score;\n          });\n          while (newStacks.length > maxRemaining) newStacks.pop();\n        }\n        if (newStacks.some(function (s) {\n          return s.reducePos > pos;\n        })) this.recovering--;\n      } else if (newStacks.length > 1) {\n        // Prune stacks that are in the same state, or that have been\n        // running without splitting for a while, to avoid getting stuck\n        // with multiple successful stacks running endlessly on.\n        outer: for (var _i3 = 0; _i3 < newStacks.length - 1; _i3++) {\n          var _stack = newStacks[_i3];\n          for (var j = _i3 + 1; j < newStacks.length; j++) {\n            var other = newStacks[j];\n            if (_stack.sameState(other) || _stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n              if ((_stack.score - other.score || _stack.buffer.length - other.buffer.length) > 0) {\n                newStacks.splice(j--, 1);\n              } else {\n                newStacks.splice(_i3--, 1);\n                continue outer;\n              }\n            }\n          }\n        }\n        if (newStacks.length > 12 /* Rec.MaxStackCount */) newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n      }\n\n      this.minStackPos = newStacks[0].pos;\n      for (var _i4 = 1; _i4 < newStacks.length; _i4++) if (newStacks[_i4].pos < this.minStackPos) this.minStackPos = newStacks[_i4].pos;\n      return null;\n    }\n  }, {\n    key: \"stopAt\",\n    value: function stopAt(pos) {\n      if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError(\"Can't move stoppedAt forward\");\n      this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n  }, {\n    key: \"advanceStack\",\n    value: function advanceStack(stack, stacks, split) {\n      var start = stack.pos,\n        parser = this.parser;\n      var base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n      if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;\n      if (this.fragments) {\n        var strictCx = stack.curContext && stack.curContext.tracker.strict,\n          cxHash = strictCx ? stack.curContext.hash : 0;\n        for (var cached = this.fragments.nodeAt(start); cached;) {\n          var match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n          if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n            stack.useNode(cached, match);\n            if (verbose) console.log(base + this.stackID(stack) + \" (via reuse of \".concat(parser.getName(cached.type.id), \")\"));\n            return true;\n          }\n          if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;\n          var inner = cached.children[0];\n          if (inner instanceof Tree && cached.positions[0] == 0) cached = inner;else break;\n        }\n      }\n      var defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n      if (defaultReduce > 0) {\n        stack.reduce(defaultReduce);\n        if (verbose) console.log(base + this.stackID(stack) + \" (via always-reduce \".concat(parser.getName(defaultReduce & 65535 /* Action.ValueMask */), \")\"));\n        return true;\n      }\n      if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n        while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) {}\n      }\n      var actions = this.tokens.getActions(stack);\n      for (var i = 0; i < actions.length;) {\n        var action = actions[i++],\n          term = actions[i++],\n          end = actions[i++];\n        var last = i == actions.length || !split;\n        var localStack = last ? stack : stack.split();\n        localStack.apply(action, term, end);\n        if (verbose) console.log(base + this.stackID(localStack) + \" (via \".concat((action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\" : \"reduce of \".concat(parser.getName(action & 65535 /* Action.ValueMask */)), \" for \").concat(parser.getName(term), \" @ \").concat(start).concat(localStack == stack ? \"\" : \", split\", \")\"));\n        if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);\n      }\n      return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n  }, {\n    key: \"advanceFully\",\n    value: function advanceFully(stack, newStacks) {\n      var pos = stack.pos;\n      for (;;) {\n        if (!this.advanceStack(stack, null, null)) return false;\n        if (stack.pos > pos) {\n          pushStackDedup(stack, newStacks);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"runRecovery\",\n    value: function runRecovery(stacks, tokens, newStacks) {\n      var finished = null,\n        restarted = false;\n      for (var i = 0; i < stacks.length; i++) {\n        var stack = stacks[i],\n          token = tokens[i << 1],\n          tokenEnd = tokens[(i << 1) + 1];\n        var base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (stack.deadEnd) {\n          if (restarted) continue;\n          restarted = true;\n          stack.restart();\n          if (verbose) console.log(base + this.stackID(stack) + \" (restarted)\");\n          var done = this.advanceFully(stack, newStacks);\n          if (done) continue;\n        }\n        var force = stack.split(),\n          forceBase = base;\n        for (var j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n          if (verbose) console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n          var _done = this.advanceFully(force, newStacks);\n          if (_done) break;\n          if (verbose) forceBase = this.stackID(force) + \" -> \";\n        }\n        var _iterator3 = _createForOfIteratorHelper(stack.recoverByInsert(token)),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var insert = _step3.value;\n            if (verbose) console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n            this.advanceFully(insert, newStacks);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        if (this.stream.end > stack.pos) {\n          if (tokenEnd == stack.pos) {\n            tokenEnd++;\n            token = 0 /* Term.Err */;\n          }\n\n          stack.recoverByDelete(token, tokenEnd);\n          if (verbose) console.log(base + this.stackID(stack) + \" (via recover-delete \".concat(this.parser.getName(token), \")\"));\n          pushStackDedup(stack, newStacks);\n        } else if (!finished || finished.score < stack.score) {\n          finished = stack;\n        }\n      }\n      return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n  }, {\n    key: \"stackToTree\",\n    value: function stackToTree(stack) {\n      stack.close();\n      return Tree.build({\n        buffer: StackBufferCursor.create(stack),\n        nodeSet: this.parser.nodeSet,\n        topID: this.topTerm,\n        maxBufferLength: this.parser.bufferLength,\n        reused: this.reused,\n        start: this.ranges[0].from,\n        length: stack.pos - this.ranges[0].from,\n        minRepeatType: this.parser.minRepeatTerm\n      });\n    }\n  }, {\n    key: \"stackID\",\n    value: function stackID(stack) {\n      var id = (stackIDs || (stackIDs = new WeakMap())).get(stack);\n      if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n      return id + stack;\n    }\n  }]);\n  return Parse;\n}();\nfunction pushStackDedup(stack, newStacks) {\n  for (var i = 0; i < newStacks.length; i++) {\n    var other = newStacks[i];\n    if (other.pos == stack.pos && other.sameState(stack)) {\n      if (newStacks[i].score < stack.score) newStacks[i] = stack;\n      return;\n    }\n  }\n  newStacks.push(stack);\n}\nvar Dialect = /*#__PURE__*/function () {\n  function Dialect(source, flags, disabled) {\n    _classCallCheck(this, Dialect);\n    this.source = source;\n    this.flags = flags;\n    this.disabled = disabled;\n  }\n  _createClass(Dialect, [{\n    key: \"allows\",\n    value: function allows(term) {\n      return !this.disabled || this.disabled[term] == 0;\n    }\n  }]);\n  return Dialect;\n}();\nvar id = function id(x) {\n  return x;\n};\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nvar ContextTracker = /*#__PURE__*/_createClass(\n/// Define a context tracker.\nfunction ContextTracker(spec) {\n  _classCallCheck(this, ContextTracker);\n  this.start = spec.start;\n  this.shift = spec.shift || id;\n  this.reduce = spec.reduce || id;\n  this.reuse = spec.reuse || id;\n  this.hash = spec.hash || function () {\n    return 0;\n  };\n  this.strict = spec.strict !== false;\n}); /// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nvar LRParser = /*#__PURE__*/function (_Parser) {\n  _inherits(LRParser, _Parser);\n  var _super = _createSuper(LRParser);\n  /// @internal\n  function LRParser(spec) {\n    var _this$nodeSet;\n    var _this;\n    _classCallCheck(this, LRParser);\n    _this = _super.call(this);\n    /// @internal\n    _this.wrappers = [];\n    if (spec.version != 14 /* File.Version */) throw new RangeError(\"Parser version (\".concat(spec.version, \") doesn't match runtime version (\", 14 /* File.Version */, \")\"));\n    var nodeNames = spec.nodeNames.split(\" \");\n    _this.minRepeatTerm = nodeNames.length;\n    for (var i = 0; i < spec.repeatNodeCount; i++) nodeNames.push(\"\");\n    var topTerms = Object.keys(spec.topRules).map(function (r) {\n      return spec.topRules[r][1];\n    });\n    var nodeProps = [];\n    for (var _i5 = 0; _i5 < nodeNames.length; _i5++) nodeProps.push([]);\n    function setProp(nodeID, prop, value) {\n      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n    }\n    if (spec.nodeProps) {\n      var _iterator4 = _createForOfIteratorHelper(spec.nodeProps),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var propSpec = _step4.value;\n          var prop = propSpec[0];\n          if (typeof prop == \"string\") prop = NodeProp[prop];\n          for (var _i6 = 1; _i6 < propSpec.length;) {\n            var next = propSpec[_i6++];\n            if (next >= 0) {\n              setProp(next, prop, propSpec[_i6++]);\n            } else {\n              var value = propSpec[_i6 + -next];\n              for (var j = -next; j > 0; j--) setProp(propSpec[_i6++], prop, value);\n              _i6++;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n    _this.nodeSet = new NodeSet(nodeNames.map(function (name, i) {\n      return NodeType.define({\n        name: i >= _this.minRepeatTerm ? undefined : name,\n        id: i,\n        props: nodeProps[i],\n        top: topTerms.indexOf(i) > -1,\n        error: i == 0,\n        skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n      });\n    }));\n    if (spec.propSources) _this.nodeSet = (_this$nodeSet = _this.nodeSet).extend.apply(_this$nodeSet, _toConsumableArray(spec.propSources));\n    _this.strict = false;\n    _this.bufferLength = DefaultBufferLength;\n    var tokenArray = decodeArray(spec.tokenData);\n    _this.context = spec.context;\n    _this.specializerSpecs = spec.specialized || [];\n    _this.specialized = new Uint16Array(_this.specializerSpecs.length);\n    for (var _i7 = 0; _i7 < _this.specializerSpecs.length; _i7++) _this.specialized[_i7] = _this.specializerSpecs[_i7].term;\n    _this.specializers = _this.specializerSpecs.map(getSpecializer);\n    _this.states = decodeArray(spec.states, Uint32Array);\n    _this.data = decodeArray(spec.stateData);\n    _this.goto = decodeArray(spec.goto);\n    _this.maxTerm = spec.maxTerm;\n    _this.tokenizers = spec.tokenizers.map(function (value) {\n      return typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value;\n    });\n    _this.topRules = spec.topRules;\n    _this.dialects = spec.dialects || {};\n    _this.dynamicPrecedences = spec.dynamicPrecedences || null;\n    _this.tokenPrecTable = spec.tokenPrec;\n    _this.termNames = spec.termNames || null;\n    _this.maxNode = _this.nodeSet.types.length - 1;\n    _this.dialect = _this.parseDialect();\n    _this.top = _this.topRules[Object.keys(_this.topRules)[0]];\n    return _this;\n  }\n  _createClass(LRParser, [{\n    key: \"createParse\",\n    value: function createParse(input, fragments, ranges) {\n      var parse = new Parse(this, input, fragments, ranges);\n      var _iterator5 = _createForOfIteratorHelper(this.wrappers),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var w = _step5.value;\n          parse = w(parse, input, fragments, ranges);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return parse;\n    }\n    /// Get a goto table entry @internal\n  }, {\n    key: \"getGoto\",\n    value: function getGoto(state, term) {\n      var loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var table = this.goto;\n      if (term >= table[0]) return -1;\n      for (var pos = table[term + 1];;) {\n        var groupTag = table[pos++],\n          last = groupTag & 1;\n        var target = table[pos++];\n        if (last && loose) return target;\n        for (var end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;\n        if (last) return -1;\n      }\n    }\n    /// Check if this state has an action for a given terminal @internal\n  }, {\n    key: \"hasAction\",\n    value: function hasAction(state, terminal) {\n      var data = this.data;\n      for (var set = 0; set < 2; set++) {\n        for (var i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n          if ((next = data[i]) == 65535 /* Seq.End */) {\n            if (data[i + 1] == 1 /* Seq.Next */) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2 /* Seq.Other */) return pair(data, i + 2);else break;\n          }\n          if (next == terminal || next == 0 /* Term.Err */) return pair(data, i + 1);\n        }\n      }\n      return 0;\n    }\n    /// @internal\n  }, {\n    key: \"stateSlot\",\n    value: function stateSlot(state, slot) {\n      return this.states[state * 6 /* ParseState.Size */ + slot];\n    }\n    /// @internal\n  }, {\n    key: \"stateFlag\",\n    value: function stateFlag(state, flag) {\n      return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n  }, {\n    key: \"validAction\",\n    value: function validAction(state, action) {\n      if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */)) return true;\n      for (var i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n        if (this.data[i] == 65535 /* Seq.End */) {\n          if (this.data[i + 1] == 1 /* Seq.Next */) i = pair(this.data, i + 2);else return false;\n        }\n        if (action == pair(this.data, i + 1)) return true;\n      }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n  }, {\n    key: \"nextStates\",\n    value: function nextStates(state) {\n      var _this2 = this;\n      var result = [];\n      var _loop2 = function _loop2(_i8) {\n        if (_this2.data[_i8] == 65535 /* Seq.End */) {\n          if (_this2.data[_i8 + 1] == 1 /* Seq.Next */) _i8 = pair(_this2.data, _i8 + 2);else {\n            i = _i8;\n            return \"break\";\n          }\n        }\n        if ((_this2.data[_i8 + 2] & 65536 /* Action.ReduceFlag */ >> 16) == 0) {\n          var value = _this2.data[_i8 + 1];\n          if (!result.some(function (v, i) {\n            return i & 1 && v == value;\n          })) result.push(_this2.data[_i8], value);\n        }\n        i = _i8;\n      };\n      for (var i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n        var _ret = _loop2(i);\n        if (_ret === \"break\") break;\n      }\n      return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n  }, {\n    key: \"configure\",\n    value: function configure(config) {\n      var _this$nodeSet2;\n      // Hideous reflection-based kludge to make it easy to create a\n      // slightly modified copy of a parser.\n      var copy = Object.assign(Object.create(LRParser.prototype), this);\n      if (config.props) copy.nodeSet = (_this$nodeSet2 = this.nodeSet).extend.apply(_this$nodeSet2, _toConsumableArray(config.props));\n      if (config.top) {\n        var info = this.topRules[config.top];\n        if (!info) throw new RangeError(\"Invalid top rule name \".concat(config.top));\n        copy.top = info;\n      }\n      if (config.tokenizers) copy.tokenizers = this.tokenizers.map(function (t) {\n        var found = config.tokenizers.find(function (r) {\n          return r.from == t;\n        });\n        return found ? found.to : t;\n      });\n      if (config.specializers) {\n        copy.specializers = this.specializers.slice();\n        copy.specializerSpecs = this.specializerSpecs.map(function (s, i) {\n          var found = config.specializers.find(function (r) {\n            return r.from == s.external;\n          });\n          if (!found) return s;\n          var spec = Object.assign(Object.assign({}, s), {\n            external: found.to\n          });\n          copy.specializers[i] = getSpecializer(spec);\n          return spec;\n        });\n      }\n      if (config.contextTracker) copy.context = config.contextTracker;\n      if (config.dialect) copy.dialect = this.parseDialect(config.dialect);\n      if (config.strict != null) copy.strict = config.strict;\n      if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);\n      if (config.bufferLength != null) copy.bufferLength = config.bufferLength;\n      return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n  }, {\n    key: \"hasWrappers\",\n    value: function hasWrappers() {\n      return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n  }, {\n    key: \"getName\",\n    value: function getName(term) {\n      return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n  }, {\n    key: \"eofTerm\",\n    get: function get() {\n      return this.maxNode + 1;\n    }\n    /// The type of top node produced by the parser.\n  }, {\n    key: \"topNode\",\n    get: function get() {\n      return this.nodeSet.types[this.top[1]];\n    }\n    /// @internal\n  }, {\n    key: \"dynamicPrecedence\",\n    value: function dynamicPrecedence(term) {\n      var prec = this.dynamicPrecedences;\n      return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n  }, {\n    key: \"parseDialect\",\n    value: function parseDialect(dialect) {\n      var values = Object.keys(this.dialects),\n        flags = values.map(function () {\n          return false;\n        });\n      if (dialect) {\n        var _iterator6 = _createForOfIteratorHelper(dialect.split(\" \")),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var part = _step6.value;\n            var _id = values.indexOf(part);\n            if (_id >= 0) flags[_id] = true;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n      var disabled = null;\n      for (var i = 0; i < values.length; i++) if (!flags[i]) {\n        for (var j = this.dialects[values[i]], _id2; (_id2 = this.data[j++]) != 65535 /* Seq.End */;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[_id2] = 1;\n      }\n      return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(spec) {\n      return new LRParser(spec);\n    }\n  }]);\n  return LRParser;\n}(Parser);\nfunction pair(data, off) {\n  return data[off] | data[off + 1] << 16;\n}\nfunction findFinished(stacks) {\n  var best = null;\n  var _iterator7 = _createForOfIteratorHelper(stacks),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var stack = _step7.value;\n      var stopped = stack.p.stoppedAt;\n      if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) && (!best || best.score < stack.score)) best = stack;\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return best;\n}\nfunction getSpecializer(spec) {\n  if (spec.external) {\n    var mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n    return function (value, stack) {\n      return spec.external(value, stack) << 1 | mask;\n    };\n  }\n  return spec.get;\n}\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };","map":{"version":3,"names":["Parser","NodeProp","NodeSet","NodeType","DefaultBufferLength","Tree","IterMode","Stack","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","arguments","length","undefined","parent","_classCallCheck","_createClass","key","value","toString","concat","filter","_","i","get","context","pushState","start","push","reduce","action","_a","depth","type","parser","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","ranges","from","size","nodeSet","types","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","isReduce","cur","top","index","shift","next","nextEnd","nextState","maxNode","shiftContext","apply","useNode","reused","updateContext","tracker","reuse","stream","reset","split","off","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","_loop","some","v","result","forceReduce","validAction","target","forceAll","data","restart","sameState","other","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","StackContext","setLookAhead","close","strict","cx","Recover","goto","StackBufferCursor","maybeNext","fork","create","decodeArray","input","Type","Uint16Array","array","out","charCodeAt","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","to","readNext","resolveOffset","offset","assoc","clipPos","_iterator","_createForOfIteratorHelper","_step","n","done","Math","max","err","e","f","peek","idx","resolved","acceptToken","endOffset","RangeError","getChunk","nextChunk","advance","setDone","read","_iterator2","_step2","r","min","TokenGroup","id","readToken","tokenPrecTable","prototype","contextual","fallback","extend","LocalTokenGroup","precTable","elseToken","skipped","ExternalTokenizer","options","group","precOffset","groupMask","scan","accEnd","allows","overrides","low","high","mid","findOffset","prev","tableData","tableOffset","iPrev","verbose","process","env","test","LOG","stackIDs","Safety","cutAt","tree","side","cursor","IncludeAnonymous","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","prop","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","pair","Rec","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","newStacks","stopped","stoppedTokens","_stacks","_slicedToArray","advanceStack","tok","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","j","splice","stopAt","stackID","strictCx","cxHash","cached","match","contextHash","inner","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","deadEnd","force","forceBase","_iterator3","_step3","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","_Parser","_inherits","_super","_createSuper","_this$nodeSet","_this","call","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","_iterator4","_step4","propSpec","name","define","props","indexOf","error","skippedNodes","propSources","_toConsumableArray","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","createParse","parse","_iterator5","_step5","w","loose","table","groupTag","terminal","slot","flag","_this2","_loop2","_i8","_ret","configure","config","_this$nodeSet2","copy","assign","info","t","found","find","external","contextTracker","wrap","hasWrappers","prec","values","_iterator6","_step6","part","Uint8Array","_iterator7","_step7"],"sources":["/Users/adityapethe/Developer/ui-chat/ui-chat/client/node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special caseâ€”they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n    Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (input.next < 0)\n                break;\n            input.advance();\n            input.reset(input.pos, input.token);\n            skipped++;\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n    Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n    // The maximum number of non-recovering stacks to explore (to avoid\n    // getting bogged down with exponentially multiplying stacks in\n    // ambiguous content)\n    Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n            while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}