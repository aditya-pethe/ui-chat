"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.solarizedLightInit = exports.solarizedLight = exports.solarizedDarkInit = exports.solarizedDark = exports.defaultSettingsSolarizedLight = exports.defaultSettingsSolarizedDark = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _highlight = require("@lezer/highlight");
var _codemirrorThemes = require("@uiw/codemirror-themes");
var defaultSettingsSolarizedLight = {
  background: '#fdf6e3',
  foreground: '#657b83',
  caret: '#586e75',
  selection: '#dfd9c8',
  selectionMatch: '#dfd9c8',
  gutterBackground: '#00000010',
  gutterForeground: '#657b83',
  lineHighlight: '#dfd9c8'
};
exports.defaultSettingsSolarizedLight = defaultSettingsSolarizedLight;
var solarizedLightInit = function solarizedLightInit(options) {
  var _ref = options || {},
    _ref$theme = _ref.theme,
    theme = _ref$theme === void 0 ? 'light' : _ref$theme,
    _ref$settings = _ref.settings,
    settings = _ref$settings === void 0 ? {} : _ref$settings,
    _ref$styles = _ref.styles,
    styles = _ref$styles === void 0 ? [] : _ref$styles;
  return (0, _codemirrorThemes.createTheme)({
    theme: theme,
    settings: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defaultSettingsSolarizedLight), settings),
    styles: [{
      tag: _highlight.tags.keyword,
      color: '#859900'
    }, {
      tag: [_highlight.tags.name, _highlight.tags.deleted, _highlight.tags.character, _highlight.tags.propertyName, _highlight.tags.macroName],
      color: '#2aa198'
    }, {
      tag: [_highlight.tags.variableName],
      color: '#268bd2'
    }, {
      tag: [_highlight.tags["function"](_highlight.tags.variableName)],
      color: '#268bd2'
    }, {
      tag: [_highlight.tags.labelName],
      color: '#d33682'
    }, {
      tag: [_highlight.tags.color, _highlight.tags.constant(_highlight.tags.name), _highlight.tags.standard(_highlight.tags.name)],
      color: '#b58900'
    }, {
      tag: [_highlight.tags.definition(_highlight.tags.name), _highlight.tags.separator],
      color: '#2aa198'
    }, {
      tag: [_highlight.tags.brace],
      color: '#d33682'
    }, {
      tag: [_highlight.tags.annotation],
      color: '#d30102'
    }, {
      tag: [_highlight.tags.number, _highlight.tags.changed, _highlight.tags.annotation, _highlight.tags.modifier, _highlight.tags.self, _highlight.tags.namespace],
      color: '#d33682'
    }, {
      tag: [_highlight.tags.typeName, _highlight.tags.className],
      color: '#cb4b16'
    }, {
      tag: [_highlight.tags.operator, _highlight.tags.operatorKeyword],
      color: '#6c71c4'
    }, {
      tag: [_highlight.tags.tagName],
      color: '#268bd2'
    }, {
      tag: [_highlight.tags.squareBracket],
      color: '#dc322f'
    }, {
      tag: [_highlight.tags.angleBracket],
      color: '#073642'
    }, {
      tag: [_highlight.tags.attributeName],
      color: '#93a1a1'
    }, {
      tag: [_highlight.tags.regexp],
      color: '#d30102'
    }, {
      tag: [_highlight.tags.quote],
      color: '#859900'
    }, {
      tag: [_highlight.tags.string],
      color: '#b58900'
    }, {
      tag: _highlight.tags.link,
      color: '#2aa198',
      textDecoration: 'underline',
      textUnderlinePosition: 'under'
    }, {
      tag: [_highlight.tags.url, _highlight.tags.escape, _highlight.tags.special(_highlight.tags.string)],
      color: '#b58900'
    }, {
      tag: [_highlight.tags.meta],
      color: '#dc322f'
    }, {
      tag: [_highlight.tags.comment],
      color: '#586e75',
      fontStyle: 'italic'
    }, {
      tag: _highlight.tags.strong,
      fontWeight: 'bold',
      color: '#586e75'
    }, {
      tag: _highlight.tags.emphasis,
      fontStyle: 'italic',
      color: '#859900'
    }, {
      tag: _highlight.tags.strikethrough,
      textDecoration: 'line-through'
    }, {
      tag: _highlight.tags.heading,
      fontWeight: 'bold',
      color: '#b58900'
    }, {
      tag: _highlight.tags.heading1,
      fontWeight: 'bold',
      color: '#002b36'
    }, {
      tag: [_highlight.tags.heading2, _highlight.tags.heading3, _highlight.tags.heading4],
      fontWeight: 'bold',
      color: '#002b36'
    }, {
      tag: [_highlight.tags.heading5, _highlight.tags.heading6],
      color: '#002b36'
    }, {
      tag: [_highlight.tags.atom, _highlight.tags.bool, _highlight.tags.special(_highlight.tags.variableName)],
      color: '#d33682'
    }, {
      tag: [_highlight.tags.processingInstruction, _highlight.tags.inserted, _highlight.tags.contentSeparator],
      color: '#dc322f'
    }, {
      tag: [_highlight.tags.contentSeparator],
      color: '#b58900'
    }, {
      tag: _highlight.tags.invalid,
      color: '#073642',
      borderBottom: "1px dotted #dc322f"
    }].concat((0, _toConsumableArray2["default"])(styles))
  });
};
exports.solarizedLightInit = solarizedLightInit;
var solarizedLight = solarizedLightInit();
exports.solarizedLight = solarizedLight;
var defaultSettingsSolarizedDark = {
  background: '#002b36',
  foreground: '#93a1a1',
  caret: '#839496',
  selection: '#173541',
  selectionMatch: '#aafe661a',
  gutterBackground: '#00252f',
  gutterForeground: '#839496',
  lineHighlight: '#173541'
};
exports.defaultSettingsSolarizedDark = defaultSettingsSolarizedDark;
var solarizedDarkInit = function solarizedDarkInit(options) {
  var _ref2 = options || {},
    _ref2$theme = _ref2.theme,
    theme = _ref2$theme === void 0 ? 'dark' : _ref2$theme,
    _ref2$settings = _ref2.settings,
    settings = _ref2$settings === void 0 ? {} : _ref2$settings,
    _ref2$styles = _ref2.styles,
    styles = _ref2$styles === void 0 ? [] : _ref2$styles;
  return (0, _codemirrorThemes.createTheme)({
    theme: theme,
    settings: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defaultSettingsSolarizedDark), settings),
    styles: [{
      tag: _highlight.tags.keyword,
      color: '#859900'
    }, {
      tag: [_highlight.tags.name, _highlight.tags.deleted, _highlight.tags.character, _highlight.tags.propertyName, _highlight.tags.macroName],
      color: '#2aa198'
    }, {
      tag: [_highlight.tags.variableName],
      color: '#93a1a1'
    }, {
      tag: [_highlight.tags["function"](_highlight.tags.variableName)],
      color: '#268bd2'
    }, {
      tag: [_highlight.tags.labelName],
      color: '#d33682'
    }, {
      tag: [_highlight.tags.color, _highlight.tags.constant(_highlight.tags.name), _highlight.tags.standard(_highlight.tags.name)],
      color: '#b58900'
    }, {
      tag: [_highlight.tags.definition(_highlight.tags.name), _highlight.tags.separator],
      color: '#2aa198'
    }, {
      tag: [_highlight.tags.brace],
      color: '#d33682'
    }, {
      tag: [_highlight.tags.annotation],
      color: '#d30102'
    }, {
      tag: [_highlight.tags.number, _highlight.tags.changed, _highlight.tags.annotation, _highlight.tags.modifier, _highlight.tags.self, _highlight.tags.namespace],
      color: '#d33682'
    }, {
      tag: [_highlight.tags.typeName, _highlight.tags.className],
      color: '#cb4b16'
    }, {
      tag: [_highlight.tags.operator, _highlight.tags.operatorKeyword],
      color: '#6c71c4'
    }, {
      tag: [_highlight.tags.tagName],
      color: '#268bd2'
    }, {
      tag: [_highlight.tags.squareBracket],
      color: '#dc322f'
    }, {
      tag: [_highlight.tags.angleBracket],
      color: '#586e75'
    }, {
      tag: [_highlight.tags.attributeName],
      color: '#93a1a1'
    }, {
      tag: [_highlight.tags.regexp],
      color: '#d30102'
    }, {
      tag: [_highlight.tags.quote],
      color: '#859900'
    }, {
      tag: [_highlight.tags.string],
      color: '#b58900'
    }, {
      tag: _highlight.tags.link,
      color: '#2aa198',
      textDecoration: 'underline',
      textUnderlinePosition: 'under'
    }, {
      tag: [_highlight.tags.url, _highlight.tags.escape, _highlight.tags.special(_highlight.tags.string)],
      color: '#b58900'
    }, {
      tag: [_highlight.tags.meta],
      color: '#dc322f'
    }, {
      tag: [_highlight.tags.comment],
      color: '#586e75',
      fontStyle: 'italic'
    }, {
      tag: _highlight.tags.strong,
      fontWeight: 'bold',
      color: '#eee8d5'
    }, {
      tag: _highlight.tags.emphasis,
      fontStyle: 'italic',
      color: '#859900'
    }, {
      tag: _highlight.tags.strikethrough,
      textDecoration: 'line-through'
    }, {
      tag: _highlight.tags.heading,
      fontWeight: 'bold',
      color: '#b58900'
    }, {
      tag: _highlight.tags.heading1,
      fontWeight: 'bold',
      color: '#fdf6e3'
    }, {
      tag: [_highlight.tags.heading2, _highlight.tags.heading3, _highlight.tags.heading4],
      fontWeight: 'bold',
      color: '#eee8d5'
    }, {
      tag: [_highlight.tags.heading5, _highlight.tags.heading6],
      color: '#eee8d5'
    }, {
      tag: [_highlight.tags.atom, _highlight.tags.bool, _highlight.tags.special(_highlight.tags.variableName)],
      color: '#d33682'
    }, {
      tag: [_highlight.tags.processingInstruction, _highlight.tags.inserted, _highlight.tags.contentSeparator],
      color: '#dc322f'
    }, {
      tag: [_highlight.tags.contentSeparator],
      color: '#b58900'
    }, {
      tag: _highlight.tags.invalid,
      color: '#586e75',
      borderBottom: "1px dotted #dc322f"
    }].concat((0, _toConsumableArray2["default"])(styles))
  });
};
exports.solarizedDarkInit = solarizedDarkInit;
var solarizedDark = solarizedDarkInit();
exports.solarizedDark = solarizedDark;